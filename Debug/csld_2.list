
csld_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba1c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800bb30  0800bb30  0000cb30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfd0  0800bfd0  0000d588  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfd0  0800bfd0  0000cfd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd8  0800bfd8  0000d588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd8  0800bfd8  0000cfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfdc  0800bfdc  0000cfdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000588  20000000  0800bfe0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000588  0800c568  0000d588  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800c568  0000d8e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d588  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0d1  00000000  00000000  0000d5b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e9d  00000000  00000000  0001c682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  0001f520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5f  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a212  00000000  00000000  00020f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c6  00000000  00000000  0003b179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d827  00000000  00000000  0005043f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddc66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053a4  00000000  00000000  000ddcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000e3050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000588 	.word	0x20000588
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb14 	.word	0x0800bb14

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000058c 	.word	0x2000058c
 800014c:	0800bb14 	.word	0x0800bb14

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <Beep>:
int beep_rounds =0;
int beep_interval_rounds=0;
int beep_interval_rounds_tre;


void Beep(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	if(distance>=100){
 8001180:	4b73      	ldr	r3, [pc, #460]	@ (8001350 <Beep+0x1d4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4973      	ldr	r1, [pc, #460]	@ (8001354 <Beep+0x1d8>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ffae 	bl	80010e8 <__aeabi_fcmpge>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <Beep+0x1c>
		HAL_TIM_Base_Stop_IT(&htim1);
 8001192:	4871      	ldr	r0, [pc, #452]	@ (8001358 <Beep+0x1dc>)
 8001194:	f004 fb2a 	bl	80057ec <HAL_TIM_Base_Stop_IT>
	}
	if(distance >=90&& distance <100){
 8001198:	4b6d      	ldr	r3, [pc, #436]	@ (8001350 <Beep+0x1d4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	496f      	ldr	r1, [pc, #444]	@ (800135c <Beep+0x1e0>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffa2 	bl	80010e8 <__aeabi_fcmpge>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d010      	beq.n	80011cc <Beep+0x50>
 80011aa:	4b69      	ldr	r3, [pc, #420]	@ (8001350 <Beep+0x1d4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4969      	ldr	r1, [pc, #420]	@ (8001354 <Beep+0x1d8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff85 	bl	80010c0 <__aeabi_fcmplt>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d007      	beq.n	80011cc <Beep+0x50>
		beep_interval_rounds_tre=500;
 80011bc:	4b68      	ldr	r3, [pc, #416]	@ (8001360 <Beep+0x1e4>)
 80011be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011c2:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 80011c4:	4864      	ldr	r0, [pc, #400]	@ (8001358 <Beep+0x1dc>)
 80011c6:	f004 fabf 	bl	8005748 <HAL_TIM_Base_Start_IT>
 80011ca:	e0bf      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=80&& distance <90){
 80011cc:	4b60      	ldr	r3, [pc, #384]	@ (8001350 <Beep+0x1d4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4964      	ldr	r1, [pc, #400]	@ (8001364 <Beep+0x1e8>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff88 	bl	80010e8 <__aeabi_fcmpge>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d00f      	beq.n	80011fe <Beep+0x82>
 80011de:	4b5c      	ldr	r3, [pc, #368]	@ (8001350 <Beep+0x1d4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	495e      	ldr	r1, [pc, #376]	@ (800135c <Beep+0x1e0>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff6b 	bl	80010c0 <__aeabi_fcmplt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <Beep+0x82>
		beep_interval_rounds_tre=250;
 80011f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <Beep+0x1e4>)
 80011f2:	22fa      	movs	r2, #250	@ 0xfa
 80011f4:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 80011f6:	4858      	ldr	r0, [pc, #352]	@ (8001358 <Beep+0x1dc>)
 80011f8:	f004 faa6 	bl	8005748 <HAL_TIM_Base_Start_IT>
 80011fc:	e0a6      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=70&& distance <80){
 80011fe:	4b54      	ldr	r3, [pc, #336]	@ (8001350 <Beep+0x1d4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4959      	ldr	r1, [pc, #356]	@ (8001368 <Beep+0x1ec>)
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff6f 	bl	80010e8 <__aeabi_fcmpge>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00f      	beq.n	8001230 <Beep+0xb4>
 8001210:	4b4f      	ldr	r3, [pc, #316]	@ (8001350 <Beep+0x1d4>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4953      	ldr	r1, [pc, #332]	@ (8001364 <Beep+0x1e8>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff52 	bl	80010c0 <__aeabi_fcmplt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <Beep+0xb4>
		beep_interval_rounds_tre=167;
 8001222:	4b4f      	ldr	r3, [pc, #316]	@ (8001360 <Beep+0x1e4>)
 8001224:	22a7      	movs	r2, #167	@ 0xa7
 8001226:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8001228:	484b      	ldr	r0, [pc, #300]	@ (8001358 <Beep+0x1dc>)
 800122a:	f004 fa8d 	bl	8005748 <HAL_TIM_Base_Start_IT>
 800122e:	e08d      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=60&& distance <70){
 8001230:	4b47      	ldr	r3, [pc, #284]	@ (8001350 <Beep+0x1d4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	494d      	ldr	r1, [pc, #308]	@ (800136c <Beep+0x1f0>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff56 	bl	80010e8 <__aeabi_fcmpge>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00f      	beq.n	8001262 <Beep+0xe6>
 8001242:	4b43      	ldr	r3, [pc, #268]	@ (8001350 <Beep+0x1d4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4948      	ldr	r1, [pc, #288]	@ (8001368 <Beep+0x1ec>)
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff39 	bl	80010c0 <__aeabi_fcmplt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <Beep+0xe6>
		beep_interval_rounds_tre=125;
 8001254:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <Beep+0x1e4>)
 8001256:	227d      	movs	r2, #125	@ 0x7d
 8001258:	601a      	str	r2, [r3, #0]
	    HAL_TIM_Base_Start_IT(&htim1);
 800125a:	483f      	ldr	r0, [pc, #252]	@ (8001358 <Beep+0x1dc>)
 800125c:	f004 fa74 	bl	8005748 <HAL_TIM_Base_Start_IT>
 8001260:	e074      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=55&& distance <60){
 8001262:	4b3b      	ldr	r3, [pc, #236]	@ (8001350 <Beep+0x1d4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4942      	ldr	r1, [pc, #264]	@ (8001370 <Beep+0x1f4>)
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff3d 	bl	80010e8 <__aeabi_fcmpge>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00f      	beq.n	8001294 <Beep+0x118>
 8001274:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <Beep+0x1d4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	493c      	ldr	r1, [pc, #240]	@ (800136c <Beep+0x1f0>)
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff20 	bl	80010c0 <__aeabi_fcmplt>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d006      	beq.n	8001294 <Beep+0x118>
		beep_interval_rounds_tre=100;
 8001286:	4b36      	ldr	r3, [pc, #216]	@ (8001360 <Beep+0x1e4>)
 8001288:	2264      	movs	r2, #100	@ 0x64
 800128a:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 800128c:	4832      	ldr	r0, [pc, #200]	@ (8001358 <Beep+0x1dc>)
 800128e:	f004 fa5b 	bl	8005748 <HAL_TIM_Base_Start_IT>
 8001292:	e05b      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=50&& distance <55){
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <Beep+0x1d4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4936      	ldr	r1, [pc, #216]	@ (8001374 <Beep+0x1f8>)
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff24 	bl	80010e8 <__aeabi_fcmpge>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d00f      	beq.n	80012c6 <Beep+0x14a>
 80012a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001350 <Beep+0x1d4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4931      	ldr	r1, [pc, #196]	@ (8001370 <Beep+0x1f4>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff07 	bl	80010c0 <__aeabi_fcmplt>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <Beep+0x14a>
		beep_interval_rounds_tre=83;
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <Beep+0x1e4>)
 80012ba:	2253      	movs	r2, #83	@ 0x53
 80012bc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 80012be:	4826      	ldr	r0, [pc, #152]	@ (8001358 <Beep+0x1dc>)
 80012c0:	f004 fa42 	bl	8005748 <HAL_TIM_Base_Start_IT>
 80012c4:	e042      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=45&& distance <50){
 80012c6:	4b22      	ldr	r3, [pc, #136]	@ (8001350 <Beep+0x1d4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	492b      	ldr	r1, [pc, #172]	@ (8001378 <Beep+0x1fc>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff0b 	bl	80010e8 <__aeabi_fcmpge>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00f      	beq.n	80012f8 <Beep+0x17c>
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <Beep+0x1d4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4925      	ldr	r1, [pc, #148]	@ (8001374 <Beep+0x1f8>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff feee 	bl	80010c0 <__aeabi_fcmplt>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <Beep+0x17c>
		beep_interval_rounds_tre=71;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <Beep+0x1e4>)
 80012ec:	2247      	movs	r2, #71	@ 0x47
 80012ee:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 80012f0:	4819      	ldr	r0, [pc, #100]	@ (8001358 <Beep+0x1dc>)
 80012f2:	f004 fa29 	bl	8005748 <HAL_TIM_Base_Start_IT>
 80012f6:	e029      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance >=40&& distance <45){
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <Beep+0x1d4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	491f      	ldr	r1, [pc, #124]	@ (800137c <Beep+0x200>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fef2 	bl	80010e8 <__aeabi_fcmpge>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00f      	beq.n	800132a <Beep+0x1ae>
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <Beep+0x1d4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	491a      	ldr	r1, [pc, #104]	@ (8001378 <Beep+0x1fc>)
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fed5 	bl	80010c0 <__aeabi_fcmplt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <Beep+0x1ae>
		beep_interval_rounds_tre=62;
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <Beep+0x1e4>)
 800131e:	223e      	movs	r2, #62	@ 0x3e
 8001320:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8001322:	480d      	ldr	r0, [pc, #52]	@ (8001358 <Beep+0x1dc>)
 8001324:	f004 fa10 	bl	8005748 <HAL_TIM_Base_Start_IT>
 8001328:	e010      	b.n	800134c <Beep+0x1d0>
	}
	else if(distance <40){
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <Beep+0x1d4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4913      	ldr	r1, [pc, #76]	@ (800137c <Beep+0x200>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fec5 	bl	80010c0 <__aeabi_fcmplt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d100      	bne.n	800133e <Beep+0x1c2>
		beep_interval_rounds_tre=1;
		HAL_TIM_Base_Start_IT(&htim1);
	}

}
 800133c:	e006      	b.n	800134c <Beep+0x1d0>
		beep_interval_rounds_tre=1;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <Beep+0x1e4>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim1);
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <Beep+0x1dc>)
 8001346:	f004 f9ff 	bl	8005748 <HAL_TIM_Base_Start_IT>
}
 800134a:	e7ff      	b.n	800134c <Beep+0x1d0>
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000004 	.word	0x20000004
 8001354:	42c80000 	.word	0x42c80000
 8001358:	20000674 	.word	0x20000674
 800135c:	42b40000 	.word	0x42b40000
 8001360:	200005a8 	.word	0x200005a8
 8001364:	42a00000 	.word	0x42a00000
 8001368:	428c0000 	.word	0x428c0000
 800136c:	42700000 	.word	0x42700000
 8001370:	425c0000 	.word	0x425c0000
 8001374:	42480000 	.word	0x42480000
 8001378:	42340000 	.word	0x42340000
 800137c:	42200000 	.word	0x42200000

08001380 <Burst_Signal>:

#include "burst.h"
int burst_rounds = BURST_ROUNDS_BASE;


void Burst_Signal(){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	if(fabs((distance - distance_lastTime))>=THRE_DISTANCE_DIFF){
 8001386:	4b3a      	ldr	r3, [pc, #232]	@ (8001470 <Burst_Signal+0xf0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3a      	ldr	r2, [pc, #232]	@ (8001474 <Burst_Signal+0xf4>)
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fbed 	bl	8000b70 <__aeabi_fsub>
 8001396:	4603      	mov	r3, r0
 8001398:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800139c:	4936      	ldr	r1, [pc, #216]	@ (8001478 <Burst_Signal+0xf8>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fea2 	bl	80010e8 <__aeabi_fcmpge>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <Burst_Signal+0x32>
		//如果距离变化速度过快，复位发射的脉冲轮数
		burst_rounds = BURST_ROUNDS_BASE;
 80013aa:	4b34      	ldr	r3, [pc, #208]	@ (800147c <Burst_Signal+0xfc>)
 80013ac:	2208      	movs	r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e037      	b.n	8001422 <Burst_Signal+0xa2>
	}else{
		//如果距离变化较慢，可以判定为连续变化，则遵循预定算法。
		if(distance>=1100){
 80013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001470 <Burst_Signal+0xf0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4932      	ldr	r1, [pc, #200]	@ (8001480 <Burst_Signal+0x100>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff fe95 	bl	80010e8 <__aeabi_fcmpge>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <Burst_Signal+0x4c>
			//如果收不到回声，就复位发射轮数
			burst_rounds = BURST_ROUNDS_BASE;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <Burst_Signal+0xfc>)
 80013c6:	2208      	movs	r2, #8
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	e02a      	b.n	8001422 <Burst_Signal+0xa2>
		}
		else if(distance<=THRE_TINY){
 80013cc:	4b28      	ldr	r3, [pc, #160]	@ (8001470 <Burst_Signal+0xf0>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe7d 	bl	80010d4 <__aeabi_fcmple>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <Burst_Signal+0x68>
			//如果距离小于微距离阈值，就把发射轮数设置为对应轮数
			burst_rounds = BURST_ROUNDS_TINY;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <Burst_Signal+0xfc>)
 80013e2:	2204      	movs	r2, #4
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	e01c      	b.n	8001422 <Burst_Signal+0xa2>
		}
		else{
			//其他距离下就根据乘性因子设置发射轮数
			burst_rounds = BURST_ROUNDS_BASE+ (int)( distance*FACTOR+0.5);
 80013e8:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <Burst_Signal+0xf0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f81b 	bl	8000428 <__aeabi_f2d>
 80013f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001468 <Burst_Signal+0xe8>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	f7ff f86e 	bl	80004d8 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <Burst_Signal+0x104>)
 800140a:	f7fe feaf 	bl	800016c <__adddf3>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fb0f 	bl	8000a38 <__aeabi_d2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	3308      	adds	r3, #8
 800141e:	4a17      	ldr	r2, [pc, #92]	@ (800147c <Burst_Signal+0xfc>)
 8001420:	6013      	str	r3, [r2, #0]
		}
	}

	int i;
	launch_time=__HAL_TIM_GET_COUNTER(&htim4);//发射信号时获取TIM4当前的计数值
 8001422:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <Burst_Signal+0x108>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001428:	4a18      	ldr	r2, [pc, #96]	@ (800148c <Burst_Signal+0x10c>)
 800142a:	6013      	str	r3, [r2, #0]
	for(i=0;i<burst_rounds*2;i++){
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	e00f      	b.n	8001452 <Burst_Signal+0xd2>
		HAL_GPIO_TogglePin(BURST_GPIO_Port, BURST_Pin);
 8001432:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001436:	4816      	ldr	r0, [pc, #88]	@ (8001490 <Burst_Signal+0x110>)
 8001438:	f002 fc2b 	bl	8003c92 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BURSTN_GPIO_Port, BURSTN_Pin);
 800143c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001440:	4813      	ldr	r0, [pc, #76]	@ (8001490 <Burst_Signal+0x110>)
 8001442:	f002 fc26 	bl	8003c92 <HAL_GPIO_TogglePin>
		Delay_us(BURST_FREQUENCY);
 8001446:	200b      	movs	r0, #11
 8001448:	f000 f824 	bl	8001494 <Delay_us>
	for(i=0;i<burst_rounds*2;i++){
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3301      	adds	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b0a      	ldr	r3, [pc, #40]	@ (800147c <Burst_Signal+0xfc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	dbe9      	blt.n	8001432 <Burst_Signal+0xb2>
	}
//	launch_time=__HAL_TIM_GET_COUNTER(&htim4);//发射信号时获取TIM4当前的计数值
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	eb851eb8 	.word	0xeb851eb8
 800146c:	3faeb851 	.word	0x3faeb851
 8001470:	20000004 	.word	0x20000004
 8001474:	200005b4 	.word	0x200005b4
 8001478:	41200000 	.word	0x41200000
 800147c:	20000000 	.word	0x20000000
 8001480:	44898000 	.word	0x44898000
 8001484:	3fe00000 	.word	0x3fe00000
 8001488:	2000074c 	.word	0x2000074c
 800148c:	200005cc 	.word	0x200005cc
 8001490:	40011000 	.word	0x40011000

08001494 <Delay_us>:
 *
 *  Created on: Oct 7, 2024
 *      Author: Uu
 */
#include "delay.h"
void Delay_us(uint32_t us) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Start(&htim2);
 800149c:	480a      	ldr	r0, [pc, #40]	@ (80014c8 <Delay_us+0x34>)
 800149e:	f004 f8e3 	bl	8005668 <HAL_TIM_Base_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 0); // 重置计数器
 80014a2:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <Delay_us+0x34>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us); // 等待直到计数达到指定值
 80014aa:	bf00      	nop
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <Delay_us+0x34>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f9      	bhi.n	80014ac <Delay_us+0x18>
	HAL_TIM_Base_Stop(&htim2); // 停止定时器
 80014b8:	4803      	ldr	r0, [pc, #12]	@ (80014c8 <Delay_us+0x34>)
 80014ba:	f004 f91f 	bl	80056fc <HAL_TIM_Base_Stop>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200006bc 	.word	0x200006bc
 80014cc:	00000000 	.word	0x00000000

080014d0 <Distance_Caculate>:
float distance= 1100; //距离，全局变量
float distance_lastTime = 0;//用于缓存上一次循环测得的距离
char distance_msg[20];//用于写入oled显示屏的字段
uint32_t launch_time;//发射时间
uint32_t receive_time;//接收时间
void Distance_Caculate(){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
	//读取TIM4的CCR1寄存器,即回声接收时瞬间
	  receive_time = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80014d6:	2100      	movs	r1, #0
 80014d8:	482b      	ldr	r0, [pc, #172]	@ (8001588 <Distance_Caculate+0xb8>)
 80014da:	f004 fd81 	bl	8005fe0 <HAL_TIM_ReadCapturedValue>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a2a      	ldr	r2, [pc, #168]	@ (800158c <Distance_Caculate+0xbc>)
 80014e2:	6013      	str	r3, [r2, #0]
	  //计算耗时(差值*分辨率1us)
	  float pulseWidth = (receive_time - launch_time)*0.000001;
 80014e4:	4b29      	ldr	r3, [pc, #164]	@ (800158c <Distance_Caculate+0xbc>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <Distance_Caculate+0xc0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ff78 	bl	80003e4 <__aeabi_ui2d>
 80014f4:	a322      	add	r3, pc, #136	@ (adr r3, 8001580 <Distance_Caculate+0xb0>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffed 	bl	80004d8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fadf 	bl	8000ac8 <__aeabi_d2f>
 800150a:	4603      	mov	r3, r0
 800150c:	607b      	str	r3, [r7, #4]
	  //缓存上次的距离
	  distance_lastTime = distance;
 800150e:	4b21      	ldr	r3, [pc, #132]	@ (8001594 <Distance_Caculate+0xc4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a21      	ldr	r2, [pc, #132]	@ (8001598 <Distance_Caculate+0xc8>)
 8001514:	6013      	str	r3, [r2, #0]
	  //计算距离
	  distance =sqrt( pow(pulseWidth * soundSpeed*100 /2,2)+pow(PROBE_DISTANCE,2)) ;
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <Distance_Caculate+0xcc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fc31 	bl	8000d84 <__aeabi_fmul>
 8001522:	4603      	mov	r3, r0
 8001524:	491e      	ldr	r1, [pc, #120]	@ (80015a0 <Distance_Caculate+0xd0>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fc2c 	bl	8000d84 <__aeabi_fmul>
 800152c:	4603      	mov	r3, r0
 800152e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fcda 	bl	8000eec <__aeabi_fdiv>
 8001538:	4603      	mov	r3, r0
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff74 	bl	8000428 <__aeabi_f2d>
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001548:	f009 fbb2 	bl	800acb0 <pow>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <Distance_Caculate+0xd4>)
 8001552:	f7fe fe0b 	bl	800016c <__adddf3>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f009 fc0f 	bl	800ad80 <sqrt>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff faad 	bl	8000ac8 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	4a08      	ldr	r2, [pc, #32]	@ (8001594 <Distance_Caculate+0xc4>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	f3af 8000 	nop.w
 8001580:	a0b5ed8d 	.word	0xa0b5ed8d
 8001584:	3eb0c6f7 	.word	0x3eb0c6f7
 8001588:	2000074c 	.word	0x2000074c
 800158c:	200005d0 	.word	0x200005d0
 8001590:	200005cc 	.word	0x200005cc
 8001594:	20000004 	.word	0x20000004
 8001598:	200005b4 	.word	0x200005b4
 800159c:	20000608 	.word	0x20000608
 80015a0:	42c80000 	.word	0x42c80000
 80015a4:	40390000 	.word	0x40390000

080015a8 <DS18B20_Init>:
char soundSpeed_msg[20];
float temperature;
float soundSpeed;
int ds18b20_online = 1;

GPIO_PinState DS18B20_Init(){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	480e      	ldr	r0, [pc, #56]	@ (80015ec <DS18B20_Init+0x44>)
 80015b4:	f002 fb55 	bl	8003c62 <HAL_GPIO_WritePin>
	Delay_us(600);
 80015b8:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80015bc:	f7ff ff6a 	bl	8001494 <Delay_us>
	HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2120      	movs	r1, #32
 80015c4:	4809      	ldr	r0, [pc, #36]	@ (80015ec <DS18B20_Init+0x44>)
 80015c6:	f002 fb4c 	bl	8003c62 <HAL_GPIO_WritePin>
	Delay_us(60);
 80015ca:	203c      	movs	r0, #60	@ 0x3c
 80015cc:	f7ff ff62 	bl	8001494 <Delay_us>
	GPIO_PinState ack = HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin);
 80015d0:	2120      	movs	r1, #32
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <DS18B20_Init+0x44>)
 80015d4:	f002 fb2e 	bl	8003c34 <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
	Delay_us(240);
 80015dc:	20f0      	movs	r0, #240	@ 0xf0
 80015de:	f7ff ff59 	bl	8001494 <Delay_us>
	return ack;
 80015e2:	79fb      	ldrb	r3, [r7, #7]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010c00 	.word	0x40010c00

080015f0 <DS18B20_WriteData>:

void DS18B20_WriteData(uint8_t data){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
	uint8_t mask=0x01;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
	while(mask!=0x00){
 80015fe:	e023      	b.n	8001648 <DS18B20_WriteData+0x58>
		HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2120      	movs	r1, #32
 8001604:	4814      	ldr	r0, [pc, #80]	@ (8001658 <DS18B20_WriteData+0x68>)
 8001606:	f002 fb2c 	bl	8003c62 <HAL_GPIO_WritePin>
		Delay_us(2);
 800160a:	2002      	movs	r0, #2
 800160c:	f7ff ff42 	bl	8001494 <Delay_us>
		if((mask & data) !=0x00){
 8001610:	7bfa      	ldrb	r2, [r7, #15]
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	4013      	ands	r3, r2
 8001616:	b2db      	uxtb	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <DS18B20_WriteData+0x38>
			HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	2120      	movs	r1, #32
 8001620:	480d      	ldr	r0, [pc, #52]	@ (8001658 <DS18B20_WriteData+0x68>)
 8001622:	f002 fb1e 	bl	8003c62 <HAL_GPIO_WritePin>
 8001626:	e004      	b.n	8001632 <DS18B20_WriteData+0x42>
		}
		else{
			HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	480a      	ldr	r0, [pc, #40]	@ (8001658 <DS18B20_WriteData+0x68>)
 800162e:	f002 fb18 	bl	8003c62 <HAL_GPIO_WritePin>
		}
		Delay_us(60);
 8001632:	203c      	movs	r0, #60	@ 0x3c
 8001634:	f7ff ff2e 	bl	8001494 <Delay_us>
		mask=mask<<1;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 800163e:	2201      	movs	r2, #1
 8001640:	2120      	movs	r1, #32
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <DS18B20_WriteData+0x68>)
 8001644:	f002 fb0d 	bl	8003c62 <HAL_GPIO_WritePin>
	while(mask!=0x00){
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1d8      	bne.n	8001600 <DS18B20_WriteData+0x10>
	}
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40010c00 	.word	0x40010c00

0800165c <DS18B20_ReadData>:


uint8_t DS18B20_ReadData(){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	uint8_t mask=0x01,data = 0x00;
 8001662:	2301      	movs	r3, #1
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	2300      	movs	r3, #0
 8001668:	71bb      	strb	r3, [r7, #6]
	while(mask!=0x00){
 800166a:	e02a      	b.n	80016c2 <DS18B20_ReadData+0x66>
		HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	2120      	movs	r1, #32
 8001670:	4818      	ldr	r0, [pc, #96]	@ (80016d4 <DS18B20_ReadData+0x78>)
 8001672:	f002 faf6 	bl	8003c62 <HAL_GPIO_WritePin>
		Delay_us(2);
 8001676:	2002      	movs	r0, #2
 8001678:	f7ff ff0c 	bl	8001494 <Delay_us>
		HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	2120      	movs	r1, #32
 8001680:	4814      	ldr	r0, [pc, #80]	@ (80016d4 <DS18B20_ReadData+0x78>)
 8001682:	f002 faee 	bl	8003c62 <HAL_GPIO_WritePin>
		Delay_us(2);
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff ff04 	bl	8001494 <Delay_us>
		if(HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin)==GPIO_PIN_SET){
 800168c:	2120      	movs	r1, #32
 800168e:	4811      	ldr	r0, [pc, #68]	@ (80016d4 <DS18B20_ReadData+0x78>)
 8001690:	f002 fad0 	bl	8003c34 <HAL_GPIO_ReadPin>
 8001694:	4603      	mov	r3, r0
 8001696:	2b01      	cmp	r3, #1
 8001698:	d104      	bne.n	80016a4 <DS18B20_ReadData+0x48>
			data = data | mask;
 800169a:	79ba      	ldrb	r2, [r7, #6]
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4313      	orrs	r3, r2
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	e008      	b.n	80016b6 <DS18B20_ReadData+0x5a>
		}
		else{
			data = data &(~mask);//读取到0
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80016b0:	4013      	ands	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	71bb      	strb	r3, [r7, #6]
		}
		Delay_us(60);
 80016b6:	203c      	movs	r0, #60	@ 0x3c
 80016b8:	f7ff feec 	bl	8001494 <Delay_us>
		mask = mask<<1;
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
	while(mask!=0x00){
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1d1      	bne.n	800166c <DS18B20_ReadData+0x10>
	}
	return data;
 80016c8:	79bb      	ldrb	r3, [r7, #6]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40010c00 	.word	0x40010c00

080016d8 <DS18B20_ReadTemperature>:

void DS18B20_ReadTemperature(){
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
	 switch (currentState) {
 80016de:	4b64      	ldr	r3, [pc, #400]	@ (8001870 <DS18B20_ReadTemperature+0x198>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	f200 80b8 	bhi.w	8001858 <DS18B20_ReadTemperature+0x180>
 80016e8:	a201      	add	r2, pc, #4	@ (adr r2, 80016f0 <DS18B20_ReadTemperature+0x18>)
 80016ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ee:	bf00      	nop
 80016f0:	08001701 	.word	0x08001701
 80016f4:	08001739 	.word	0x08001739
 80016f8:	08001771 	.word	0x08001771
 80016fc:	08001817 	.word	0x08001817
	        case STATE_START:
//	        	DS18B20_Init();
	        	if(DS18B20_Init()==GPIO_PIN_SET){
 8001700:	f7ff ff52 	bl	80015a8 <DS18B20_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <DS18B20_ReadTemperature+0x42>
					HAL_GPIO_WritePin(DS18B20S_GPIO_Port, DS18B20S_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2110      	movs	r1, #16
 800170e:	4859      	ldr	r0, [pc, #356]	@ (8001874 <DS18B20_ReadTemperature+0x19c>)
 8001710:	f002 faa7 	bl	8003c62 <HAL_GPIO_WritePin>
					ds18b20_online = 0 ;
 8001714:	4b58      	ldr	r3, [pc, #352]	@ (8001878 <DS18B20_ReadTemperature+0x1a0>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
				}
				DS18B20_WriteData(0xCC);
 800171a:	20cc      	movs	r0, #204	@ 0xcc
 800171c:	f7ff ff68 	bl	80015f0 <DS18B20_WriteData>
				DS18B20_WriteData(0x44);
 8001720:	2044      	movs	r0, #68	@ 0x44
 8001722:	f7ff ff65 	bl	80015f0 <DS18B20_WriteData>
				ds18b20_startTime = HAL_GetTick();
 8001726:	f001 ffc5 	bl	80036b4 <HAL_GetTick>
 800172a:	4603      	mov	r3, r0
 800172c:	4a53      	ldr	r2, [pc, #332]	@ (800187c <DS18B20_ReadTemperature+0x1a4>)
 800172e:	6013      	str	r3, [r2, #0]
				currentState = STATE_WAIT;
 8001730:	4b4f      	ldr	r3, [pc, #316]	@ (8001870 <DS18B20_ReadTemperature+0x198>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
				break;
 8001736:	e08f      	b.n	8001858 <DS18B20_ReadTemperature+0x180>

	        case STATE_WAIT:
	        	//状态机编程
	        	if(HAL_GetTick()-ds18b20_startTime >=750){
 8001738:	f001 ffbc 	bl	80036b4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	4b4f      	ldr	r3, [pc, #316]	@ (800187c <DS18B20_ReadTemperature+0x1a4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001748:	4293      	cmp	r3, r2
 800174a:	f240 8084 	bls.w	8001856 <DS18B20_ReadTemperature+0x17e>
	        		//HAL_Delay(750);
	        		//DS18B20_Init();
	        		//DS18B20应答调试灯，如果DS18B20不在线就亮灯并且添加标记位
	        		if(DS18B20_Init()==GPIO_PIN_SET){
 800174e:	f7ff ff2b 	bl	80015a8 <DS18B20_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <DS18B20_ReadTemperature+0x90>
	        			HAL_GPIO_WritePin(DS18B20S_GPIO_Port, DS18B20S_Pin, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2110      	movs	r1, #16
 800175c:	4845      	ldr	r0, [pc, #276]	@ (8001874 <DS18B20_ReadTemperature+0x19c>)
 800175e:	f002 fa80 	bl	8003c62 <HAL_GPIO_WritePin>
						ds18b20_online = 0 ;
 8001762:	4b45      	ldr	r3, [pc, #276]	@ (8001878 <DS18B20_ReadTemperature+0x1a0>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
	        		}
					currentState = STATE_READ;
 8001768:	4b41      	ldr	r3, [pc, #260]	@ (8001870 <DS18B20_ReadTemperature+0x198>)
 800176a:	2202      	movs	r2, #2
 800176c:	701a      	strb	r2, [r3, #0]
					//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	        	}
	        	break;
 800176e:	e072      	b.n	8001856 <DS18B20_ReadTemperature+0x17e>

	        case STATE_READ:
				DS18B20_WriteData(0xCC);
 8001770:	20cc      	movs	r0, #204	@ 0xcc
 8001772:	f7ff ff3d 	bl	80015f0 <DS18B20_WriteData>
				DS18B20_WriteData(0xBE);
 8001776:	20be      	movs	r0, #190	@ 0xbe
 8001778:	f7ff ff3a 	bl	80015f0 <DS18B20_WriteData>
				uint8_t tempLow = DS18B20_ReadData();
 800177c:	f7ff ff6e 	bl	800165c <DS18B20_ReadData>
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
				uint8_t tempHigh = DS18B20_ReadData();
 8001784:	f7ff ff6a 	bl	800165c <DS18B20_ReadData>
 8001788:	4603      	mov	r3, r0
 800178a:	71bb      	strb	r3, [r7, #6]
				uint8_t sign = tempHigh & 0xF8;
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	f023 0307 	bic.w	r3, r3, #7
 8001792:	717b      	strb	r3, [r7, #5]
				int res_proc = (int)(tempLow | (int)(tempHigh & 0x07)<< 8);
 8001794:	79fa      	ldrb	r2, [r7, #7]
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	021b      	lsls	r3, r3, #8
 800179a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800179e:	4313      	orrs	r3, r2
 80017a0:	603b      	str	r3, [r7, #0]
				temperature = res_proc*0.0625;
 80017a2:	6838      	ldr	r0, [r7, #0]
 80017a4:	f7fe fe2e 	bl	8000404 <__aeabi_i2d>
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <DS18B20_ReadTemperature+0x1a8>)
 80017ae:	f7fe fe93 	bl	80004d8 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f985 	bl	8000ac8 <__aeabi_d2f>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a30      	ldr	r2, [pc, #192]	@ (8001884 <DS18B20_ReadTemperature+0x1ac>)
 80017c2:	6013      	str	r3, [r2, #0]
				if(sign!=0){
 80017c4:	797b      	ldrb	r3, [r7, #5]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <DS18B20_ReadTemperature+0xfe>
					temperature= -temperature;
 80017ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <DS18B20_ReadTemperature+0x1ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80017d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001884 <DS18B20_ReadTemperature+0x1ac>)
 80017d4:	6013      	str	r3, [r2, #0]
				}
				soundSpeed = 331.4+temperature*0.6;
 80017d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001884 <DS18B20_ReadTemperature+0x1ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe24 	bl	8000428 <__aeabi_f2d>
 80017e0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001860 <DS18B20_ReadTemperature+0x188>)
 80017e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e6:	f7fe fe77 	bl	80004d8 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001868 <DS18B20_ReadTemperature+0x190>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe fcb8 	bl	800016c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f960 	bl	8000ac8 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <DS18B20_ReadTemperature+0x1b0>)
 800180c:	6013      	str	r3, [r2, #0]
				currentState = STATE_SHOW;
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <DS18B20_ReadTemperature+0x198>)
 8001810:	2203      	movs	r2, #3
 8001812:	701a      	strb	r2, [r3, #0]
				break;
 8001814:	e020      	b.n	8001858 <DS18B20_ReadTemperature+0x180>

	        case STATE_SHOW:
				sprintf(temperature_msg,"%.3f\n",temperature);
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <DS18B20_ReadTemperature+0x1ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fe04 	bl	8000428 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4919      	ldr	r1, [pc, #100]	@ (800188c <DS18B20_ReadTemperature+0x1b4>)
 8001826:	481a      	ldr	r0, [pc, #104]	@ (8001890 <DS18B20_ReadTemperature+0x1b8>)
 8001828:	f005 fe16 	bl	8007458 <siprintf>
				sprintf(soundSpeed_msg,"%.3f\n",soundSpeed);
 800182c:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <DS18B20_ReadTemperature+0x1b0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fdf9 	bl	8000428 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4914      	ldr	r1, [pc, #80]	@ (800188c <DS18B20_ReadTemperature+0x1b4>)
 800183c:	4815      	ldr	r0, [pc, #84]	@ (8001894 <DS18B20_ReadTemperature+0x1bc>)
 800183e:	f005 fe0b 	bl	8007458 <siprintf>
				OLED_ShowTemperature((uint8_t*)temperature_msg);
 8001842:	4813      	ldr	r0, [pc, #76]	@ (8001890 <DS18B20_ReadTemperature+0x1b8>)
 8001844:	f001 f942 	bl	8002acc <OLED_ShowTemperature>
				OLED_ShowSoundSpeed((uint8_t*)soundSpeed_msg);
 8001848:	4812      	ldr	r0, [pc, #72]	@ (8001894 <DS18B20_ReadTemperature+0x1bc>)
 800184a:	f001 f9d9 	bl	8002c00 <OLED_ShowSoundSpeed>
				currentState = STATE_START;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <DS18B20_ReadTemperature+0x198>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
				break;
 8001854:	e000      	b.n	8001858 <DS18B20_ReadTemperature+0x180>
	        	break;
 8001856:	bf00      	nop
	 }
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	33333333 	.word	0x33333333
 8001864:	3fe33333 	.word	0x3fe33333
 8001868:	66666666 	.word	0x66666666
 800186c:	4074b666 	.word	0x4074b666
 8001870:	200005d4 	.word	0x200005d4
 8001874:	40010c00 	.word	0x40010c00
 8001878:	20000008 	.word	0x20000008
 800187c:	200005d8 	.word	0x200005d8
 8001880:	3fb00000 	.word	0x3fb00000
 8001884:	20000604 	.word	0x20000604
 8001888:	20000608 	.word	0x20000608
 800188c:	0800bb30 	.word	0x0800bb30
 8001890:	200005dc 	.word	0x200005dc
 8001894:	200005f0 	.word	0x200005f0

08001898 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ac:	4b43      	ldr	r3, [pc, #268]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	4a42      	ldr	r2, [pc, #264]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018b2:	f043 0310 	orr.w	r3, r3, #16
 80018b6:	6193      	str	r3, [r2, #24]
 80018b8:	4b40      	ldr	r3, [pc, #256]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c4:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a3c      	ldr	r2, [pc, #240]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018ca:	f043 0320 	orr.w	r3, r3, #32
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b3a      	ldr	r3, [pc, #232]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0320 	and.w	r3, r3, #32
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a36      	ldr	r2, [pc, #216]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	4b31      	ldr	r3, [pc, #196]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a30      	ldr	r2, [pc, #192]	@ (80019bc <MX_GPIO_Init+0x124>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b2e      	ldr	r3, [pc, #184]	@ (80019bc <MX_GPIO_Init+0x124>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|BURSTN_Pin, GPIO_PIN_SET);
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8001912:	482b      	ldr	r0, [pc, #172]	@ (80019c0 <MX_GPIO_Init+0x128>)
 8001914:	f002 f9a5 	bl	8003c62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BURST_GPIO_Port, BURST_Pin, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800191e:	4828      	ldr	r0, [pc, #160]	@ (80019c0 <MX_GPIO_Init+0x128>)
 8001920:	f002 f99f 	bl	8003c62 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED10_Pin|LED9_Pin|LED8_Pin|LED7_Pin
 8001924:	2200      	movs	r2, #0
 8001926:	f24f 01b8 	movw	r1, #61624	@ 0xf0b8
 800192a:	4826      	ldr	r0, [pc, #152]	@ (80019c4 <MX_GPIO_Init+0x12c>)
 800192c:	f002 f999 	bl	8003c62 <HAL_GPIO_WritePin>
                          |LED1_Pin|DS18B20S_Pin|DS18B20_Pin|OLEDS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED6_Pin|LED5_Pin|LED4_Pin|LED3_Pin
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 411f 	mov.w	r1, #40704	@ 0x9f00
 8001936:	4824      	ldr	r0, [pc, #144]	@ (80019c8 <MX_GPIO_Init+0x130>)
 8001938:	f002 f993 	bl	8003c62 <HAL_GPIO_WritePin>
                          |LED2_Pin|BEEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|BURST_Pin|BURSTN_Pin;
 800193c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2302      	movs	r3, #2
 800194c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	4619      	mov	r1, r3
 8001954:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <MX_GPIO_Init+0x128>)
 8001956:	f001 ffe9 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED10_Pin|LED9_Pin|LED8_Pin|LED7_Pin
 800195a:	f24f 0398 	movw	r3, #61592	@ 0xf098
 800195e:	613b      	str	r3, [r7, #16]
                          |LED1_Pin|DS18B20S_Pin|OLEDS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2302      	movs	r3, #2
 800196a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	4814      	ldr	r0, [pc, #80]	@ (80019c4 <MX_GPIO_Init+0x12c>)
 8001974:	f001 ffda 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED6_Pin|LED5_Pin|LED4_Pin|LED3_Pin
 8001978:	f44f 431f 	mov.w	r3, #40704	@ 0x9f00
 800197c:	613b      	str	r3, [r7, #16]
                          |LED2_Pin|BEEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2302      	movs	r3, #2
 8001988:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	4619      	mov	r1, r3
 8001990:	480d      	ldr	r0, [pc, #52]	@ (80019c8 <MX_GPIO_Init+0x130>)
 8001992:	f001 ffcb 	bl	800392c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8001996:	2320      	movs	r3, #32
 8001998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800199a:	2311      	movs	r3, #17
 800199c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_GPIO_Init+0x12c>)
 80019ae:	f001 ffbd 	bl	800392c <HAL_GPIO_Init>

}
 80019b2:	bf00      	nop
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40011000 	.word	0x40011000
 80019c4:	40010c00 	.word	0x40010c00
 80019c8:	40010800 	.word	0x40010800

080019cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019d0:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019d2:	4a13      	ldr	r2, [pc, #76]	@ (8001a20 <MX_I2C1_Init+0x54>)
 80019d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80019d6:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019d8:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <MX_I2C1_Init+0x58>)
 80019da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019e2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f0:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019f6:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019fc:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <MX_I2C1_Init+0x50>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <MX_I2C1_Init+0x50>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a08:	4804      	ldr	r0, [pc, #16]	@ (8001a1c <MX_I2C1_Init+0x50>)
 8001a0a:	f002 f95b 	bl	8003cc4 <HAL_I2C_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a14:	f000 fdb7 	bl	8002586 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000060c 	.word	0x2000060c
 8001a20:	40005400 	.word	0x40005400
 8001a24:	00061a80 	.word	0x00061a80

08001a28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab8 <HAL_I2C_MspInit+0x90>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d132      	bne.n	8001aae <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a48:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <HAL_I2C_MspInit+0x94>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001abc <HAL_I2C_MspInit+0x94>)
 8001a4e:	f043 0308 	orr.w	r3, r3, #8
 8001a52:	6193      	str	r3, [r2, #24]
 8001a54:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_I2C_MspInit+0x94>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a60:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a66:	2312      	movs	r3, #18
 8001a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	4812      	ldr	r0, [pc, #72]	@ (8001ac0 <HAL_I2C_MspInit+0x98>)
 8001a76:	f001 ff59 	bl	800392c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_I2C_MspInit+0x9c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a90:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <HAL_I2C_MspInit+0x9c>)
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a96:	4b09      	ldr	r3, [pc, #36]	@ (8001abc <HAL_I2C_MspInit+0x94>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <HAL_I2C_MspInit+0x94>)
 8001a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_I2C_MspInit+0x94>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aae:	bf00      	nop
 8001ab0:	3728      	adds	r7, #40	@ 0x28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40010000 	.word	0x40010000

08001ac8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_IWDG_Init+0x2c>)
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <MX_IWDG_Init+0x30>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_IWDG_Init+0x2c>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_IWDG_Init+0x2c>)
 8001ada:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001ade:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	@ (8001af4 <MX_IWDG_Init+0x2c>)
 8001ae2:	f003 f922 	bl	8004d2a <HAL_IWDG_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001aec:	f000 fd4b 	bl	8002586 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000660 	.word	0x20000660
 8001af8:	40003000 	.word	0x40003000

08001afc <Change_LightBar>:
#include "distanceProc.h"
int too_close=0;		//标志位,防止重复统一电平导致闪烁频率异常



void Change_LightBar(){
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	if(distance>=100){
 8001b00:	4ba2      	ldr	r3, [pc, #648]	@ (8001d8c <Change_LightBar+0x290>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	49a2      	ldr	r1, [pc, #648]	@ (8001d90 <Change_LightBar+0x294>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff faee 	bl	80010e8 <__aeabi_fcmpge>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d040      	beq.n	8001b94 <Change_LightBar+0x98>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001b12:	48a0      	ldr	r0, [pc, #640]	@ (8001d94 <Change_LightBar+0x298>)
 8001b14:	f003 fe6a 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001b18:	4b9f      	ldr	r3, [pc, #636]	@ (8001d98 <Change_LightBar+0x29c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2108      	movs	r1, #8
 8001b22:	489e      	ldr	r0, [pc, #632]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001b24:	f002 f89d 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2e:	489c      	ldr	r0, [pc, #624]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001b30:	f002 f897 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001b3a:	4899      	ldr	r0, [pc, #612]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001b3c:	f002 f891 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b46:	4896      	ldr	r0, [pc, #600]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001b48:	f002 f88b 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b52:	4893      	ldr	r0, [pc, #588]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001b54:	f002 f885 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5e:	4890      	ldr	r0, [pc, #576]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001b60:	f002 f87f 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6a:	488c      	ldr	r0, [pc, #560]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001b6c:	f002 f879 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b76:	4889      	ldr	r0, [pc, #548]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001b78:	f002 f873 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b82:	4886      	ldr	r0, [pc, #536]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001b84:	f002 f86d 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b8e:	4883      	ldr	r0, [pc, #524]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001b90:	f002 f867 	bl	8003c62 <HAL_GPIO_WritePin>
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	if(distance >=90&& distance <100){
 8001b94:	4b7d      	ldr	r3, [pc, #500]	@ (8001d8c <Change_LightBar+0x290>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4982      	ldr	r1, [pc, #520]	@ (8001da4 <Change_LightBar+0x2a8>)
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff faa4 	bl	80010e8 <__aeabi_fcmpge>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d04a      	beq.n	8001c3c <Change_LightBar+0x140>
 8001ba6:	4b79      	ldr	r3, [pc, #484]	@ (8001d8c <Change_LightBar+0x290>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4979      	ldr	r1, [pc, #484]	@ (8001d90 <Change_LightBar+0x294>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fa87 	bl	80010c0 <__aeabi_fcmplt>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d041      	beq.n	8001c3c <Change_LightBar+0x140>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001bb8:	4876      	ldr	r0, [pc, #472]	@ (8001d94 <Change_LightBar+0x298>)
 8001bba:	f003 fe17 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001bbe:	4b76      	ldr	r3, [pc, #472]	@ (8001d98 <Change_LightBar+0x29c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	2108      	movs	r1, #8
 8001bc8:	4874      	ldr	r0, [pc, #464]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001bca:	f002 f84a 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd4:	4872      	ldr	r0, [pc, #456]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001bd6:	f002 f844 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001be0:	486f      	ldr	r0, [pc, #444]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001be2:	f002 f83e 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bec:	486c      	ldr	r0, [pc, #432]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001bee:	f002 f838 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf8:	4869      	ldr	r0, [pc, #420]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001bfa:	f002 f832 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c04:	4866      	ldr	r0, [pc, #408]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001c06:	f002 f82c 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c10:	4862      	ldr	r0, [pc, #392]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001c12:	f002 f826 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c1c:	485f      	ldr	r0, [pc, #380]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001c1e:	f002 f820 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001c22:	2200      	movs	r2, #0
 8001c24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c28:	485c      	ldr	r0, [pc, #368]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001c2a:	f002 f81a 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c34:	4859      	ldr	r0, [pc, #356]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001c36:	f002 f814 	bl	8003c62 <HAL_GPIO_WritePin>
 8001c3a:	e2c1      	b.n	80021c0 <Change_LightBar+0x6c4>
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	else if(distance >=80&& distance <90){
 8001c3c:	4b53      	ldr	r3, [pc, #332]	@ (8001d8c <Change_LightBar+0x290>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4959      	ldr	r1, [pc, #356]	@ (8001da8 <Change_LightBar+0x2ac>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fa50 	bl	80010e8 <__aeabi_fcmpge>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d04a      	beq.n	8001ce4 <Change_LightBar+0x1e8>
 8001c4e:	4b4f      	ldr	r3, [pc, #316]	@ (8001d8c <Change_LightBar+0x290>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4954      	ldr	r1, [pc, #336]	@ (8001da4 <Change_LightBar+0x2a8>)
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fa33 	bl	80010c0 <__aeabi_fcmplt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d041      	beq.n	8001ce4 <Change_LightBar+0x1e8>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001c60:	484c      	ldr	r0, [pc, #304]	@ (8001d94 <Change_LightBar+0x298>)
 8001c62:	f003 fdc3 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001c66:	4b4c      	ldr	r3, [pc, #304]	@ (8001d98 <Change_LightBar+0x29c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2108      	movs	r1, #8
 8001c70:	484a      	ldr	r0, [pc, #296]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001c72:	f001 fff6 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c7c:	4848      	ldr	r0, [pc, #288]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001c7e:	f001 fff0 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c88:	4845      	ldr	r0, [pc, #276]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001c8a:	f001 ffea 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c94:	4842      	ldr	r0, [pc, #264]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001c96:	f001 ffe4 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ca0:	483f      	ldr	r0, [pc, #252]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001ca2:	f001 ffde 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cac:	483c      	ldr	r0, [pc, #240]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001cae:	f001 ffd8 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001cb8:	4838      	ldr	r0, [pc, #224]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001cba:	f001 ffd2 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cc4:	4835      	ldr	r0, [pc, #212]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001cc6:	f001 ffcc 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd0:	4832      	ldr	r0, [pc, #200]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001cd2:	f001 ffc6 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cdc:	482f      	ldr	r0, [pc, #188]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001cde:	f001 ffc0 	bl	8003c62 <HAL_GPIO_WritePin>
 8001ce2:	e26d      	b.n	80021c0 <Change_LightBar+0x6c4>
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	else if(distance >=70&& distance <80){
 8001ce4:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <Change_LightBar+0x290>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4930      	ldr	r1, [pc, #192]	@ (8001dac <Change_LightBar+0x2b0>)
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff f9fc 	bl	80010e8 <__aeabi_fcmpge>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d05c      	beq.n	8001db0 <Change_LightBar+0x2b4>
 8001cf6:	4b25      	ldr	r3, [pc, #148]	@ (8001d8c <Change_LightBar+0x290>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	492b      	ldr	r1, [pc, #172]	@ (8001da8 <Change_LightBar+0x2ac>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f9df 	bl	80010c0 <__aeabi_fcmplt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d053      	beq.n	8001db0 <Change_LightBar+0x2b4>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001d08:	4822      	ldr	r0, [pc, #136]	@ (8001d94 <Change_LightBar+0x298>)
 8001d0a:	f003 fd6f 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <Change_LightBar+0x29c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001d14:	2201      	movs	r2, #1
 8001d16:	2108      	movs	r1, #8
 8001d18:	4820      	ldr	r0, [pc, #128]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001d1a:	f001 ffa2 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d24:	481e      	ldr	r0, [pc, #120]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001d26:	f001 ff9c 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d30:	481b      	ldr	r0, [pc, #108]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001d32:	f001 ff96 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001d3c:	4818      	ldr	r0, [pc, #96]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001d3e:	f001 ff90 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d48:	4815      	ldr	r0, [pc, #84]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001d4a:	f001 ff8a 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d54:	4812      	ldr	r0, [pc, #72]	@ (8001da0 <Change_LightBar+0x2a4>)
 8001d56:	f001 ff84 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d60:	480e      	ldr	r0, [pc, #56]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001d62:	f001 ff7e 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001d6c:	480b      	ldr	r0, [pc, #44]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001d6e:	f001 ff78 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d78:	4808      	ldr	r0, [pc, #32]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001d7a:	f001 ff72 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d84:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <Change_LightBar+0x2a0>)
 8001d86:	f001 ff6c 	bl	8003c62 <HAL_GPIO_WritePin>
 8001d8a:	e219      	b.n	80021c0 <Change_LightBar+0x6c4>
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	42c80000 	.word	0x42c80000
 8001d94:	20000704 	.word	0x20000704
 8001d98:	2000066c 	.word	0x2000066c
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40010800 	.word	0x40010800
 8001da4:	42b40000 	.word	0x42b40000
 8001da8:	42a00000 	.word	0x42a00000
 8001dac:	428c0000 	.word	0x428c0000
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	else if(distance >=60&& distance <70){
 8001db0:	4ba7      	ldr	r3, [pc, #668]	@ (8002050 <Change_LightBar+0x554>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	49a7      	ldr	r1, [pc, #668]	@ (8002054 <Change_LightBar+0x558>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f996 	bl	80010e8 <__aeabi_fcmpge>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04a      	beq.n	8001e58 <Change_LightBar+0x35c>
 8001dc2:	4ba3      	ldr	r3, [pc, #652]	@ (8002050 <Change_LightBar+0x554>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	49a4      	ldr	r1, [pc, #656]	@ (8002058 <Change_LightBar+0x55c>)
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f979 	bl	80010c0 <__aeabi_fcmplt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d041      	beq.n	8001e58 <Change_LightBar+0x35c>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001dd4:	48a1      	ldr	r0, [pc, #644]	@ (800205c <Change_LightBar+0x560>)
 8001dd6:	f003 fd09 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001dda:	4ba1      	ldr	r3, [pc, #644]	@ (8002060 <Change_LightBar+0x564>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001de0:	2201      	movs	r2, #1
 8001de2:	2108      	movs	r1, #8
 8001de4:	489f      	ldr	r0, [pc, #636]	@ (8002064 <Change_LightBar+0x568>)
 8001de6:	f001 ff3c 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001dea:	2201      	movs	r2, #1
 8001dec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001df0:	489d      	ldr	r0, [pc, #628]	@ (8002068 <Change_LightBar+0x56c>)
 8001df2:	f001 ff36 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001df6:	2201      	movs	r2, #1
 8001df8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dfc:	489a      	ldr	r0, [pc, #616]	@ (8002068 <Change_LightBar+0x56c>)
 8001dfe:	f001 ff30 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001e02:	2201      	movs	r2, #1
 8001e04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e08:	4897      	ldr	r0, [pc, #604]	@ (8002068 <Change_LightBar+0x56c>)
 8001e0a:	f001 ff2a 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e14:	4894      	ldr	r0, [pc, #592]	@ (8002068 <Change_LightBar+0x56c>)
 8001e16:	f001 ff24 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e20:	4891      	ldr	r0, [pc, #580]	@ (8002068 <Change_LightBar+0x56c>)
 8001e22:	f001 ff1e 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e2c:	488d      	ldr	r0, [pc, #564]	@ (8002064 <Change_LightBar+0x568>)
 8001e2e:	f001 ff18 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001e32:	2200      	movs	r2, #0
 8001e34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e38:	488a      	ldr	r0, [pc, #552]	@ (8002064 <Change_LightBar+0x568>)
 8001e3a:	f001 ff12 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e44:	4887      	ldr	r0, [pc, #540]	@ (8002064 <Change_LightBar+0x568>)
 8001e46:	f001 ff0c 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e50:	4884      	ldr	r0, [pc, #528]	@ (8002064 <Change_LightBar+0x568>)
 8001e52:	f001 ff06 	bl	8003c62 <HAL_GPIO_WritePin>
 8001e56:	e1b3      	b.n	80021c0 <Change_LightBar+0x6c4>
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	else if(distance >=55&& distance <60){
 8001e58:	4b7d      	ldr	r3, [pc, #500]	@ (8002050 <Change_LightBar+0x554>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4983      	ldr	r1, [pc, #524]	@ (800206c <Change_LightBar+0x570>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f942 	bl	80010e8 <__aeabi_fcmpge>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04a      	beq.n	8001f00 <Change_LightBar+0x404>
 8001e6a:	4b79      	ldr	r3, [pc, #484]	@ (8002050 <Change_LightBar+0x554>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4979      	ldr	r1, [pc, #484]	@ (8002054 <Change_LightBar+0x558>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff f925 	bl	80010c0 <__aeabi_fcmplt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d041      	beq.n	8001f00 <Change_LightBar+0x404>
		too_close=0;
 8001e7c:	4b78      	ldr	r3, [pc, #480]	@ (8002060 <Change_LightBar+0x564>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2108      	movs	r1, #8
 8001e86:	4877      	ldr	r0, [pc, #476]	@ (8002064 <Change_LightBar+0x568>)
 8001e88:	f001 feeb 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e92:	4875      	ldr	r0, [pc, #468]	@ (8002068 <Change_LightBar+0x56c>)
 8001e94:	f001 fee5 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e9e:	4872      	ldr	r0, [pc, #456]	@ (8002068 <Change_LightBar+0x56c>)
 8001ea0:	f001 fedf 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001eaa:	486f      	ldr	r0, [pc, #444]	@ (8002068 <Change_LightBar+0x56c>)
 8001eac:	f001 fed9 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001eb6:	486c      	ldr	r0, [pc, #432]	@ (8002068 <Change_LightBar+0x56c>)
 8001eb8:	f001 fed3 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ec2:	4869      	ldr	r0, [pc, #420]	@ (8002068 <Change_LightBar+0x56c>)
 8001ec4:	f001 fecd 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ece:	4865      	ldr	r0, [pc, #404]	@ (8002064 <Change_LightBar+0x568>)
 8001ed0:	f001 fec7 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001eda:	4862      	ldr	r0, [pc, #392]	@ (8002064 <Change_LightBar+0x568>)
 8001edc:	f001 fec1 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ee6:	485f      	ldr	r0, [pc, #380]	@ (8002064 <Change_LightBar+0x568>)
 8001ee8:	f001 febb 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ef2:	485c      	ldr	r0, [pc, #368]	@ (8002064 <Change_LightBar+0x568>)
 8001ef4:	f001 feb5 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001ef8:	4858      	ldr	r0, [pc, #352]	@ (800205c <Change_LightBar+0x560>)
 8001efa:	f003 fc77 	bl	80057ec <HAL_TIM_Base_Stop_IT>
 8001efe:	e15f      	b.n	80021c0 <Change_LightBar+0x6c4>
	}
	else if(distance >=50&& distance <55){
 8001f00:	4b53      	ldr	r3, [pc, #332]	@ (8002050 <Change_LightBar+0x554>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	495a      	ldr	r1, [pc, #360]	@ (8002070 <Change_LightBar+0x574>)
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f8ee 	bl	80010e8 <__aeabi_fcmpge>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04a      	beq.n	8001fa8 <Change_LightBar+0x4ac>
 8001f12:	4b4f      	ldr	r3, [pc, #316]	@ (8002050 <Change_LightBar+0x554>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4955      	ldr	r1, [pc, #340]	@ (800206c <Change_LightBar+0x570>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff f8d1 	bl	80010c0 <__aeabi_fcmplt>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d041      	beq.n	8001fa8 <Change_LightBar+0x4ac>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001f24:	484d      	ldr	r0, [pc, #308]	@ (800205c <Change_LightBar+0x560>)
 8001f26:	f003 fc61 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8002060 <Change_LightBar+0x564>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001f30:	2201      	movs	r2, #1
 8001f32:	2108      	movs	r1, #8
 8001f34:	484b      	ldr	r0, [pc, #300]	@ (8002064 <Change_LightBar+0x568>)
 8001f36:	f001 fe94 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f40:	4849      	ldr	r0, [pc, #292]	@ (8002068 <Change_LightBar+0x56c>)
 8001f42:	f001 fe8e 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f4c:	4846      	ldr	r0, [pc, #280]	@ (8002068 <Change_LightBar+0x56c>)
 8001f4e:	f001 fe88 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f58:	4843      	ldr	r0, [pc, #268]	@ (8002068 <Change_LightBar+0x56c>)
 8001f5a:	f001 fe82 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f64:	4840      	ldr	r0, [pc, #256]	@ (8002068 <Change_LightBar+0x56c>)
 8001f66:	f001 fe7c 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f70:	483d      	ldr	r0, [pc, #244]	@ (8002068 <Change_LightBar+0x56c>)
 8001f72:	f001 fe76 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f7c:	4839      	ldr	r0, [pc, #228]	@ (8002064 <Change_LightBar+0x568>)
 8001f7e:	f001 fe70 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f88:	4836      	ldr	r0, [pc, #216]	@ (8002064 <Change_LightBar+0x568>)
 8001f8a:	f001 fe6a 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f94:	4833      	ldr	r0, [pc, #204]	@ (8002064 <Change_LightBar+0x568>)
 8001f96:	f001 fe64 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fa0:	4830      	ldr	r0, [pc, #192]	@ (8002064 <Change_LightBar+0x568>)
 8001fa2:	f001 fe5e 	bl	8003c62 <HAL_GPIO_WritePin>
 8001fa6:	e10b      	b.n	80021c0 <Change_LightBar+0x6c4>
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	else if(distance >=45&& distance <50){
 8001fa8:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <Change_LightBar+0x554>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4931      	ldr	r1, [pc, #196]	@ (8002074 <Change_LightBar+0x578>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f89a 	bl	80010e8 <__aeabi_fcmpge>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d05e      	beq.n	8002078 <Change_LightBar+0x57c>
 8001fba:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <Change_LightBar+0x554>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	492c      	ldr	r1, [pc, #176]	@ (8002070 <Change_LightBar+0x574>)
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff f87d 	bl	80010c0 <__aeabi_fcmplt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d055      	beq.n	8002078 <Change_LightBar+0x57c>
		HAL_TIM_Base_Stop_IT(&htim3);
 8001fcc:	4823      	ldr	r0, [pc, #140]	@ (800205c <Change_LightBar+0x560>)
 8001fce:	f003 fc0d 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	@ (8002060 <Change_LightBar+0x564>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2108      	movs	r1, #8
 8001fdc:	4821      	ldr	r0, [pc, #132]	@ (8002064 <Change_LightBar+0x568>)
 8001fde:	f001 fe40 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fe8:	481f      	ldr	r0, [pc, #124]	@ (8002068 <Change_LightBar+0x56c>)
 8001fea:	f001 fe3a 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ff4:	481c      	ldr	r0, [pc, #112]	@ (8002068 <Change_LightBar+0x56c>)
 8001ff6:	f001 fe34 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002000:	4819      	ldr	r0, [pc, #100]	@ (8002068 <Change_LightBar+0x56c>)
 8002002:	f001 fe2e 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 8002006:	2201      	movs	r2, #1
 8002008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800200c:	4816      	ldr	r0, [pc, #88]	@ (8002068 <Change_LightBar+0x56c>)
 800200e:	f001 fe28 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002018:	4813      	ldr	r0, [pc, #76]	@ (8002068 <Change_LightBar+0x56c>)
 800201a:	f001 fe22 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002024:	480f      	ldr	r0, [pc, #60]	@ (8002064 <Change_LightBar+0x568>)
 8002026:	f001 fe1c 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002030:	480c      	ldr	r0, [pc, #48]	@ (8002064 <Change_LightBar+0x568>)
 8002032:	f001 fe16 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_RESET);
 8002036:	2200      	movs	r2, #0
 8002038:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800203c:	4809      	ldr	r0, [pc, #36]	@ (8002064 <Change_LightBar+0x568>)
 800203e:	f001 fe10 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002048:	4806      	ldr	r0, [pc, #24]	@ (8002064 <Change_LightBar+0x568>)
 800204a:	f001 fe0a 	bl	8003c62 <HAL_GPIO_WritePin>
 800204e:	e0b7      	b.n	80021c0 <Change_LightBar+0x6c4>
 8002050:	20000004 	.word	0x20000004
 8002054:	42700000 	.word	0x42700000
 8002058:	428c0000 	.word	0x428c0000
 800205c:	20000704 	.word	0x20000704
 8002060:	2000066c 	.word	0x2000066c
 8002064:	40010c00 	.word	0x40010c00
 8002068:	40010800 	.word	0x40010800
 800206c:	425c0000 	.word	0x425c0000
 8002070:	42480000 	.word	0x42480000
 8002074:	42340000 	.word	0x42340000
		//HAL_TIM_Base_Stop_IT(&htim3);存在漏洞
	}
	else if(distance >=40&& distance <45){
 8002078:	4b52      	ldr	r3, [pc, #328]	@ (80021c4 <Change_LightBar+0x6c8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4952      	ldr	r1, [pc, #328]	@ (80021c8 <Change_LightBar+0x6cc>)
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f832 	bl	80010e8 <__aeabi_fcmpge>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d04a      	beq.n	8002120 <Change_LightBar+0x624>
 800208a:	4b4e      	ldr	r3, [pc, #312]	@ (80021c4 <Change_LightBar+0x6c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	494f      	ldr	r1, [pc, #316]	@ (80021cc <Change_LightBar+0x6d0>)
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff f815 	bl	80010c0 <__aeabi_fcmplt>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d041      	beq.n	8002120 <Change_LightBar+0x624>
		HAL_TIM_Base_Stop_IT(&htim3);
 800209c:	484c      	ldr	r0, [pc, #304]	@ (80021d0 <Change_LightBar+0x6d4>)
 800209e:	f003 fba5 	bl	80057ec <HAL_TIM_Base_Stop_IT>
		too_close=0;
 80020a2:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <Change_LightBar+0x6d8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	2108      	movs	r1, #8
 80020ac:	484a      	ldr	r0, [pc, #296]	@ (80021d8 <Change_LightBar+0x6dc>)
 80020ae:	f001 fdd8 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80020b2:	2201      	movs	r2, #1
 80020b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020b8:	4848      	ldr	r0, [pc, #288]	@ (80021dc <Change_LightBar+0x6e0>)
 80020ba:	f001 fdd2 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80020c4:	4845      	ldr	r0, [pc, #276]	@ (80021dc <Change_LightBar+0x6e0>)
 80020c6:	f001 fdcc 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 80020ca:	2201      	movs	r2, #1
 80020cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020d0:	4842      	ldr	r0, [pc, #264]	@ (80021dc <Change_LightBar+0x6e0>)
 80020d2:	f001 fdc6 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020dc:	483f      	ldr	r0, [pc, #252]	@ (80021dc <Change_LightBar+0x6e0>)
 80020de:	f001 fdc0 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 80020e2:	2201      	movs	r2, #1
 80020e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e8:	483c      	ldr	r0, [pc, #240]	@ (80021dc <Change_LightBar+0x6e0>)
 80020ea:	f001 fdba 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020f4:	4838      	ldr	r0, [pc, #224]	@ (80021d8 <Change_LightBar+0x6dc>)
 80020f6:	f001 fdb4 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002100:	4835      	ldr	r0, [pc, #212]	@ (80021d8 <Change_LightBar+0x6dc>)
 8002102:	f001 fdae 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800210c:	4832      	ldr	r0, [pc, #200]	@ (80021d8 <Change_LightBar+0x6dc>)
 800210e:	f001 fda8 	bl	8003c62 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002118:	482f      	ldr	r0, [pc, #188]	@ (80021d8 <Change_LightBar+0x6dc>)
 800211a:	f001 fda2 	bl	8003c62 <HAL_GPIO_WritePin>
 800211e:	e04f      	b.n	80021c0 <Change_LightBar+0x6c4>
		//HAL_TIM_Base_Stop_IT(&htim3);
	}
	else if(distance <40){
 8002120:	4b28      	ldr	r3, [pc, #160]	@ (80021c4 <Change_LightBar+0x6c8>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4928      	ldr	r1, [pc, #160]	@ (80021c8 <Change_LightBar+0x6cc>)
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe ffca 	bl	80010c0 <__aeabi_fcmplt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d100      	bne.n	8002134 <Change_LightBar+0x638>
			too_close=1;
		}
		//启动TIM3用于4Hz闪烁灯条
		HAL_TIM_Base_Start_IT(&htim3);
	}
}
 8002132:	e045      	b.n	80021c0 <Change_LightBar+0x6c4>
		if(!too_close){
 8002134:	4b27      	ldr	r3, [pc, #156]	@ (80021d4 <Change_LightBar+0x6d8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d13d      	bne.n	80021b8 <Change_LightBar+0x6bc>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	2108      	movs	r1, #8
 8002140:	4825      	ldr	r0, [pc, #148]	@ (80021d8 <Change_LightBar+0x6dc>)
 8002142:	f001 fd8e 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002146:	2201      	movs	r2, #1
 8002148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800214c:	4823      	ldr	r0, [pc, #140]	@ (80021dc <Change_LightBar+0x6e0>)
 800214e:	f001 fd88 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8002152:	2201      	movs	r2, #1
 8002154:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002158:	4820      	ldr	r0, [pc, #128]	@ (80021dc <Change_LightBar+0x6e0>)
 800215a:	f001 fd82 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002164:	481d      	ldr	r0, [pc, #116]	@ (80021dc <Change_LightBar+0x6e0>)
 8002166:	f001 fd7c 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800216a:	2201      	movs	r2, #1
 800216c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002170:	481a      	ldr	r0, [pc, #104]	@ (80021dc <Change_LightBar+0x6e0>)
 8002172:	f001 fd76 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800217c:	4817      	ldr	r0, [pc, #92]	@ (80021dc <Change_LightBar+0x6e0>)
 800217e:	f001 fd70 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002188:	4813      	ldr	r0, [pc, #76]	@ (80021d8 <Change_LightBar+0x6dc>)
 800218a:	f001 fd6a 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED8_GPIO_Port, LED8_Pin, GPIO_PIN_SET);
 800218e:	2201      	movs	r2, #1
 8002190:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002194:	4810      	ldr	r0, [pc, #64]	@ (80021d8 <Change_LightBar+0x6dc>)
 8002196:	f001 fd64 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 800219a:	2201      	movs	r2, #1
 800219c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021a0:	480d      	ldr	r0, [pc, #52]	@ (80021d8 <Change_LightBar+0x6dc>)
 80021a2:	f001 fd5e 	bl	8003c62 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_SET);
 80021a6:	2201      	movs	r2, #1
 80021a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021ac:	480a      	ldr	r0, [pc, #40]	@ (80021d8 <Change_LightBar+0x6dc>)
 80021ae:	f001 fd58 	bl	8003c62 <HAL_GPIO_WritePin>
			too_close=1;
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <Change_LightBar+0x6d8>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 80021b8:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <Change_LightBar+0x6d4>)
 80021ba:	f003 fac5 	bl	8005748 <HAL_TIM_Base_Start_IT>
}
 80021be:	e7ff      	b.n	80021c0 <Change_LightBar+0x6c4>
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	20000004 	.word	0x20000004
 80021c8:	42200000 	.word	0x42200000
 80021cc:	42340000 	.word	0x42340000
 80021d0:	20000704 	.word	0x20000704
 80021d4:	2000066c 	.word	0x2000066c
 80021d8:	40010c00 	.word	0x40010c00
 80021dc:	40010800 	.word	0x40010800

080021e0 <Toggle_LightBar>:

//亮灭灯条
void Toggle_LightBar(){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80021e4:	2108      	movs	r1, #8
 80021e6:	4819      	ldr	r0, [pc, #100]	@ (800224c <Toggle_LightBar+0x6c>)
 80021e8:	f001 fd53 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80021ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021f0:	4817      	ldr	r0, [pc, #92]	@ (8002250 <Toggle_LightBar+0x70>)
 80021f2:	f001 fd4e 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80021f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021fa:	4815      	ldr	r0, [pc, #84]	@ (8002250 <Toggle_LightBar+0x70>)
 80021fc:	f001 fd49 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8002200:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002204:	4812      	ldr	r0, [pc, #72]	@ (8002250 <Toggle_LightBar+0x70>)
 8002206:	f001 fd44 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED5_GPIO_Port, LED5_Pin);
 800220a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800220e:	4810      	ldr	r0, [pc, #64]	@ (8002250 <Toggle_LightBar+0x70>)
 8002210:	f001 fd3f 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED6_GPIO_Port, LED6_Pin);
 8002214:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002218:	480d      	ldr	r0, [pc, #52]	@ (8002250 <Toggle_LightBar+0x70>)
 800221a:	f001 fd3a 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED7_GPIO_Port, LED7_Pin);
 800221e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002222:	480a      	ldr	r0, [pc, #40]	@ (800224c <Toggle_LightBar+0x6c>)
 8002224:	f001 fd35 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 8002228:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800222c:	4807      	ldr	r0, [pc, #28]	@ (800224c <Toggle_LightBar+0x6c>)
 800222e:	f001 fd30 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED9_GPIO_Port, LED9_Pin);
 8002232:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002236:	4805      	ldr	r0, [pc, #20]	@ (800224c <Toggle_LightBar+0x6c>)
 8002238:	f001 fd2b 	bl	8003c92 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LED10_GPIO_Port, LED10_Pin);
 800223c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <Toggle_LightBar+0x6c>)
 8002242:	f001 fd26 	bl	8003c92 <HAL_GPIO_TogglePin>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40010c00 	.word	0x40010c00
 8002250:	40010800 	.word	0x40010800

08002254 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
//触发定时器更新中断时定时器并不会停止计数，需要手动停止
void  HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	//TIM1用于蜂鸣器发声
	if(htim == &htim1){
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a32      	ldr	r2, [pc, #200]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d14f      	bne.n	8002304 <HAL_TIM_PeriodElapsedCallback+0xb0>
		if(__HAL_TIM_GET_AUTORELOAD(&htim1)== BEEP_FREQUENCY_AUTORELOAD){
 8002264:	4b30      	ldr	r3, [pc, #192]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800226e:	4293      	cmp	r3, r2
 8002270:	d12a      	bne.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x74>
			//先关闭定时器，以防设置重装初值时跑飞
			HAL_TIM_Base_Stop_IT(&htim1);
 8002272:	482d      	ldr	r0, [pc, #180]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002274:	f003 faba 	bl	80057ec <HAL_TIM_Base_Stop_IT>
			if(beep_rounds<BEEP_ROUNDS*2){
 8002278:	4b2c      	ldr	r3, [pc, #176]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b13      	cmp	r3, #19
 800227e:	dc0a      	bgt.n	8002296 <HAL_TIM_PeriodElapsedCallback+0x42>
				HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);
 8002280:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002284:	482a      	ldr	r0, [pc, #168]	@ (8002330 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002286:	f001 fd04 	bl	8003c92 <HAL_GPIO_TogglePin>
				beep_rounds++;
 800228a:	4b28      	ldr	r3, [pc, #160]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a26      	ldr	r2, [pc, #152]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e010      	b.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x64>
				//继续启动计数�????????????????
			}
			else{
				//如果已完成十次脉冲，就进入延时阶�????????????????
				beep_rounds=0;
 8002296:	4b25      	ldr	r3, [pc, #148]	@ (800232c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
				//设置重复计数器RCR阈�??
				TIM1->RCR = beep_interval_rounds_tre-1;
 800229c:	4b25      	ldr	r3, [pc, #148]	@ (8002334 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1e5a      	subs	r2, r3, #1
 80022a2:	4b25      	ldr	r3, [pc, #148]	@ (8002338 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80022a4:	631a      	str	r2, [r3, #48]	@ 0x30
				//设置计时器重装初值为1999，这样一次溢出就消�??2ms
				__HAL_TIM_SET_AUTORELOAD(&htim1,1999);
 80022a6:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80022ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022b2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80022b6:	60da      	str	r2, [r3, #12]
				//启动计时�???????????????
			}
			//设置计数值为0后再重新打开定时�?????
			__HAL_TIM_SET_COUNTER(&htim1,0);
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim1);
 80022c0:	4819      	ldr	r0, [pc, #100]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022c2:	f003 fa41 	bl	8005748 <HAL_TIM_Base_Start_IT>
	}
	//TIM4用于实现距离测量计时
	else if(htim ==&htim4){
		timeout =1;
	}
}
 80022c6:	e02b      	b.n	8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>
		else if(__HAL_TIM_GET_AUTORELOAD(&htim1)== 1999){
 80022c8:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ce:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d124      	bne.n	8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>
			HAL_TIM_Base_Stop_IT(&htim1);
 80022d6:	4814      	ldr	r0, [pc, #80]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022d8:	f003 fa88 	bl	80057ec <HAL_TIM_Base_Stop_IT>
			TIM1->RCR =0;
 80022dc:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	@ 0x30
			__HAL_TIM_SET_AUTORELOAD(&htim1,BEEP_FREQUENCY_AUTORELOAD);
 80022e2:	4b11      	ldr	r3, [pc, #68]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022f2:	60da      	str	r2, [r3, #12]
			__HAL_TIM_SET_COUNTER(&htim1,0);
 80022f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_TIM_Base_Start_IT(&htim1);
 80022fc:	480a      	ldr	r0, [pc, #40]	@ (8002328 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80022fe:	f003 fa23 	bl	8005748 <HAL_TIM_Base_Start_IT>
}
 8002302:	e00d      	b.n	8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>
	else if(htim == &htim3){
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d102      	bne.n	8002312 <HAL_TIM_PeriodElapsedCallback+0xbe>
		Toggle_LightBar();
 800230c:	f7ff ff68 	bl	80021e0 <Toggle_LightBar>
}
 8002310:	e006      	b.n	8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>
	else if(htim ==&htim4){
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d102      	bne.n	8002320 <HAL_TIM_PeriodElapsedCallback+0xcc>
		timeout =1;
 800231a:	4b0a      	ldr	r3, [pc, #40]	@ (8002344 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000674 	.word	0x20000674
 800232c:	200005a4 	.word	0x200005a4
 8002330:	40010800 	.word	0x40010800
 8002334:	200005a8 	.word	0x200005a8
 8002338:	40012c00 	.word	0x40012c00
 800233c:	20000704 	.word	0x20000704
 8002340:	2000074c 	.word	0x2000074c
 8002344:	200005ac 	.word	0x200005ac

08002348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800234e:	f001 f959 	bl	8003604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002352:	f000 f8d1 	bl	80024f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002356:	f7ff fa9f 	bl	8001898 <MX_GPIO_Init>
  MX_I2C1_Init();
 800235a:	f7ff fb37 	bl	80019cc <MX_I2C1_Init>
  MX_TIM1_Init();
 800235e:	f000 ff39 	bl	80031d4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8002362:	f001 f821 	bl	80033a8 <MX_TIM4_Init>
  MX_TIM2_Init();
 8002366:	f000 ff85 	bl	8003274 <MX_TIM2_Init>
  MX_TIM3_Init();
 800236a:	f000 ffcf 	bl	800330c <MX_TIM3_Init>
  MX_IWDG_Init();
 800236e:	f7ff fbab 	bl	8001ac8 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  //初始化OLED
  OLED_Init();
 8002372:	f000 f959 	bl	8002628 <OLED_Init>
  //清空OLED屏幕
  OLED_ClearScreen();
 8002376:	f000 f9b1 	bl	80026dc <OLED_ClearScreen>
  //显示静态的文本
  OLED_SoundSpeed_Text();
 800237a:	f000 facb 	bl	8002914 <OLED_SoundSpeed_Text>
  OLED_ShowTemperature_Text();
 800237e:	f000 fa61 	bl	8002844 <OLED_ShowTemperature_Text>
  OLED_ShowDistance_Text();
 8002382:	f000 f9f7 	bl	8002774 <OLED_ShowDistance_Text>
  OLED_SoundSpeed_Unit();
 8002386:	f000 fb2d 	bl	80029e4 <OLED_SoundSpeed_Unit>
  //启动IWDG独立看门狗40Khz进行32分频，初值4000，超时时间3.2s
  HAL_IWDG_Init(&hiwdg);
 800238a:	484e      	ldr	r0, [pc, #312]	@ (80024c4 <main+0x17c>)
 800238c:	f002 fccd 	bl	8004d2a <HAL_IWDG_Init>
  //打开TIM4计数器
  HAL_TIM_Base_Start_IT(&htim4);
 8002390:	484d      	ldr	r0, [pc, #308]	@ (80024c8 <main+0x180>)
 8002392:	f003 f9d9 	bl	8005748 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  //喂狗
	  HAL_IWDG_Refresh(&hiwdg);
 8002396:	484b      	ldr	r0, [pc, #300]	@ (80024c4 <main+0x17c>)
 8002398:	f002 fd0b 	bl	8004db2 <HAL_IWDG_Refresh>
	  //如果DS18B20不在线，就阻塞整个程序
	  if(!ds18b20_online){
 800239c:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <main+0x184>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d104      	bne.n	80023ae <main+0x66>
		  while(1){
			  HAL_Delay(1000);
 80023a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023a8:	f001 f98e 	bl	80036c8 <HAL_Delay>
 80023ac:	e7fa      	b.n	80023a4 <main+0x5c>
		  }
	  }
	  //清空TIM4计数值
	  __HAL_TIM_SET_COUNTER(&htim4,0);
 80023ae:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <main+0x180>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
	  //清零launch_time
	  launch_time=0;
 80023b6:	4b46      	ldr	r3, [pc, #280]	@ (80024d0 <main+0x188>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
	  //测距成功标志位清0
	  success =0;
 80023bc:	4b45      	ldr	r3, [pc, #276]	@ (80024d4 <main+0x18c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
	  //清空ccr1标志位
	  __HAL_TIM_CLEAR_FLAG(&htim4,TIM_FLAG_CC1);
 80023c2:	4b41      	ldr	r3, [pc, #260]	@ (80024c8 <main+0x180>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f06f 0202 	mvn.w	r2, #2
 80023ca:	611a      	str	r2, [r3, #16]
	  //复位超时标志位
	  timeout  = 0;
 80023cc:	4b42      	ldr	r3, [pc, #264]	@ (80024d8 <main+0x190>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
	  //打开TIM4输入捕获功能，通道1
	  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_1);
 80023d2:	2100      	movs	r1, #0
 80023d4:	483c      	ldr	r0, [pc, #240]	@ (80024c8 <main+0x180>)
 80023d6:	f003 fa8f 	bl	80058f8 <HAL_TIM_IC_Start>
	  //开始发射脉冲并记录发射时间
	  Burst_Signal();
 80023da:	f7fe ffd1 	bl	8001380 <Burst_Signal>
	  //赋值一个用于判断超时的时间节点，即最大超时时间为50ms
	  uint32_t expireTime = HAL_GetTick()+LOOP_INTERVAL;
 80023de:	f001 f969 	bl	80036b4 <HAL_GetTick>
 80023e2:	4603      	mov	r3, r0
 80023e4:	33c8      	adds	r3, #200	@ 0xc8
 80023e6:	603b      	str	r3, [r7, #0]
	  //软件滤波的缓存值
	  uint8_t filter_counts = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	71fb      	strb	r3, [r7, #7]
	  //如果未超时，就一直循环检测输入捕获寄存器
	  while(HAL_GetTick()<expireTime){
 80023ec:	e01d      	b.n	800242a <main+0xe2>
		  //如果标志位被置位并且计数器未溢出，说明已经捕获到回声，可以跳出循环进行下一步处处理
		  if(__HAL_TIM_GET_FLAG(&htim4,TIM_FLAG_CC1)&& timeout==0){
 80023ee:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <main+0x180>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d116      	bne.n	800242a <main+0xe2>
 80023fc:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <main+0x190>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d112      	bne.n	800242a <main+0xe2>
			  filter_counts++;
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	3301      	adds	r3, #1
 8002408:	71fb      	strb	r3, [r7, #7]
			  //如果捕获的次数大于软件滤波阈值，则代表捕获到有效信号
			  if(filter_counts>=SOFT_FILTER){
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d007      	beq.n	8002420 <main+0xd8>
				  //先关闭TIM4定时器
				  HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002410:	2100      	movs	r1, #0
 8002412:	482d      	ldr	r0, [pc, #180]	@ (80024c8 <main+0x180>)
 8002414:	f003 fb30 	bl	8005a78 <HAL_TIM_IC_Stop>
				  //标记测距成功
				  success=1;
 8002418:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <main+0x18c>)
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
				  break;
 800241e:	e00a      	b.n	8002436 <main+0xee>
			  }
			  //清空CCR1标志位
			  __HAL_TIM_CLEAR_FLAG(&htim4,TIM_FLAG_CC1);
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <main+0x180>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f06f 0202 	mvn.w	r2, #2
 8002428:	611a      	str	r2, [r3, #16]
	  while(HAL_GetTick()<expireTime){
 800242a:	f001 f943 	bl	80036b4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4293      	cmp	r3, r2
 8002434:	d8db      	bhi.n	80023ee <main+0xa6>
		  }
	  }
	  //先关闭TIM4定时器
	  HAL_TIM_IC_Stop(&htim4, TIM_CHANNEL_1);
 8002436:	2100      	movs	r1, #0
 8002438:	4823      	ldr	r0, [pc, #140]	@ (80024c8 <main+0x180>)
 800243a:	f003 fb1d 	bl	8005a78 <HAL_TIM_IC_Stop>
	  //如果测距成功，就开始进行距离计算
	  if(success){
 800243e:	4b25      	ldr	r3, [pc, #148]	@ (80024d4 <main+0x18c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02d      	beq.n	80024a2 <main+0x15a>
		  Distance_Caculate();
 8002446:	f7ff f843 	bl	80014d0 <Distance_Caculate>
		  if(distance<10){
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <main+0x194>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4924      	ldr	r1, [pc, #144]	@ (80024e0 <main+0x198>)
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fe35 	bl	80010c0 <__aeabi_fcmplt>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <main+0x12c>
			  sprintf(distance_msg,"%.4f\n",distance);
 800245c:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <main+0x194>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fd ffe1 	bl	8000428 <__aeabi_f2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	491e      	ldr	r1, [pc, #120]	@ (80024e4 <main+0x19c>)
 800246c:	481e      	ldr	r0, [pc, #120]	@ (80024e8 <main+0x1a0>)
 800246e:	f004 fff3 	bl	8007458 <siprintf>
 8002472:	e00a      	b.n	800248a <main+0x142>
		  }
		  else{
			  sprintf(distance_msg,"%.3f\n",distance);
 8002474:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <main+0x194>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd ffd5 	bl	8000428 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	491a      	ldr	r1, [pc, #104]	@ (80024ec <main+0x1a4>)
 8002484:	4818      	ldr	r0, [pc, #96]	@ (80024e8 <main+0x1a0>)
 8002486:	f004 ffe7 	bl	8007458 <siprintf>
		  }
		  OLED_ShowDistance((uint8_t*)distance_msg);
 800248a:	4817      	ldr	r0, [pc, #92]	@ (80024e8 <main+0x1a0>)
 800248c:	f000 fc52 	bl	8002d34 <OLED_ShowDistance>
		  //确保不会使得每次猝发信号的间隔不一致
		  HAL_Delay(expireTime-HAL_GetTick());
 8002490:	f001 f910 	bl	80036b4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f001 f914 	bl	80036c8 <HAL_Delay>
 80024a0:	e004      	b.n	80024ac <main+0x164>
	  }
	  else{
		  //如果测距不成功，给distance赋默认值，防止灯条误判
		  distance =1100;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <main+0x194>)
 80024a4:	4a12      	ldr	r2, [pc, #72]	@ (80024f0 <main+0x1a8>)
 80024a6:	601a      	str	r2, [r3, #0]
		  //在显示屏打印距离过远的文本
		  OLED_ShowDistance_SoFar();
 80024a8:	f000 fcde 	bl	8002e68 <OLED_ShowDistance_SoFar>
	  }
	  //变换灯条
	  Change_LightBar();
 80024ac:	f7ff fb26 	bl	8001afc <Change_LightBar>
	  //变换蜂鸣频率等参数->具体要靠中断
	  Beep();
 80024b0:	f7fe fe64 	bl	800117c <Beep>
	  //测温状态机
	  DS18B20_ReadTemperature();
 80024b4:	f7ff f910 	bl	80016d8 <DS18B20_ReadTemperature>
	  //运行状态灯
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80024b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024bc:	480d      	ldr	r0, [pc, #52]	@ (80024f4 <main+0x1ac>)
 80024be:	f001 fbe8 	bl	8003c92 <HAL_GPIO_TogglePin>
  {
 80024c2:	e768      	b.n	8002396 <main+0x4e>
 80024c4:	20000660 	.word	0x20000660
 80024c8:	2000074c 	.word	0x2000074c
 80024cc:	20000008 	.word	0x20000008
 80024d0:	200005cc 	.word	0x200005cc
 80024d4:	200005b0 	.word	0x200005b0
 80024d8:	200005ac 	.word	0x200005ac
 80024dc:	20000004 	.word	0x20000004
 80024e0:	41200000 	.word	0x41200000
 80024e4:	0800bb38 	.word	0x0800bb38
 80024e8:	200005b8 	.word	0x200005b8
 80024ec:	0800bb40 	.word	0x0800bb40
 80024f0:	44898000 	.word	0x44898000
 80024f4:	40011000 	.word	0x40011000

080024f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b090      	sub	sp, #64	@ 0x40
 80024fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024fe:	f107 0318 	add.w	r3, r7, #24
 8002502:	2228      	movs	r2, #40	@ 0x28
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f005 f809 	bl	800751e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800251a:	2309      	movs	r3, #9
 800251c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800251e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002522:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002524:	2300      	movs	r3, #0
 8002526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002528:	2301      	movs	r3, #1
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800252c:	2301      	movs	r3, #1
 800252e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002530:	2302      	movs	r3, #2
 8002532:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800253a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800253e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002540:	f107 0318 	add.w	r3, r7, #24
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fc43 	bl	8004dd0 <HAL_RCC_OscConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002550:	f000 f819 	bl	8002586 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002554:	230f      	movs	r3, #15
 8002556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002558:	2302      	movs	r3, #2
 800255a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	2102      	movs	r1, #2
 800256e:	4618      	mov	r0, r3
 8002570:	f002 feb0 	bl	80052d4 <HAL_RCC_ClockConfig>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800257a:	f000 f804 	bl	8002586 <Error_Handler>
  }
}
 800257e:	bf00      	nop
 8002580:	3740      	adds	r7, #64	@ 0x40
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800258a:	b672      	cpsid	i
}
 800258c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800258e:	bf00      	nop
 8002590:	e7fd      	b.n	800258e <Error_Handler+0x8>
	...

08002594 <OLED_SendCmd>:
#include "font.h"

#define OLED_ADDRESS 0x3C<<1 //从机地址00111100  01111000


void OLED_SendCmd(uint8_t cmd){
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af02      	add	r7, sp, #8
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0]=0x00;
 800259e:	2300      	movs	r3, #0
 80025a0:	733b      	strb	r3, [r7, #12]
	sendBuffer[1]=cmd;
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, 2, HAL_MAX_DELAY);
 80025a6:	f107 020c 	add.w	r2, r7, #12
 80025aa:	f04f 33ff 	mov.w	r3, #4294967295
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2302      	movs	r3, #2
 80025b2:	2178      	movs	r1, #120	@ 0x78
 80025b4:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <OLED_SendCmd+0x30>)
 80025b6:	f001 fcc9 	bl	8003f4c <HAL_I2C_Master_Transmit>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000060c 	.word	0x2000060c

080025c8 <OLED_CheckOnline>:

void OLED_CheckOnline(){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af02      	add	r7, sp, #8
	uint8_t command = 0x00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]
	uint8_t response;
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, &command, 1, HAL_MAX_DELAY);
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2301      	movs	r3, #1
 80025dc:	2178      	movs	r1, #120	@ 0x78
 80025de:	4810      	ldr	r0, [pc, #64]	@ (8002620 <OLED_CheckOnline+0x58>)
 80025e0:	f001 fcb4 	bl	8003f4c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80025e4:	2001      	movs	r0, #1
 80025e6:	f001 f86f 	bl	80036c8 <HAL_Delay>
	if (HAL_I2C_Master_Receive(&hi2c1, OLED_ADDRESS, &response, 1, HAL_MAX_DELAY) != HAL_OK) {
 80025ea:	1dba      	adds	r2, r7, #6
 80025ec:	f04f 33ff 	mov.w	r3, #4294967295
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	2301      	movs	r3, #1
 80025f4:	2178      	movs	r1, #120	@ 0x78
 80025f6:	480a      	ldr	r0, [pc, #40]	@ (8002620 <OLED_CheckOnline+0x58>)
 80025f8:	f001 fda6 	bl	8004148 <HAL_I2C_Master_Receive>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <OLED_CheckOnline+0x4e>
		HAL_GPIO_WritePin(OLEDS_GPIO_Port, OLEDS_Pin, GPIO_PIN_SET);
 8002602:	2201      	movs	r2, #1
 8002604:	2180      	movs	r1, #128	@ 0x80
 8002606:	4807      	ldr	r0, [pc, #28]	@ (8002624 <OLED_CheckOnline+0x5c>)
 8002608:	f001 fb2b 	bl	8003c62 <HAL_GPIO_WritePin>
		while(1){
			//如果OLED不在线，就阻塞主线程
			HAL_Delay(1000);
 800260c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002610:	f001 f85a 	bl	80036c8 <HAL_Delay>
 8002614:	e7fa      	b.n	800260c <OLED_CheckOnline+0x44>
		}
	}
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000060c 	.word	0x2000060c
 8002624:	40010c00 	.word	0x40010c00

08002628 <OLED_Init>:


void OLED_Init(){
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 800262c:	20c8      	movs	r0, #200	@ 0xc8
 800262e:	f001 f84b 	bl	80036c8 <HAL_Delay>
	//检测OLED是否在线
	OLED_CheckOnline();
 8002632:	f7ff ffc9 	bl	80025c8 <OLED_CheckOnline>
	OLED_SendCmd(0xAE); //关闭显示器
 8002636:	20ae      	movs	r0, #174	@ 0xae
 8002638:	f7ff ffac 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xd5); //
 800263c:	20d5      	movs	r0, #213	@ 0xd5
 800263e:	f7ff ffa9 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x80); //设置时钟分频(1分频)和振荡器频率
 8002642:	2080      	movs	r0, #128	@ 0x80
 8002644:	f7ff ffa6 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xA8); //
 8002648:	20a8      	movs	r0, #168	@ 0xa8
 800264a:	f7ff ffa3 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x3F); //设置多路复用比例(64)
 800264e:	203f      	movs	r0, #63	@ 0x3f
 8002650:	f7ff ffa0 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xD3); //
 8002654:	20d3      	movs	r0, #211	@ 0xd3
 8002656:	f7ff ff9d 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x00); //设置显示偏移(0)
 800265a:	2000      	movs	r0, #0
 800265c:	f7ff ff9a 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x40); //设置起始线为(0)
 8002660:	2040      	movs	r0, #64	@ 0x40
 8002662:	f7ff ff97 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x8D); //
 8002666:	208d      	movs	r0, #141	@ 0x8d
 8002668:	f7ff ff94 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x14); //启用电荷泵
 800266c:	2014      	movs	r0, #20
 800266e:	f7ff ff91 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x20); //
 8002672:	2020      	movs	r0, #32
 8002674:	f7ff ff8e 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x02); //设置内存地址模式(页地址模式)
 8002678:	2002      	movs	r0, #2
 800267a:	f7ff ff8b 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xB0); //设置起始页地址(0)
 800267e:	20b0      	movs	r0, #176	@ 0xb0
 8002680:	f7ff ff88 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x00); //设置列地址低四位
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff ff85 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x10); //设置列地址高四位
 800268a:	2010      	movs	r0, #16
 800268c:	f7ff ff82 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x81);
 8002690:	2081      	movs	r0, #129	@ 0x81
 8002692:	f7ff ff7f 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xff); //设置对比度
 8002696:	20ff      	movs	r0, #255	@ 0xff
 8002698:	f7ff ff7c 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xc8); //设置输出扫描方向(映射模式)
 800269c:	20c8      	movs	r0, #200	@ 0xc8
 800269e:	f7ff ff79 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xA7); //设置显示模式(正常显示)
 80026a2:	20a7      	movs	r0, #167	@ 0xa7
 80026a4:	f7ff ff76 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xA1); //设置显示模式(正常显示)
 80026a8:	20a1      	movs	r0, #161	@ 0xa1
 80026aa:	f7ff ff73 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xdb); //
 80026ae:	20db      	movs	r0, #219	@ 0xdb
 80026b0:	f7ff ff70 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x20); //设置VCOM电压(0.77xVcc)
 80026b4:	2020      	movs	r0, #32
 80026b6:	f7ff ff6d 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xd9); //
 80026ba:	20d9      	movs	r0, #217	@ 0xd9
 80026bc:	f7ff ff6a 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x22); //设置预充电周(默认)
 80026c0:	2022      	movs	r0, #34	@ 0x22
 80026c2:	f7ff ff67 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xda);
 80026c6:	20da      	movs	r0, #218	@ 0xda
 80026c8:	f7ff ff64 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0x12); //设置引脚硬件配置(128*64)
 80026cc:	2012      	movs	r0, #18
 80026ce:	f7ff ff61 	bl	8002594 <OLED_SendCmd>
	OLED_SendCmd(0xAF); //打开显示器
 80026d2:	20af      	movs	r0, #175	@ 0xaf
 80026d4:	f7ff ff5e 	bl	8002594 <OLED_SendCmd>
}
 80026d8:	bf00      	nop
 80026da:	bd80      	pop	{r7, pc}

080026dc <OLED_ClearScreen>:



void OLED_ClearScreen(){
 80026dc:	b580      	push	{r7, lr}
 80026de:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
 80026e2:	af02      	add	r7, sp, #8
	uint8_t GRAM[8][128];
	memset(GRAM,0,sizeof(GRAM));
 80026e4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80026e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 ff15 	bl	800751e <memset>
	uint8_t sendBuffer[129];
	sendBuffer[0]=0x40;
 80026f4:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80026f8:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 80026fc:	2240      	movs	r2, #64	@ 0x40
 80026fe:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i=0;i<8;i++){
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
 8002706:	e028      	b.n	800275a <OLED_ClearScreen+0x7e>
		OLED_SendCmd(0xb0+i);
 8002708:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 800270c:	3b50      	subs	r3, #80	@ 0x50
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff3f 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x00); // 设置列地址低四位
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff ff3c 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x10); // 设置列地址高四位
 800271c:	2010      	movs	r0, #16
 800271e:	f7ff ff39 	bl	8002594 <OLED_SendCmd>
		memcpy(&sendBuffer[1],GRAM,128);
 8002722:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8002726:	f5a3 6391 	sub.w	r3, r3, #1160	@ 0x488
 800272a:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 800272e:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8002732:	3301      	adds	r3, #1
 8002734:	4611      	mov	r1, r2
 8002736:	2280      	movs	r2, #128	@ 0x80
 8002738:	4618      	mov	r0, r3
 800273a:	f004 ff7e 	bl	800763a <memcpy>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 800273e:	463a      	mov	r2, r7
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2381      	movs	r3, #129	@ 0x81
 8002748:	2178      	movs	r1, #120	@ 0x78
 800274a:	4809      	ldr	r0, [pc, #36]	@ (8002770 <OLED_ClearScreen+0x94>)
 800274c:	f001 fbfe 	bl	8003f4c <HAL_I2C_Master_Transmit>
	for(i=0;i<8;i++){
 8002750:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 8002754:	3301      	adds	r3, #1
 8002756:	f887 3487 	strb.w	r3, [r7, #1159]	@ 0x487
 800275a:	f897 3487 	ldrb.w	r3, [r7, #1159]	@ 0x487
 800275e:	2b07      	cmp	r3, #7
 8002760:	d9d2      	bls.n	8002708 <OLED_ClearScreen+0x2c>
	}
}
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	f507 6791 	add.w	r7, r7, #1160	@ 0x488
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000060c 	.word	0x2000060c

08002774 <OLED_ShowDistance_Text>:

void OLED_ShowDistance_Text(){
 8002774:	b580      	push	{r7, lr}
 8002776:	b0a4      	sub	sp, #144	@ 0x90
 8002778:	af02      	add	r7, sp, #8
	uint8_t sendBuffer[129];
	memset(sendBuffer,0,sizeof(sendBuffer));
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2281      	movs	r2, #129	@ 0x81
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f004 fecc 	bl	800751e <memset>
	sendBuffer[0]=0x40;
 8002786:	2340      	movs	r3, #64	@ 0x40
 8002788:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=0;i<2;i++){
 800278a:	2300      	movs	r3, #0
 800278c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002790:	e04b      	b.n	800282a <OLED_ShowDistance_Text+0xb6>
		OLED_SendCmd(0xb0+i);
 8002792:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002796:	3b50      	subs	r3, #80	@ 0x50
 8002798:	b2db      	uxtb	r3, r3
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fefa 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x00); // 设置列地址低四位
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff fef7 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x10); // 设置列地址高四位
 80027a6:	2010      	movs	r0, #16
 80027a8:	f7ff fef4 	bl	8002594 <OLED_SendCmd>
		for(j=0;j<8;j++){
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80027b2:	e028      	b.n	8002806 <OLED_ShowDistance_Text+0x92>
			if(i==0){
 80027b4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10f      	bne.n	80027dc <OLED_ShowDistance_Text+0x68>
				memcpy(&sendBuffer[1+j*16],&distance_16x16[j][0],16);
 80027bc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	3301      	adds	r3, #1
 80027c4:	1d3a      	adds	r2, r7, #4
 80027c6:	18d0      	adds	r0, r2, r3
 80027c8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80027cc:	015b      	lsls	r3, r3, #5
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <OLED_ShowDistance_Text+0xc8>)
 80027d0:	4413      	add	r3, r2
 80027d2:	2210      	movs	r2, #16
 80027d4:	4619      	mov	r1, r3
 80027d6:	f004 ff30 	bl	800763a <memcpy>
 80027da:	e00f      	b.n	80027fc <OLED_ShowDistance_Text+0x88>
			}
			else{
				memcpy(&sendBuffer[1+j*16],&distance_16x16[j][16],16);
 80027dc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	3301      	adds	r3, #1
 80027e4:	1d3a      	adds	r2, r7, #4
 80027e6:	18d0      	adds	r0, r2, r3
 80027e8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80027ec:	015b      	lsls	r3, r3, #5
 80027ee:	3310      	adds	r3, #16
 80027f0:	4a12      	ldr	r2, [pc, #72]	@ (800283c <OLED_ShowDistance_Text+0xc8>)
 80027f2:	4413      	add	r3, r2
 80027f4:	2210      	movs	r2, #16
 80027f6:	4619      	mov	r1, r3
 80027f8:	f004 ff1f 	bl	800763a <memcpy>
		for(j=0;j<8;j++){
 80027fc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002800:	3301      	adds	r3, #1
 8002802:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002806:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800280a:	2b07      	cmp	r3, #7
 800280c:	d9d2      	bls.n	80027b4 <OLED_ShowDistance_Text+0x40>
			}
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 800280e:	1d3a      	adds	r2, r7, #4
 8002810:	f04f 33ff 	mov.w	r3, #4294967295
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2381      	movs	r3, #129	@ 0x81
 8002818:	2178      	movs	r1, #120	@ 0x78
 800281a:	4809      	ldr	r0, [pc, #36]	@ (8002840 <OLED_ShowDistance_Text+0xcc>)
 800281c:	f001 fb96 	bl	8003f4c <HAL_I2C_Master_Transmit>
	for(i=0;i<2;i++){
 8002820:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002824:	3301      	adds	r3, #1
 8002826:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800282a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800282e:	2b01      	cmp	r3, #1
 8002830:	d9af      	bls.n	8002792 <OLED_ShowDistance_Text+0x1e>
	}
}
 8002832:	bf00      	nop
 8002834:	bf00      	nop
 8002836:	3788      	adds	r7, #136	@ 0x88
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2000000c 	.word	0x2000000c
 8002840:	2000060c 	.word	0x2000060c

08002844 <OLED_ShowTemperature_Text>:

void OLED_ShowTemperature_Text(){
 8002844:	b580      	push	{r7, lr}
 8002846:	b0a4      	sub	sp, #144	@ 0x90
 8002848:	af02      	add	r7, sp, #8
	uint8_t sendBuffer[129];
		memset(sendBuffer,0,sizeof(sendBuffer));
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2281      	movs	r2, #129	@ 0x81
 800284e:	2100      	movs	r1, #0
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fe64 	bl	800751e <memset>
		sendBuffer[0]=0x40;
 8002856:	2340      	movs	r3, #64	@ 0x40
 8002858:	713b      	strb	r3, [r7, #4]
		uint8_t i,j;
		for(i=0;i<2;i++){
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002860:	e04b      	b.n	80028fa <OLED_ShowTemperature_Text+0xb6>
			OLED_SendCmd(0xb3+i);
 8002862:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002866:	3b4d      	subs	r3, #77	@ 0x4d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fe92 	bl	8002594 <OLED_SendCmd>
			OLED_SendCmd(0x00); // 设置列地址低四位
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff fe8f 	bl	8002594 <OLED_SendCmd>
			OLED_SendCmd(0x10); // 设置列地址高四位
 8002876:	2010      	movs	r0, #16
 8002878:	f7ff fe8c 	bl	8002594 <OLED_SendCmd>
			for(j=0;j<7;j++){
 800287c:	2300      	movs	r3, #0
 800287e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002882:	e028      	b.n	80028d6 <OLED_ShowTemperature_Text+0x92>
				if(i==0){
 8002884:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <OLED_ShowTemperature_Text+0x68>
					memcpy(&sendBuffer[1+j*16],&temperature_16x16[j][0],16);
 800288c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	3301      	adds	r3, #1
 8002894:	1d3a      	adds	r2, r7, #4
 8002896:	18d0      	adds	r0, r2, r3
 8002898:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	4a1b      	ldr	r2, [pc, #108]	@ (800290c <OLED_ShowTemperature_Text+0xc8>)
 80028a0:	4413      	add	r3, r2
 80028a2:	2210      	movs	r2, #16
 80028a4:	4619      	mov	r1, r3
 80028a6:	f004 fec8 	bl	800763a <memcpy>
 80028aa:	e00f      	b.n	80028cc <OLED_ShowTemperature_Text+0x88>
				}
				else{
					memcpy(&sendBuffer[1+j*16],&temperature_16x16[j][16],16);
 80028ac:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	3301      	adds	r3, #1
 80028b4:	1d3a      	adds	r2, r7, #4
 80028b6:	18d0      	adds	r0, r2, r3
 80028b8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	3310      	adds	r3, #16
 80028c0:	4a12      	ldr	r2, [pc, #72]	@ (800290c <OLED_ShowTemperature_Text+0xc8>)
 80028c2:	4413      	add	r3, r2
 80028c4:	2210      	movs	r2, #16
 80028c6:	4619      	mov	r1, r3
 80028c8:	f004 feb7 	bl	800763a <memcpy>
			for(j=0;j<7;j++){
 80028cc:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028d0:	3301      	adds	r3, #1
 80028d2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80028d6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80028da:	2b06      	cmp	r3, #6
 80028dc:	d9d2      	bls.n	8002884 <OLED_ShowTemperature_Text+0x40>
				}
			}
			HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 80028de:	1d3a      	adds	r2, r7, #4
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	2381      	movs	r3, #129	@ 0x81
 80028e8:	2178      	movs	r1, #120	@ 0x78
 80028ea:	4809      	ldr	r0, [pc, #36]	@ (8002910 <OLED_ShowTemperature_Text+0xcc>)
 80028ec:	f001 fb2e 	bl	8003f4c <HAL_I2C_Master_Transmit>
		for(i=0;i<2;i++){
 80028f0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80028f4:	3301      	adds	r3, #1
 80028f6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80028fa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d9af      	bls.n	8002862 <OLED_ShowTemperature_Text+0x1e>
		}
}
 8002902:	bf00      	nop
 8002904:	bf00      	nop
 8002906:	3788      	adds	r7, #136	@ 0x88
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	2000010c 	.word	0x2000010c
 8002910:	2000060c 	.word	0x2000060c

08002914 <OLED_SoundSpeed_Text>:

void OLED_SoundSpeed_Text(){
 8002914:	b580      	push	{r7, lr}
 8002916:	b0a4      	sub	sp, #144	@ 0x90
 8002918:	af02      	add	r7, sp, #8
	uint8_t sendBuffer[129];
	memset(sendBuffer,0,sizeof(sendBuffer));
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	2281      	movs	r2, #129	@ 0x81
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fdfc 	bl	800751e <memset>
	sendBuffer[0]=0x40;
 8002926:	2340      	movs	r3, #64	@ 0x40
 8002928:	713b      	strb	r3, [r7, #4]
	uint8_t i,j;
	for(i=0;i<2;i++){
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002930:	e04b      	b.n	80029ca <OLED_SoundSpeed_Text+0xb6>
		OLED_SendCmd(0xb6+i);
 8002932:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002936:	3b4a      	subs	r3, #74	@ 0x4a
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fe2a 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x00); // 设置列地址低四位
 8002940:	2000      	movs	r0, #0
 8002942:	f7ff fe27 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x10); // 设置列地址高四位
 8002946:	2010      	movs	r0, #16
 8002948:	f7ff fe24 	bl	8002594 <OLED_SendCmd>
		for(j=0;j<3;j++){
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002952:	e028      	b.n	80029a6 <OLED_SoundSpeed_Text+0x92>
			if(i==0){
 8002954:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <OLED_SoundSpeed_Text+0x68>
				memcpy(&sendBuffer[1+j*16],&soundSpeed_16x16[j][0],16);
 800295c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3301      	adds	r3, #1
 8002964:	1d3a      	adds	r2, r7, #4
 8002966:	18d0      	adds	r0, r2, r3
 8002968:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800296c:	015b      	lsls	r3, r3, #5
 800296e:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <OLED_SoundSpeed_Text+0xc8>)
 8002970:	4413      	add	r3, r2
 8002972:	2210      	movs	r2, #16
 8002974:	4619      	mov	r1, r3
 8002976:	f004 fe60 	bl	800763a <memcpy>
 800297a:	e00f      	b.n	800299c <OLED_SoundSpeed_Text+0x88>
			}
			else{
				memcpy(&sendBuffer[1+j*16],&soundSpeed_16x16[j][16],16);
 800297c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	3301      	adds	r3, #1
 8002984:	1d3a      	adds	r2, r7, #4
 8002986:	18d0      	adds	r0, r2, r3
 8002988:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800298c:	015b      	lsls	r3, r3, #5
 800298e:	3310      	adds	r3, #16
 8002990:	4a12      	ldr	r2, [pc, #72]	@ (80029dc <OLED_SoundSpeed_Text+0xc8>)
 8002992:	4413      	add	r3, r2
 8002994:	2210      	movs	r2, #16
 8002996:	4619      	mov	r1, r3
 8002998:	f004 fe4f 	bl	800763a <memcpy>
		for(j=0;j<3;j++){
 800299c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80029a0:	3301      	adds	r3, #1
 80029a2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80029a6:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d9d2      	bls.n	8002954 <OLED_SoundSpeed_Text+0x40>
			}
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 80029ae:	1d3a      	adds	r2, r7, #4
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2381      	movs	r3, #129	@ 0x81
 80029b8:	2178      	movs	r1, #120	@ 0x78
 80029ba:	4809      	ldr	r0, [pc, #36]	@ (80029e0 <OLED_SoundSpeed_Text+0xcc>)
 80029bc:	f001 fac6 	bl	8003f4c <HAL_I2C_Master_Transmit>
	for(i=0;i<2;i++){
 80029c0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80029c4:	3301      	adds	r3, #1
 80029c6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80029ca:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d9af      	bls.n	8002932 <OLED_SoundSpeed_Text+0x1e>
	}
}
 80029d2:	bf00      	nop
 80029d4:	bf00      	nop
 80029d6:	3788      	adds	r7, #136	@ 0x88
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	200001ec 	.word	0x200001ec
 80029e0:	2000060c 	.word	0x2000060c

080029e4 <OLED_SoundSpeed_Unit>:


void OLED_SoundSpeed_Unit(){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af02      	add	r7, sp, #8
	uint8_t sendBuffer[37];
	memset(sendBuffer,0,sizeof(sendBuffer));
 80029ea:	463b      	mov	r3, r7
 80029ec:	2225      	movs	r2, #37	@ 0x25
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fd94 	bl	800751e <memset>
	sendBuffer[0]=0x40;
 80029f6:	2340      	movs	r3, #64	@ 0x40
 80029f8:	703b      	strb	r3, [r7, #0]
	uint8_t i,j;
	for(i=0;i<2;i++){
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002a00:	e057      	b.n	8002ab2 <OLED_SoundSpeed_Unit+0xce>
		OLED_SendCmd(0xb6+i);
 8002a02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a06:	3b4a      	subs	r3, #74	@ 0x4a
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fdc2 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x0A); // 设置列地址低四位
 8002a10:	200a      	movs	r0, #10
 8002a12:	f7ff fdbf 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x15); // 设置列地址高四位
 8002a16:	2015      	movs	r0, #21
 8002a18:	f7ff fdbc 	bl	8002594 <OLED_SendCmd>
		for(j=0;j<3;j++){
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a22:	e034      	b.n	8002a8e <OLED_SoundSpeed_Unit+0xaa>
			if(i==0){
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d115      	bne.n	8002a58 <OLED_SoundSpeed_Unit+0x74>
				memcpy(&sendBuffer[1+j*12],&soundSpeed_unit_12x12[j][0],12);
 8002a2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	3301      	adds	r3, #1
 8002a3a:	463a      	mov	r2, r7
 8002a3c:	18d0      	adds	r0, r2, r3
 8002a3e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ac4 <OLED_SoundSpeed_Unit+0xe0>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	220c      	movs	r2, #12
 8002a50:	4619      	mov	r1, r3
 8002a52:	f004 fdf2 	bl	800763a <memcpy>
 8002a56:	e015      	b.n	8002a84 <OLED_SoundSpeed_Unit+0xa0>
			}
			else{
				memcpy(&sendBuffer[1+j*12],&soundSpeed_unit_12x12[j][12],12);
 8002a58:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	3301      	adds	r3, #1
 8002a66:	463a      	mov	r2, r7
 8002a68:	18d0      	adds	r0, r2, r3
 8002a6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	330c      	adds	r3, #12
 8002a78:	4a12      	ldr	r2, [pc, #72]	@ (8002ac4 <OLED_SoundSpeed_Unit+0xe0>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f004 fddb 	bl	800763a <memcpy>
		for(j=0;j<3;j++){
 8002a84:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002a8e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d9c6      	bls.n	8002a24 <OLED_SoundSpeed_Unit+0x40>
			}
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 8002a96:	463a      	mov	r2, r7
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2325      	movs	r3, #37	@ 0x25
 8002aa0:	2178      	movs	r1, #120	@ 0x78
 8002aa2:	4809      	ldr	r0, [pc, #36]	@ (8002ac8 <OLED_SoundSpeed_Unit+0xe4>)
 8002aa4:	f001 fa52 	bl	8003f4c <HAL_I2C_Master_Transmit>
	for(i=0;i<2;i++){
 8002aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aac:	3301      	adds	r3, #1
 8002aae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d9a3      	bls.n	8002a02 <OLED_SoundSpeed_Unit+0x1e>
	}
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	3728      	adds	r7, #40	@ 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200002fc 	.word	0x200002fc
 8002ac8:	2000060c 	.word	0x2000060c

08002acc <OLED_ShowTemperature>:


void OLED_ShowTemperature(uint8_t* dataString){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b09a      	sub	sp, #104	@ 0x68
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	int temp[6];
	for (i =0 ;i<6;i++){
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002ada:	e012      	b.n	8002b02 <OLED_ShowTemperature+0x36>
		temp[i] =dataString[i]-'0';
 8002adc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002aec:	3a30      	subs	r2, #48	@ 0x30
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	3360      	adds	r3, #96	@ 0x60
 8002af2:	443b      	add	r3, r7
 8002af4:	f843 2c20 	str.w	r2, [r3, #-32]
	for (i =0 ;i<6;i++){
 8002af8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002afc:	3301      	adds	r3, #1
 8002afe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002b02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002b06:	2b05      	cmp	r3, #5
 8002b08:	d9e8      	bls.n	8002adc <OLED_ShowTemperature+0x10>
	}
	uint8_t sendBuffer[49];
	memset(sendBuffer,0,sizeof(sendBuffer));
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	2231      	movs	r2, #49	@ 0x31
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f004 fd03 	bl	800751e <memset>
	sendBuffer[0]=0x40;
 8002b18:	2340      	movs	r3, #64	@ 0x40
 8002b1a:	733b      	strb	r3, [r7, #12]
	for(i=0;i<2;i++){
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002b22:	e060      	b.n	8002be6 <OLED_ShowTemperature+0x11a>
		OLED_SendCmd(0xb3+i);
 8002b24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002b28:	3b4d      	subs	r3, #77	@ 0x4d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fd31 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x00); // 设置列地址低四位
 8002b32:	2000      	movs	r0, #0
 8002b34:	f7ff fd2e 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x13); // 设置列地址高四位
 8002b38:	2013      	movs	r0, #19
 8002b3a:	f7ff fd2b 	bl	8002594 <OLED_SendCmd>
		for(j=0;j<6;j++){
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002b44:	e03c      	b.n	8002bc0 <OLED_ShowTemperature+0xf4>
			int index;
			if(temp[j]>=0){
 8002b46:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	3360      	adds	r3, #96	@ 0x60
 8002b4e:	443b      	add	r3, r7
 8002b50:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db08      	blt.n	8002b6a <OLED_ShowTemperature+0x9e>
				index = temp[j];
 8002b58:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3360      	adds	r3, #96	@ 0x60
 8002b60:	443b      	add	r3, r7
 8002b62:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b68:	e001      	b.n	8002b6e <OLED_ShowTemperature+0xa2>
			}
			else{
				index = 10;
 8002b6a:	230a      	movs	r3, #10
 8002b6c:	65bb      	str	r3, [r7, #88]	@ 0x58
			}
			if(i==0){
 8002b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10f      	bne.n	8002b96 <OLED_ShowTemperature+0xca>
				memcpy(&sendBuffer[1+j*8],&numbers_16x8[index][0],8);
 8002b76:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f107 020c 	add.w	r2, r7, #12
 8002b82:	18d0      	adds	r0, r2, r3
 8002b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <OLED_ShowTemperature+0x12c>)
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f004 fd53 	bl	800763a <memcpy>
 8002b94:	e00f      	b.n	8002bb6 <OLED_ShowTemperature+0xea>
			}
			else{
				memcpy(&sendBuffer[1+j*8],&numbers_16x8[index][8],8);
 8002b96:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f107 020c 	add.w	r2, r7, #12
 8002ba2:	18d0      	adds	r0, r2, r3
 8002ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	3308      	adds	r3, #8
 8002baa:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <OLED_ShowTemperature+0x12c>)
 8002bac:	4413      	add	r3, r2
 8002bae:	2208      	movs	r2, #8
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f004 fd42 	bl	800763a <memcpy>
		for(j=0;j<6;j++){
 8002bb6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002bc0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d9be      	bls.n	8002b46 <OLED_ShowTemperature+0x7a>
			}
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 8002bc8:	f107 020c 	add.w	r2, r7, #12
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2331      	movs	r3, #49	@ 0x31
 8002bd4:	2178      	movs	r1, #120	@ 0x78
 8002bd6:	4809      	ldr	r0, [pc, #36]	@ (8002bfc <OLED_ShowTemperature+0x130>)
 8002bd8:	f001 f9b8 	bl	8003f4c <HAL_I2C_Master_Transmit>
	for(i=0;i<2;i++){
 8002bdc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002be0:	3301      	adds	r3, #1
 8002be2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002be6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d99a      	bls.n	8002b24 <OLED_ShowTemperature+0x58>
	}
}
 8002bee:	bf00      	nop
 8002bf0:	bf00      	nop
 8002bf2:	3760      	adds	r7, #96	@ 0x60
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	2000024c 	.word	0x2000024c
 8002bfc:	2000060c 	.word	0x2000060c

08002c00 <OLED_ShowSoundSpeed>:

void OLED_ShowSoundSpeed(uint8_t* dataString){
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b096      	sub	sp, #88	@ 0x58
 8002c04:	af02      	add	r7, sp, #8
 8002c06:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	int temp[5];
	for (i =0 ;i<5;i++){
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002c0e:	e012      	b.n	8002c36 <OLED_ShowSoundSpeed+0x36>
		temp[i] =dataString[i]-'0';
 8002c10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c20:	3a30      	subs	r2, #48	@ 0x30
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	3350      	adds	r3, #80	@ 0x50
 8002c26:	443b      	add	r3, r7
 8002c28:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (i =0 ;i<5;i++){
 8002c2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c30:	3301      	adds	r3, #1
 8002c32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002c36:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d9e8      	bls.n	8002c10 <OLED_ShowSoundSpeed+0x10>
	}
	uint8_t sendBuffer[41];
	memset(sendBuffer,0,sizeof(sendBuffer));
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	2229      	movs	r2, #41	@ 0x29
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 fc69 	bl	800751e <memset>
	sendBuffer[0]=0x40;
 8002c4c:	2340      	movs	r3, #64	@ 0x40
 8002c4e:	723b      	strb	r3, [r7, #8]
	for(i=0;i<2;i++){
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002c56:	e060      	b.n	8002d1a <OLED_ShowSoundSpeed+0x11a>
		OLED_SendCmd(0xb6+i);
 8002c58:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c5c:	3b4a      	subs	r3, #74	@ 0x4a
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fc97 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x00); // 设置列地址低四位
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7ff fc94 	bl	8002594 <OLED_SendCmd>
		OLED_SendCmd(0x13); // 设置列地址高四位
 8002c6c:	2013      	movs	r0, #19
 8002c6e:	f7ff fc91 	bl	8002594 <OLED_SendCmd>
		for(j=0;j<5;j++){
 8002c72:	2300      	movs	r3, #0
 8002c74:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002c78:	e03c      	b.n	8002cf4 <OLED_ShowSoundSpeed+0xf4>
			int index;
			if(temp[j]>=0){
 8002c7a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3350      	adds	r3, #80	@ 0x50
 8002c82:	443b      	add	r3, r7
 8002c84:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db08      	blt.n	8002c9e <OLED_ShowSoundSpeed+0x9e>
				index = temp[j];
 8002c8c:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3350      	adds	r3, #80	@ 0x50
 8002c94:	443b      	add	r3, r7
 8002c96:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9c:	e001      	b.n	8002ca2 <OLED_ShowSoundSpeed+0xa2>
			}
			else{
				index = 10;
 8002c9e:	230a      	movs	r3, #10
 8002ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
			}
			if(i==0){
 8002ca2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <OLED_ShowSoundSpeed+0xca>
				memcpy(&sendBuffer[1+j*8],&numbers_16x8[index][0],8);
 8002caa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f107 0208 	add.w	r2, r7, #8
 8002cb6:	18d0      	adds	r0, r2, r3
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002d2c <OLED_ShowSoundSpeed+0x12c>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f004 fcb9 	bl	800763a <memcpy>
 8002cc8:	e00f      	b.n	8002cea <OLED_ShowSoundSpeed+0xea>
			}
			else{
				memcpy(&sendBuffer[1+j*8],&numbers_16x8[index][8],8);
 8002cca:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f107 0208 	add.w	r2, r7, #8
 8002cd6:	18d0      	adds	r0, r2, r3
 8002cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	3308      	adds	r3, #8
 8002cde:	4a13      	ldr	r2, [pc, #76]	@ (8002d2c <OLED_ShowSoundSpeed+0x12c>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f004 fca8 	bl	800763a <memcpy>
		for(j=0;j<5;j++){
 8002cea:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002cf4:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d9be      	bls.n	8002c7a <OLED_ShowSoundSpeed+0x7a>
			}
		}
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 8002cfc:	f107 0208 	add.w	r2, r7, #8
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2329      	movs	r3, #41	@ 0x29
 8002d08:	2178      	movs	r1, #120	@ 0x78
 8002d0a:	4809      	ldr	r0, [pc, #36]	@ (8002d30 <OLED_ShowSoundSpeed+0x130>)
 8002d0c:	f001 f91e 	bl	8003f4c <HAL_I2C_Master_Transmit>
	for(i=0;i<2;i++){
 8002d10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d14:	3301      	adds	r3, #1
 8002d16:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002d1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d99a      	bls.n	8002c58 <OLED_ShowSoundSpeed+0x58>
	}
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	3750      	adds	r7, #80	@ 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	2000024c 	.word	0x2000024c
 8002d30:	2000060c 	.word	0x2000060c

08002d34 <OLED_ShowDistance>:

void OLED_ShowDistance(uint8_t* dataString){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b09a      	sub	sp, #104	@ 0x68
 8002d38:	af02      	add	r7, sp, #8
 8002d3a:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
		int temp[6];
		for (i =0 ;i<6;i++){
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002d42:	e012      	b.n	8002d6a <OLED_ShowDistance+0x36>
			temp[i] =dataString[i]-'0';
 8002d44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d54:	3a30      	subs	r2, #48	@ 0x30
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	3360      	adds	r3, #96	@ 0x60
 8002d5a:	443b      	add	r3, r7
 8002d5c:	f843 2c20 	str.w	r2, [r3, #-32]
		for (i =0 ;i<6;i++){
 8002d60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d64:	3301      	adds	r3, #1
 8002d66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d6e:	2b05      	cmp	r3, #5
 8002d70:	d9e8      	bls.n	8002d44 <OLED_ShowDistance+0x10>
		}
		uint8_t sendBuffer[49];
		memset(sendBuffer,0,sizeof(sendBuffer));
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	2231      	movs	r2, #49	@ 0x31
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 fbcf 	bl	800751e <memset>
		sendBuffer[0]=0x40;
 8002d80:	2340      	movs	r3, #64	@ 0x40
 8002d82:	733b      	strb	r3, [r7, #12]
		for(i=0;i<2;i++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002d8a:	e060      	b.n	8002e4e <OLED_ShowDistance+0x11a>
			OLED_SendCmd(0xb0+i);
 8002d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002d90:	3b50      	subs	r3, #80	@ 0x50
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fbfd 	bl	8002594 <OLED_SendCmd>
			OLED_SendCmd(0x00); // 设置列地址低四位
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7ff fbfa 	bl	8002594 <OLED_SendCmd>
			OLED_SendCmd(0x13); // 设置列地址高四位
 8002da0:	2013      	movs	r0, #19
 8002da2:	f7ff fbf7 	bl	8002594 <OLED_SendCmd>
			for(j=0;j<6;j++){
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002dac:	e03c      	b.n	8002e28 <OLED_ShowDistance+0xf4>
				int index;
				if(temp[j]>=0){
 8002dae:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	3360      	adds	r3, #96	@ 0x60
 8002db6:	443b      	add	r3, r7
 8002db8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	db08      	blt.n	8002dd2 <OLED_ShowDistance+0x9e>
					index = temp[j];
 8002dc0:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	3360      	adds	r3, #96	@ 0x60
 8002dc8:	443b      	add	r3, r7
 8002dca:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002dce:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dd0:	e001      	b.n	8002dd6 <OLED_ShowDistance+0xa2>
				}
				else{
					index = 10;
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
				}
				if(i==0){
 8002dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <OLED_ShowDistance+0xca>
					memcpy(&sendBuffer[1+j*8],&numbers_16x8[index][0],8);
 8002dde:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3301      	adds	r3, #1
 8002de6:	f107 020c 	add.w	r2, r7, #12
 8002dea:	18d0      	adds	r0, r2, r3
 8002dec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e60 <OLED_ShowDistance+0x12c>)
 8002df2:	4413      	add	r3, r2
 8002df4:	2208      	movs	r2, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	f004 fc1f 	bl	800763a <memcpy>
 8002dfc:	e00f      	b.n	8002e1e <OLED_ShowDistance+0xea>
				}
				else{
					memcpy(&sendBuffer[1+j*8],&numbers_16x8[index][8],8);
 8002dfe:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	3301      	adds	r3, #1
 8002e06:	f107 020c 	add.w	r2, r7, #12
 8002e0a:	18d0      	adds	r0, r2, r3
 8002e0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	3308      	adds	r3, #8
 8002e12:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <OLED_ShowDistance+0x12c>)
 8002e14:	4413      	add	r3, r2
 8002e16:	2208      	movs	r2, #8
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f004 fc0e 	bl	800763a <memcpy>
			for(j=0;j<6;j++){
 8002e1e:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002e22:	3301      	adds	r3, #1
 8002e24:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002e28:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d9be      	bls.n	8002dae <OLED_ShowDistance+0x7a>
				}
			}
			HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 8002e30:	f107 020c 	add.w	r2, r7, #12
 8002e34:	f04f 33ff 	mov.w	r3, #4294967295
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2331      	movs	r3, #49	@ 0x31
 8002e3c:	2178      	movs	r1, #120	@ 0x78
 8002e3e:	4809      	ldr	r0, [pc, #36]	@ (8002e64 <OLED_ShowDistance+0x130>)
 8002e40:	f001 f884 	bl	8003f4c <HAL_I2C_Master_Transmit>
		for(i=0;i<2;i++){
 8002e44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002e48:	3301      	adds	r3, #1
 8002e4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002e4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d99a      	bls.n	8002d8c <OLED_ShowDistance+0x58>
		}
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3760      	adds	r7, #96	@ 0x60
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	2000024c 	.word	0x2000024c
 8002e64:	2000060c 	.word	0x2000060c

08002e68 <OLED_ShowDistance_SoFar>:


void OLED_ShowDistance_SoFar(){
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b090      	sub	sp, #64	@ 0x40
 8002e6c:	af02      	add	r7, sp, #8
	uint8_t sendBuffer[49];
		memset(sendBuffer,0,sizeof(sendBuffer));
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	2231      	movs	r2, #49	@ 0x31
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 fb52 	bl	800751e <memset>
		sendBuffer[0]=0x40;
 8002e7a:	2340      	movs	r3, #64	@ 0x40
 8002e7c:	713b      	strb	r3, [r7, #4]
		uint8_t i,j;
		for(i=0;i<2;i++){
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002e84:	e04b      	b.n	8002f1e <OLED_ShowDistance_SoFar+0xb6>
			OLED_SendCmd(0xb0+i);
 8002e86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002e8a:	3b50      	subs	r3, #80	@ 0x50
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fb80 	bl	8002594 <OLED_SendCmd>
			OLED_SendCmd(0x00); // 设置列地址低四位
 8002e94:	2000      	movs	r0, #0
 8002e96:	f7ff fb7d 	bl	8002594 <OLED_SendCmd>
			OLED_SendCmd(0x13); // 设置列地址高四位
 8002e9a:	2013      	movs	r0, #19
 8002e9c:	f7ff fb7a 	bl	8002594 <OLED_SendCmd>
			for(j=0;j<6;j++){
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002ea6:	e028      	b.n	8002efa <OLED_ShowDistance_SoFar+0x92>
				if(i==0){
 8002ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10f      	bne.n	8002ed0 <OLED_ShowDistance_SoFar+0x68>
					memcpy(&sendBuffer[1+j*8],&distance_sofar_16x8[j][0],8);
 8002eb0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	1d3a      	adds	r2, r7, #4
 8002eba:	18d0      	adds	r0, r2, r3
 8002ebc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f30 <OLED_ShowDistance_SoFar+0xc8>)
 8002ec4:	4413      	add	r3, r2
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f004 fbb6 	bl	800763a <memcpy>
 8002ece:	e00f      	b.n	8002ef0 <OLED_ShowDistance_SoFar+0x88>
				}
				else{
					memcpy(&sendBuffer[1+j*8],&distance_sofar_16x8[j][8],8);
 8002ed0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	1d3a      	adds	r2, r7, #4
 8002eda:	18d0      	adds	r0, r2, r3
 8002edc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	4a12      	ldr	r2, [pc, #72]	@ (8002f30 <OLED_ShowDistance_SoFar+0xc8>)
 8002ee6:	4413      	add	r3, r2
 8002ee8:	2208      	movs	r2, #8
 8002eea:	4619      	mov	r1, r3
 8002eec:	f004 fba5 	bl	800763a <memcpy>
			for(j=0;j<6;j++){
 8002ef0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002efa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d9d2      	bls.n	8002ea8 <OLED_ShowDistance_SoFar+0x40>
				}
			}
			HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 8002f02:	1d3a      	adds	r2, r7, #4
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2331      	movs	r3, #49	@ 0x31
 8002f0c:	2178      	movs	r1, #120	@ 0x78
 8002f0e:	4809      	ldr	r0, [pc, #36]	@ (8002f34 <OLED_ShowDistance_SoFar+0xcc>)
 8002f10:	f001 f81c 	bl	8003f4c <HAL_I2C_Master_Transmit>
		for(i=0;i<2;i++){
 8002f14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d9af      	bls.n	8002e86 <OLED_ShowDistance_SoFar+0x1e>
		}
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	3738      	adds	r7, #56	@ 0x38
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20000344 	.word	0x20000344
 8002f34:	2000060c 	.word	0x2000060c

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f3e:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <HAL_MspInit+0x5c>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4a14      	ldr	r2, [pc, #80]	@ (8002f94 <HAL_MspInit+0x5c>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6193      	str	r3, [r2, #24]
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <HAL_MspInit+0x5c>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <HAL_MspInit+0x5c>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f94 <HAL_MspInit+0x5c>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <HAL_MspInit+0x5c>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <HAL_MspInit+0x60>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <HAL_MspInit+0x60>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010000 	.word	0x40010000

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <HardFault_Handler+0x4>

08002fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <MemManage_Handler+0x4>

08002fb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <BusFault_Handler+0x4>

08002fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <UsageFault_Handler+0x4>

08002fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bc80      	pop	{r7}
 8002fce:	4770      	bx	lr

08002fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fec:	f000 fb50 	bl	8003690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <TIM1_UP_IRQHandler+0x10>)
 8002ffa:	f002 fd9e 	bl	8005b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000674 	.word	0x20000674

08003008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <TIM2_IRQHandler+0x10>)
 800300e:	f002 fd94 	bl	8005b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	200006bc 	.word	0x200006bc

0800301c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003020:	4802      	ldr	r0, [pc, #8]	@ (800302c <TIM3_IRQHandler+0x10>)
 8003022:	f002 fd8a 	bl	8005b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000704 	.word	0x20000704

08003030 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003034:	4802      	ldr	r0, [pc, #8]	@ (8003040 <TIM4_IRQHandler+0x10>)
 8003036:	f002 fd80 	bl	8005b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	2000074c 	.word	0x2000074c

08003044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return 1;
 8003048:	2301      	movs	r3, #1
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <_kill>:

int _kill(int pid, int sig)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800305c:	f004 fab2 	bl	80075c4 <__errno>
 8003060:	4603      	mov	r3, r0
 8003062:	2216      	movs	r2, #22
 8003064:	601a      	str	r2, [r3, #0]
  return -1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_exit>:

void _exit (int status)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800307a:	f04f 31ff 	mov.w	r1, #4294967295
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ffe7 	bl	8003052 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <_exit+0x12>

08003088 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e00a      	b.n	80030b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800309a:	f3af 8000 	nop.w
 800309e:	4601      	mov	r1, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	60ba      	str	r2, [r7, #8]
 80030a6:	b2ca      	uxtb	r2, r1
 80030a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3301      	adds	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697a      	ldr	r2, [r7, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	dbf0      	blt.n	800309a <_read+0x12>
  }

  return len;
 80030b8:	687b      	ldr	r3, [r7, #4]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e009      	b.n	80030e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	dbf1      	blt.n	80030d4 <_write+0x12>
  }
  return len;
 80030f0:	687b      	ldr	r3, [r7, #4]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <_close>:

int _close(int file)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003120:	605a      	str	r2, [r3, #4]
  return 0;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <_isatty>:

int _isatty(int file)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003142:	b480      	push	{r7}
 8003144:	b085      	sub	sp, #20
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
	...

0800315c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003164:	4a14      	ldr	r2, [pc, #80]	@ (80031b8 <_sbrk+0x5c>)
 8003166:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <_sbrk+0x60>)
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d102      	bne.n	800317e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003178:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <_sbrk+0x64>)
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <_sbrk+0x68>)
 800317c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <_sbrk+0x64>)
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	429a      	cmp	r2, r3
 800318a:	d207      	bcs.n	800319c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800318c:	f004 fa1a 	bl	80075c4 <__errno>
 8003190:	4603      	mov	r3, r0
 8003192:	220c      	movs	r2, #12
 8003194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	e009      	b.n	80031b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800319c:	4b08      	ldr	r3, [pc, #32]	@ (80031c0 <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031a2:	4b07      	ldr	r3, [pc, #28]	@ (80031c0 <_sbrk+0x64>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	4a05      	ldr	r2, [pc, #20]	@ (80031c0 <_sbrk+0x64>)
 80031ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20005000 	.word	0x20005000
 80031bc:	00000400 	.word	0x00000400
 80031c0:	20000670 	.word	0x20000670
 80031c4:	200008e8 	.word	0x200008e8

080031c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr

080031d4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031da:	f107 0308 	add.w	r3, r7, #8
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e8:	463b      	mov	r3, r7
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031f0:	4b1e      	ldr	r3, [pc, #120]	@ (800326c <MX_TIM1_Init+0x98>)
 80031f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003270 <MX_TIM1_Init+0x9c>)
 80031f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <MX_TIM1_Init+0x98>)
 80031f8:	2247      	movs	r2, #71	@ 0x47
 80031fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	@ (800326c <MX_TIM1_Init+0x98>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <MX_TIM1_Init+0x98>)
 8003204:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003208:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b18      	ldr	r3, [pc, #96]	@ (800326c <MX_TIM1_Init+0x98>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003210:	4b16      	ldr	r3, [pc, #88]	@ (800326c <MX_TIM1_Init+0x98>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	4b15      	ldr	r3, [pc, #84]	@ (800326c <MX_TIM1_Init+0x98>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800321c:	4813      	ldr	r0, [pc, #76]	@ (800326c <MX_TIM1_Init+0x98>)
 800321e:	f002 f9d3 	bl	80055c8 <HAL_TIM_Base_Init>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003228:	f7ff f9ad 	bl	8002586 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003230:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003232:	f107 0308 	add.w	r3, r7, #8
 8003236:	4619      	mov	r1, r3
 8003238:	480c      	ldr	r0, [pc, #48]	@ (800326c <MX_TIM1_Init+0x98>)
 800323a:	f002 fe0a 	bl	8005e52 <HAL_TIM_ConfigClockSource>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003244:	f7ff f99f 	bl	8002586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003248:	2300      	movs	r3, #0
 800324a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324c:	2300      	movs	r3, #0
 800324e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003250:	463b      	mov	r3, r7
 8003252:	4619      	mov	r1, r3
 8003254:	4805      	ldr	r0, [pc, #20]	@ (800326c <MX_TIM1_Init+0x98>)
 8003256:	f003 f961 	bl	800651c <HAL_TIMEx_MasterConfigSynchronization>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003260:	f7ff f991 	bl	8002586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000674 	.word	0x20000674
 8003270:	40012c00 	.word	0x40012c00

08003274 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003288:	463b      	mov	r3, r7
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003290:	4b1d      	ldr	r3, [pc, #116]	@ (8003308 <MX_TIM2_Init+0x94>)
 8003292:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003296:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003298:	4b1b      	ldr	r3, [pc, #108]	@ (8003308 <MX_TIM2_Init+0x94>)
 800329a:	2247      	movs	r2, #71	@ 0x47
 800329c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329e:	4b1a      	ldr	r3, [pc, #104]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80032a4:	4b18      	ldr	r3, [pc, #96]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032ac:	4b16      	ldr	r3, [pc, #88]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b2:	4b15      	ldr	r3, [pc, #84]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032b8:	4813      	ldr	r0, [pc, #76]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032ba:	f002 f985 	bl	80055c8 <HAL_TIM_Base_Init>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80032c4:	f7ff f95f 	bl	8002586 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	4619      	mov	r1, r3
 80032d4:	480c      	ldr	r0, [pc, #48]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032d6:	f002 fdbc 	bl	8005e52 <HAL_TIM_ConfigClockSource>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80032e0:	f7ff f951 	bl	8002586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ec:	463b      	mov	r3, r7
 80032ee:	4619      	mov	r1, r3
 80032f0:	4805      	ldr	r0, [pc, #20]	@ (8003308 <MX_TIM2_Init+0x94>)
 80032f2:	f003 f913 	bl	800651c <HAL_TIMEx_MasterConfigSynchronization>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80032fc:	f7ff f943 	bl	8002586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	200006bc 	.word	0x200006bc

0800330c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	463b      	mov	r3, r7
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003328:	4b1d      	ldr	r3, [pc, #116]	@ (80033a0 <MX_TIM3_Init+0x94>)
 800332a:	4a1e      	ldr	r2, [pc, #120]	@ (80033a4 <MX_TIM3_Init+0x98>)
 800332c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800332e:	4b1c      	ldr	r3, [pc, #112]	@ (80033a0 <MX_TIM3_Init+0x94>)
 8003330:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8003334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003336:	4b1a      	ldr	r3, [pc, #104]	@ (80033a0 <MX_TIM3_Init+0x94>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1250-1;
 800333c:	4b18      	ldr	r3, [pc, #96]	@ (80033a0 <MX_TIM3_Init+0x94>)
 800333e:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8003342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003344:	4b16      	ldr	r3, [pc, #88]	@ (80033a0 <MX_TIM3_Init+0x94>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <MX_TIM3_Init+0x94>)
 800334c:	2200      	movs	r2, #0
 800334e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003350:	4813      	ldr	r0, [pc, #76]	@ (80033a0 <MX_TIM3_Init+0x94>)
 8003352:	f002 f939 	bl	80055c8 <HAL_TIM_Base_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800335c:	f7ff f913 	bl	8002586 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003360:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003366:	f107 0308 	add.w	r3, r7, #8
 800336a:	4619      	mov	r1, r3
 800336c:	480c      	ldr	r0, [pc, #48]	@ (80033a0 <MX_TIM3_Init+0x94>)
 800336e:	f002 fd70 	bl	8005e52 <HAL_TIM_ConfigClockSource>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003378:	f7ff f905 	bl	8002586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800337c:	2300      	movs	r3, #0
 800337e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003384:	463b      	mov	r3, r7
 8003386:	4619      	mov	r1, r3
 8003388:	4805      	ldr	r0, [pc, #20]	@ (80033a0 <MX_TIM3_Init+0x94>)
 800338a:	f003 f8c7 	bl	800651c <HAL_TIMEx_MasterConfigSynchronization>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003394:	f7ff f8f7 	bl	8002586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003398:	bf00      	nop
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000704 	.word	0x20000704
 80033a4:	40000400 	.word	0x40000400

080033a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	@ 0x28
 80033ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ae:	f107 0318 	add.w	r3, r7, #24
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033bc:	f107 0310 	add.w	r3, r7, #16
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80033c6:	463b      	mov	r3, r7
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003484 <MX_TIM4_Init+0xdc>)
 80033d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80033d8:	4b29      	ldr	r3, [pc, #164]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033da:	2247      	movs	r2, #71	@ 0x47
 80033dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033de:	4b28      	ldr	r3, [pc, #160]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80033e4:	4b26      	ldr	r3, [pc, #152]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ec:	4b24      	ldr	r3, [pc, #144]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f2:	4b23      	ldr	r3, [pc, #140]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033f8:	4821      	ldr	r0, [pc, #132]	@ (8003480 <MX_TIM4_Init+0xd8>)
 80033fa:	f002 f8e5 	bl	80055c8 <HAL_TIM_Base_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8003404:	f7ff f8bf 	bl	8002586 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003408:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800340c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800340e:	f107 0318 	add.w	r3, r7, #24
 8003412:	4619      	mov	r1, r3
 8003414:	481a      	ldr	r0, [pc, #104]	@ (8003480 <MX_TIM4_Init+0xd8>)
 8003416:	f002 fd1c 	bl	8005e52 <HAL_TIM_ConfigClockSource>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003420:	f7ff f8b1 	bl	8002586 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003424:	4816      	ldr	r0, [pc, #88]	@ (8003480 <MX_TIM4_Init+0xd8>)
 8003426:	f002 fa0f 	bl	8005848 <HAL_TIM_IC_Init>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003430:	f7ff f8a9 	bl	8002586 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003434:	2300      	movs	r3, #0
 8003436:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	4619      	mov	r1, r3
 8003442:	480f      	ldr	r0, [pc, #60]	@ (8003480 <MX_TIM4_Init+0xd8>)
 8003444:	f003 f86a 	bl	800651c <HAL_TIMEx_MasterConfigSynchronization>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800344e:	f7ff f89a 	bl	8002586 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003452:	2300      	movs	r3, #0
 8003454:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003456:	2301      	movs	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800345a:	2300      	movs	r3, #0
 800345c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800345e:	230f      	movs	r3, #15
 8003460:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003462:	463b      	mov	r3, r7
 8003464:	2200      	movs	r2, #0
 8003466:	4619      	mov	r1, r3
 8003468:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_TIM4_Init+0xd8>)
 800346a:	f002 fc56 	bl	8005d1a <HAL_TIM_IC_ConfigChannel>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8003474:	f7ff f887 	bl	8002586 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003478:	bf00      	nop
 800347a:	3728      	adds	r7, #40	@ 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	2000074c 	.word	0x2000074c
 8003484:	40000800 	.word	0x40000800

08003488 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	@ 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 0320 	add.w	r3, r7, #32
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a40      	ldr	r2, [pc, #256]	@ (80035a4 <HAL_TIM_Base_MspInit+0x11c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d114      	bne.n	80034d2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034a8:	4b3f      	ldr	r3, [pc, #252]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	4a3e      	ldr	r2, [pc, #248]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 80034ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80034b2:	6193      	str	r3, [r2, #24]
 80034b4:	4b3c      	ldr	r3, [pc, #240]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80034c0:	2200      	movs	r2, #0
 80034c2:	2100      	movs	r1, #0
 80034c4:	2019      	movs	r0, #25
 80034c6:	f000 f9fa 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80034ca:	2019      	movs	r0, #25
 80034cc:	f000 fa13 	bl	80038f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80034d0:	e064      	b.n	800359c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034da:	d114      	bne.n	8003506 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034dc:	4b32      	ldr	r3, [pc, #200]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a31      	ldr	r2, [pc, #196]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	61d3      	str	r3, [r2, #28]
 80034e8:	4b2f      	ldr	r3, [pc, #188]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	201c      	movs	r0, #28
 80034fa:	f000 f9e0 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034fe:	201c      	movs	r0, #28
 8003500:	f000 f9f9 	bl	80038f6 <HAL_NVIC_EnableIRQ>
}
 8003504:	e04a      	b.n	800359c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM3)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a28      	ldr	r2, [pc, #160]	@ (80035ac <HAL_TIM_Base_MspInit+0x124>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d114      	bne.n	800353a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003510:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	4a24      	ldr	r2, [pc, #144]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 8003516:	f043 0302 	orr.w	r3, r3, #2
 800351a:	61d3      	str	r3, [r2, #28]
 800351c:	4b22      	ldr	r3, [pc, #136]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	2100      	movs	r1, #0
 800352c:	201d      	movs	r0, #29
 800352e:	f000 f9c6 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003532:	201d      	movs	r0, #29
 8003534:	f000 f9df 	bl	80038f6 <HAL_NVIC_EnableIRQ>
}
 8003538:	e030      	b.n	800359c <HAL_TIM_Base_MspInit+0x114>
  else if(tim_baseHandle->Instance==TIM4)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <HAL_TIM_Base_MspInit+0x128>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d12b      	bne.n	800359c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 8003546:	69db      	ldr	r3, [r3, #28]
 8003548:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 800354a:	f043 0304 	orr.w	r3, r3, #4
 800354e:	61d3      	str	r3, [r2, #28]
 8003550:	4b15      	ldr	r3, [pc, #84]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355c:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	4a11      	ldr	r2, [pc, #68]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 8003562:	f043 0308 	orr.w	r3, r3, #8
 8003566:	6193      	str	r3, [r2, #24]
 8003568:	4b0f      	ldr	r3, [pc, #60]	@ (80035a8 <HAL_TIM_Base_MspInit+0x120>)
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003574:	2340      	movs	r3, #64	@ 0x40
 8003576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003578:	2300      	movs	r3, #0
 800357a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003580:	f107 0320 	add.w	r3, r7, #32
 8003584:	4619      	mov	r1, r3
 8003586:	480b      	ldr	r0, [pc, #44]	@ (80035b4 <HAL_TIM_Base_MspInit+0x12c>)
 8003588:	f000 f9d0 	bl	800392c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2100      	movs	r1, #0
 8003590:	201e      	movs	r0, #30
 8003592:	f000 f994 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003596:	201e      	movs	r0, #30
 8003598:	f000 f9ad 	bl	80038f6 <HAL_NVIC_EnableIRQ>
}
 800359c:	bf00      	nop
 800359e:	3730      	adds	r7, #48	@ 0x30
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40010c00 	.word	0x40010c00

080035b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035b8:	f7ff fe06 	bl	80031c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035bc:	480b      	ldr	r0, [pc, #44]	@ (80035ec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035be:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035c0:	4a0c      	ldr	r2, [pc, #48]	@ (80035f4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80035c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035c4:	e002      	b.n	80035cc <LoopCopyDataInit>

080035c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ca:	3304      	adds	r3, #4

080035cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d0:	d3f9      	bcc.n	80035c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035d2:	4a09      	ldr	r2, [pc, #36]	@ (80035f8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035d4:	4c09      	ldr	r4, [pc, #36]	@ (80035fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035d8:	e001      	b.n	80035de <LoopFillZerobss>

080035da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035dc:	3204      	adds	r2, #4

080035de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e0:	d3fb      	bcc.n	80035da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035e2:	f003 fff5 	bl	80075d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035e6:	f7fe feaf 	bl	8002348 <main>
  bx lr
 80035ea:	4770      	bx	lr
  ldr r0, =_sdata
 80035ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f0:	20000588 	.word	0x20000588
  ldr r2, =_sidata
 80035f4:	0800bfe0 	.word	0x0800bfe0
  ldr r2, =_sbss
 80035f8:	20000588 	.word	0x20000588
  ldr r4, =_ebss
 80035fc:	200008e4 	.word	0x200008e4

08003600 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC1_2_IRQHandler>
	...

08003604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003608:	4b08      	ldr	r3, [pc, #32]	@ (800362c <HAL_Init+0x28>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a07      	ldr	r2, [pc, #28]	@ (800362c <HAL_Init+0x28>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003614:	2003      	movs	r0, #3
 8003616:	f000 f947 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800361a:	200f      	movs	r0, #15
 800361c:	f000 f808 	bl	8003630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003620:	f7ff fc8a 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40022000 	.word	0x40022000

08003630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003638:	4b12      	ldr	r3, [pc, #72]	@ (8003684 <HAL_InitTick+0x54>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <HAL_InitTick+0x58>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	4619      	mov	r1, r3
 8003642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003646:	fbb3 f3f1 	udiv	r3, r3, r1
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f95f 	bl	8003912 <HAL_SYSTICK_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00e      	b.n	800367c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d80a      	bhi.n	800367a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003664:	2200      	movs	r2, #0
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f000 f927 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003670:	4a06      	ldr	r2, [pc, #24]	@ (800368c <HAL_InitTick+0x5c>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200003a4 	.word	0x200003a4
 8003688:	200003ac 	.word	0x200003ac
 800368c:	200003a8 	.word	0x200003a8

08003690 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_IncTick+0x1c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_IncTick+0x20>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	4a03      	ldr	r2, [pc, #12]	@ (80036b0 <HAL_IncTick+0x20>)
 80036a2:	6013      	str	r3, [r2, #0]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	200003ac 	.word	0x200003ac
 80036b0:	20000794 	.word	0x20000794

080036b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return uwTick;
 80036b8:	4b02      	ldr	r3, [pc, #8]	@ (80036c4 <HAL_GetTick+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	20000794 	.word	0x20000794

080036c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036d0:	f7ff fff0 	bl	80036b4 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e0:	d005      	beq.n	80036ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <HAL_Delay+0x44>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	461a      	mov	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80036ee:	bf00      	nop
 80036f0:	f7ff ffe0 	bl	80036b4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d8f7      	bhi.n	80036f0 <HAL_Delay+0x28>
  {
  }
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	200003ac 	.word	0x200003ac

08003710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800372c:	4013      	ands	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800373c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003742:	4a04      	ldr	r2, [pc, #16]	@ (8003754 <__NVIC_SetPriorityGrouping+0x44>)
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	60d3      	str	r3, [r2, #12]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	e000ed00 	.word	0xe000ed00

08003758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800375c:	4b04      	ldr	r3, [pc, #16]	@ (8003770 <__NVIC_GetPriorityGrouping+0x18>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	0a1b      	lsrs	r3, r3, #8
 8003762:	f003 0307 	and.w	r3, r3, #7
}
 8003766:	4618      	mov	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	bc80      	pop	{r7}
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003782:	2b00      	cmp	r3, #0
 8003784:	db0b      	blt.n	800379e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003786:	79fb      	ldrb	r3, [r7, #7]
 8003788:	f003 021f 	and.w	r2, r3, #31
 800378c:	4906      	ldr	r1, [pc, #24]	@ (80037a8 <__NVIC_EnableIRQ+0x34>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2001      	movs	r0, #1
 8003796:	fa00 f202 	lsl.w	r2, r0, r2
 800379a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	e000e100 	.word	0xe000e100

080037ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	db0a      	blt.n	80037d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	490c      	ldr	r1, [pc, #48]	@ (80037f8 <__NVIC_SetPriority+0x4c>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	440b      	add	r3, r1
 80037d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d4:	e00a      	b.n	80037ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	4908      	ldr	r1, [pc, #32]	@ (80037fc <__NVIC_SetPriority+0x50>)
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	3b04      	subs	r3, #4
 80037e4:	0112      	lsls	r2, r2, #4
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	440b      	add	r3, r1
 80037ea:	761a      	strb	r2, [r3, #24]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100
 80037fc:	e000ed00 	.word	0xe000ed00

08003800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	@ 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f1c3 0307 	rsb	r3, r3, #7
 800381a:	2b04      	cmp	r3, #4
 800381c:	bf28      	it	cs
 800381e:	2304      	movcs	r3, #4
 8003820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	3304      	adds	r3, #4
 8003826:	2b06      	cmp	r3, #6
 8003828:	d902      	bls.n	8003830 <NVIC_EncodePriority+0x30>
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	3b03      	subs	r3, #3
 800382e:	e000      	b.n	8003832 <NVIC_EncodePriority+0x32>
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	401a      	ands	r2, r3
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003848:	f04f 31ff 	mov.w	r1, #4294967295
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	fa01 f303 	lsl.w	r3, r1, r3
 8003852:	43d9      	mvns	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003858:	4313      	orrs	r3, r2
         );
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	@ 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	@ (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	f7ff ff90 	bl	80037ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff2d 	bl	8003710 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d0:	f7ff ff42 	bl	8003758 <__NVIC_GetPriorityGrouping>
 80038d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f7ff ff90 	bl	8003800 <NVIC_EncodePriority>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff5f 	bl	80037ac <__NVIC_SetPriority>
}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff35 	bl	8003774 <__NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffa2 	bl	8003864 <SysTick_Config>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800392c:	b480      	push	{r7}
 800392e:	b08b      	sub	sp, #44	@ 0x2c
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003936:	2300      	movs	r3, #0
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800393a:	2300      	movs	r3, #0
 800393c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393e:	e169      	b.n	8003c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003940:	2201      	movs	r2, #1
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	f040 8158 	bne.w	8003c0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a9a      	ldr	r2, [pc, #616]	@ (8003bcc <HAL_GPIO_Init+0x2a0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d05e      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003968:	4a98      	ldr	r2, [pc, #608]	@ (8003bcc <HAL_GPIO_Init+0x2a0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d875      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 800396e:	4a98      	ldr	r2, [pc, #608]	@ (8003bd0 <HAL_GPIO_Init+0x2a4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d058      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003974:	4a96      	ldr	r2, [pc, #600]	@ (8003bd0 <HAL_GPIO_Init+0x2a4>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d86f      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 800397a:	4a96      	ldr	r2, [pc, #600]	@ (8003bd4 <HAL_GPIO_Init+0x2a8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d052      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003980:	4a94      	ldr	r2, [pc, #592]	@ (8003bd4 <HAL_GPIO_Init+0x2a8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d869      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 8003986:	4a94      	ldr	r2, [pc, #592]	@ (8003bd8 <HAL_GPIO_Init+0x2ac>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d04c      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 800398c:	4a92      	ldr	r2, [pc, #584]	@ (8003bd8 <HAL_GPIO_Init+0x2ac>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d863      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 8003992:	4a92      	ldr	r2, [pc, #584]	@ (8003bdc <HAL_GPIO_Init+0x2b0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d046      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
 8003998:	4a90      	ldr	r2, [pc, #576]	@ (8003bdc <HAL_GPIO_Init+0x2b0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d85d      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 800399e:	2b12      	cmp	r3, #18
 80039a0:	d82a      	bhi.n	80039f8 <HAL_GPIO_Init+0xcc>
 80039a2:	2b12      	cmp	r3, #18
 80039a4:	d859      	bhi.n	8003a5a <HAL_GPIO_Init+0x12e>
 80039a6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <HAL_GPIO_Init+0x80>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	08003a27 	.word	0x08003a27
 80039b0:	08003a01 	.word	0x08003a01
 80039b4:	08003a13 	.word	0x08003a13
 80039b8:	08003a55 	.word	0x08003a55
 80039bc:	08003a5b 	.word	0x08003a5b
 80039c0:	08003a5b 	.word	0x08003a5b
 80039c4:	08003a5b 	.word	0x08003a5b
 80039c8:	08003a5b 	.word	0x08003a5b
 80039cc:	08003a5b 	.word	0x08003a5b
 80039d0:	08003a5b 	.word	0x08003a5b
 80039d4:	08003a5b 	.word	0x08003a5b
 80039d8:	08003a5b 	.word	0x08003a5b
 80039dc:	08003a5b 	.word	0x08003a5b
 80039e0:	08003a5b 	.word	0x08003a5b
 80039e4:	08003a5b 	.word	0x08003a5b
 80039e8:	08003a5b 	.word	0x08003a5b
 80039ec:	08003a5b 	.word	0x08003a5b
 80039f0:	08003a09 	.word	0x08003a09
 80039f4:	08003a1d 	.word	0x08003a1d
 80039f8:	4a79      	ldr	r2, [pc, #484]	@ (8003be0 <HAL_GPIO_Init+0x2b4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d013      	beq.n	8003a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80039fe:	e02c      	b.n	8003a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	623b      	str	r3, [r7, #32]
          break;
 8003a06:	e029      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	623b      	str	r3, [r7, #32]
          break;
 8003a10:	e024      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	3308      	adds	r3, #8
 8003a18:	623b      	str	r3, [r7, #32]
          break;
 8003a1a:	e01f      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	330c      	adds	r3, #12
 8003a22:	623b      	str	r3, [r7, #32]
          break;
 8003a24:	e01a      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a2e:	2304      	movs	r3, #4
 8003a30:	623b      	str	r3, [r7, #32]
          break;
 8003a32:	e013      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d105      	bne.n	8003a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	611a      	str	r2, [r3, #16]
          break;
 8003a46:	e009      	b.n	8003a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a48:	2308      	movs	r3, #8
 8003a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	615a      	str	r2, [r3, #20]
          break;
 8003a52:	e003      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a54:	2300      	movs	r3, #0
 8003a56:	623b      	str	r3, [r7, #32]
          break;
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x130>
          break;
 8003a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2bff      	cmp	r3, #255	@ 0xff
 8003a60:	d801      	bhi.n	8003a66 <HAL_GPIO_Init+0x13a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	e001      	b.n	8003a6a <HAL_GPIO_Init+0x13e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2bff      	cmp	r3, #255	@ 0xff
 8003a70:	d802      	bhi.n	8003a78 <HAL_GPIO_Init+0x14c>
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	e002      	b.n	8003a7e <HAL_GPIO_Init+0x152>
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	3b08      	subs	r3, #8
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	210f      	movs	r1, #15
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	6a39      	ldr	r1, [r7, #32]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80b1 	beq.w	8003c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003aac:	4b4d      	ldr	r3, [pc, #308]	@ (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6193      	str	r3, [r2, #24]
 8003ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8003be4 <HAL_GPIO_Init+0x2b8>)
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003ac4:	4a48      	ldr	r2, [pc, #288]	@ (8003be8 <HAL_GPIO_Init+0x2bc>)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	220f      	movs	r2, #15
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a40      	ldr	r2, [pc, #256]	@ (8003bec <HAL_GPIO_Init+0x2c0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d013      	beq.n	8003b18 <HAL_GPIO_Init+0x1ec>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf0 <HAL_GPIO_Init+0x2c4>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d00d      	beq.n	8003b14 <HAL_GPIO_Init+0x1e8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf4 <HAL_GPIO_Init+0x2c8>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d007      	beq.n	8003b10 <HAL_GPIO_Init+0x1e4>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	@ (8003bf8 <HAL_GPIO_Init+0x2cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d101      	bne.n	8003b0c <HAL_GPIO_Init+0x1e0>
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e006      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	e004      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e002      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <HAL_GPIO_Init+0x1ee>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	f002 0203 	and.w	r2, r2, #3
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	4093      	lsls	r3, r2
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b2a:	492f      	ldr	r1, [pc, #188]	@ (8003be8 <HAL_GPIO_Init+0x2bc>)
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	089b      	lsrs	r3, r3, #2
 8003b30:	3302      	adds	r3, #2
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d006      	beq.n	8003b52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b44:	4b2d      	ldr	r3, [pc, #180]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	492c      	ldr	r1, [pc, #176]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b52:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	4928      	ldr	r1, [pc, #160]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d006      	beq.n	8003b7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b6c:	4b23      	ldr	r3, [pc, #140]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4922      	ldr	r1, [pc, #136]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e006      	b.n	8003b88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b7a:	4b20      	ldr	r3, [pc, #128]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	491e      	ldr	r1, [pc, #120]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b94:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	4918      	ldr	r1, [pc, #96]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ba2:	4b16      	ldr	r3, [pc, #88]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4914      	ldr	r1, [pc, #80]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d021      	beq.n	8003c00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	490e      	ldr	r1, [pc, #56]	@ (8003bfc <HAL_GPIO_Init+0x2d0>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e021      	b.n	8003c0e <HAL_GPIO_Init+0x2e2>
 8003bca:	bf00      	nop
 8003bcc:	10320000 	.word	0x10320000
 8003bd0:	10310000 	.word	0x10310000
 8003bd4:	10220000 	.word	0x10220000
 8003bd8:	10210000 	.word	0x10210000
 8003bdc:	10120000 	.word	0x10120000
 8003be0:	10110000 	.word	0x10110000
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010800 	.word	0x40010800
 8003bf0:	40010c00 	.word	0x40010c00
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40011400 	.word	0x40011400
 8003bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	43db      	mvns	r3, r3
 8003c08:	4909      	ldr	r1, [pc, #36]	@ (8003c30 <HAL_GPIO_Init+0x304>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	3301      	adds	r3, #1
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f47f ae8e 	bne.w	8003940 <HAL_GPIO_Init+0x14>
  }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	372c      	adds	r7, #44	@ 0x2c
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	40010400 	.word	0x40010400

08003c34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	887b      	ldrh	r3, [r7, #2]
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3714      	adds	r7, #20
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	807b      	strh	r3, [r7, #2]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c72:	787b      	ldrb	r3, [r7, #1]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c78:	887a      	ldrh	r2, [r7, #2]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003c7e:	e003      	b.n	8003c88 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003c80:	887b      	ldrh	r3, [r7, #2]
 8003c82:	041a      	lsls	r2, r3, #16
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	611a      	str	r2, [r3, #16]
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr

08003c92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b085      	sub	sp, #20
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	041a      	lsls	r2, r3, #16
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	887b      	ldrh	r3, [r7, #2]
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e12b      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd fe9c 	bl	8001a28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d28:	f001 fc1c 	bl	8005564 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a81      	ldr	r2, [pc, #516]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d807      	bhi.n	8003d48 <HAL_I2C_Init+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a80      	ldr	r2, [pc, #512]	@ (8003f3c <HAL_I2C_Init+0x278>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bf94      	ite	ls
 8003d40:	2301      	movls	r3, #1
 8003d42:	2300      	movhi	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e006      	b.n	8003d56 <HAL_I2C_Init+0x92>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f40 <HAL_I2C_Init+0x27c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0e7      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a78      	ldr	r2, [pc, #480]	@ (8003f44 <HAL_I2C_Init+0x280>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d802      	bhi.n	8003d98 <HAL_I2C_Init+0xd4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e009      	b.n	8003dac <HAL_I2C_Init+0xe8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	4a69      	ldr	r2, [pc, #420]	@ (8003f48 <HAL_I2C_Init+0x284>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	3301      	adds	r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	495c      	ldr	r1, [pc, #368]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d819      	bhi.n	8003e00 <HAL_I2C_Init+0x13c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003de0:	400b      	ands	r3, r1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_I2C_Init+0x138>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e59      	subs	r1, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfa:	e051      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e04f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <HAL_I2C_Init+0x168>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e58      	subs	r0, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e012      	b.n	8003e52 <HAL_I2C_Init+0x18e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	0099      	lsls	r1, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Init+0x196>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <HAL_I2C_Init+0x1bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e58      	subs	r0, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	440b      	add	r3, r1
 8003e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e58      	subs	r0, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	6809      	ldr	r1, [r1, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6911      	ldr	r1, [r2, #16]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	000186a0 	.word	0x000186a0
 8003f3c:	001e847f 	.word	0x001e847f
 8003f40:	003d08ff 	.word	0x003d08ff
 8003f44:	431bde83 	.word	0x431bde83
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	461a      	mov	r2, r3
 8003f58:	460b      	mov	r3, r1
 8003f5a:	817b      	strh	r3, [r7, #10]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff fba8 	bl	80036b4 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	f040 80e0 	bne.w	8004134 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4970      	ldr	r1, [pc, #448]	@ (8004140 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fc9e 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e0d3      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_I2C_Master_Transmit+0x50>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e0cc      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d007      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2221      	movs	r2, #33	@ 0x21
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2210      	movs	r2, #16
 8003fde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	893a      	ldrh	r2, [r7, #8]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4a50      	ldr	r2, [pc, #320]	@ (8004144 <HAL_I2C_Master_Transmit+0x1f8>)
 8004002:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004004:	8979      	ldrh	r1, [r7, #10]
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fb08 	bl	8004620 <I2C_MasterRequestWrite>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e08d      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004030:	e066      	b.n	8004100 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	6a39      	ldr	r1, [r7, #32]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fd5c 	bl	8004af4 <I2C_WaitOnTXEFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00d      	beq.n	800405e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b04      	cmp	r3, #4
 8004048:	d107      	bne.n	800405a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004058:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06b      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b04      	cmp	r3, #4
 800409a:	d11b      	bne.n	80040d4 <HAL_I2C_Master_Transmit+0x188>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d017      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	781a      	ldrb	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6a39      	ldr	r1, [r7, #32]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fd53 	bl	8004b84 <I2C_WaitOnBTFFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e01a      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	d194      	bne.n	8004032 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	e000      	b.n	8004136 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004134:	2302      	movs	r3, #2
  }
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	00100002 	.word	0x00100002
 8004144:	ffff0000 	.word	0xffff0000

08004148 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	@ 0x30
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	461a      	mov	r2, r3
 8004154:	460b      	mov	r3, r1
 8004156:	817b      	strh	r3, [r7, #10]
 8004158:	4613      	mov	r3, r2
 800415a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004160:	f7ff faa8 	bl	80036b4 <HAL_GetTick>
 8004164:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b20      	cmp	r3, #32
 8004170:	f040 824b 	bne.w	800460a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2319      	movs	r3, #25
 800417a:	2201      	movs	r2, #1
 800417c:	497f      	ldr	r1, [pc, #508]	@ (800437c <HAL_I2C_Master_Receive+0x234>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 fb9e 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
 800418c:	e23e      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_I2C_Master_Receive+0x54>
 8004198:	2302      	movs	r3, #2
 800419a:	e237      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d007      	beq.n	80041c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0201 	orr.w	r2, r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2222      	movs	r2, #34	@ 0x22
 80041d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2210      	movs	r2, #16
 80041de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	893a      	ldrh	r2, [r7, #8]
 80041f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4a5f      	ldr	r2, [pc, #380]	@ (8004380 <HAL_I2C_Master_Receive+0x238>)
 8004202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004204:	8979      	ldrh	r1, [r7, #10]
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fa8a 	bl	8004724 <I2C_MasterRequestRead>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e1f8      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421e:	2b00      	cmp	r3, #0
 8004220:	d113      	bne.n	800424a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61fb      	str	r3, [r7, #28]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e1cc      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424e:	2b01      	cmp	r3, #1
 8004250:	d11e      	bne.n	8004290 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004262:	b672      	cpsid	i
}
 8004264:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	61bb      	str	r3, [r7, #24]
 800427a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800428c:	b662      	cpsie	i
}
 800428e:	e035      	b.n	80042fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	2b02      	cmp	r3, #2
 8004296:	d11e      	bne.n	80042d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80042a8:	b672      	cpsid	i
}
 80042aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80042d2:	b662      	cpsie	i
}
 80042d4:	e012      	b.n	80042fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80042fc:	e172      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004302:	2b03      	cmp	r3, #3
 8004304:	f200 811f 	bhi.w	8004546 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430c:	2b01      	cmp	r3, #1
 800430e:	d123      	bne.n	8004358 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004312:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 fc7d 	bl	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e173      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004340:	3b01      	subs	r3, #1
 8004342:	b29a      	uxth	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004356:	e145      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435c:	2b02      	cmp	r3, #2
 800435e:	d152      	bne.n	8004406 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	2200      	movs	r2, #0
 8004368:	4906      	ldr	r1, [pc, #24]	@ (8004384 <HAL_I2C_Master_Receive+0x23c>)
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 faa8 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e148      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
 800437a:	bf00      	nop
 800437c:	00100002 	.word	0x00100002
 8004380:	ffff0000 	.word	0xffff0000
 8004384:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004388:	b672      	cpsid	i
}
 800438a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043ce:	b662      	cpsie	i
}
 80043d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ee:	3b01      	subs	r3, #1
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	3b01      	subs	r3, #1
 80043fe:	b29a      	uxth	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004404:	e0ee      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440c:	2200      	movs	r2, #0
 800440e:	4981      	ldr	r1, [pc, #516]	@ (8004614 <HAL_I2C_Master_Receive+0x4cc>)
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fa55 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0f5      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800442e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004430:	b672      	cpsid	i
}
 8004432:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004466:	4b6c      	ldr	r3, [pc, #432]	@ (8004618 <HAL_I2C_Master_Receive+0x4d0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	08db      	lsrs	r3, r3, #3
 800446c:	4a6b      	ldr	r2, [pc, #428]	@ (800461c <HAL_I2C_Master_Receive+0x4d4>)
 800446e:	fba2 2303 	umull	r2, r3, r2, r3
 8004472:	0a1a      	lsrs	r2, r3, #8
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00da      	lsls	r2, r3, #3
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	3b01      	subs	r3, #1
 8004484:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d118      	bne.n	80044be <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80044ae:	b662      	cpsie	i
}
 80044b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0a6      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b04      	cmp	r3, #4
 80044ca:	d1d9      	bne.n	8004480 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800450e:	b662      	cpsie	i
}
 8004510:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	b29a      	uxth	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004544:	e04e      	b.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 fb62 	bl	8004c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e058      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b04      	cmp	r3, #4
 8004598:	d124      	bne.n	80045e4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d107      	bne.n	80045b2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f47f ae88 	bne.w	80042fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e000      	b.n	800460c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3728      	adds	r7, #40	@ 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	00010004 	.word	0x00010004
 8004618:	200003a4 	.word	0x200003a4
 800461c:	14f8b589 	.word	0x14f8b589

08004620 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	607a      	str	r2, [r7, #4]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	460b      	mov	r3, r1
 800462e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d006      	beq.n	800464a <I2C_MasterRequestWrite+0x2a>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d003      	beq.n	800464a <I2C_MasterRequestWrite+0x2a>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004648:	d108      	bne.n	800465c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e00b      	b.n	8004674 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	2b12      	cmp	r3, #18
 8004662:	d107      	bne.n	8004674 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004672:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f91d 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800469a:	d103      	bne.n	80046a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e035      	b.n	8004714 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046b0:	d108      	bne.n	80046c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80046c0:	611a      	str	r2, [r3, #16]
 80046c2:	e01b      	b.n	80046fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046c4:	897b      	ldrh	r3, [r7, #10]
 80046c6:	11db      	asrs	r3, r3, #7
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0306 	and.w	r3, r3, #6
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f063 030f 	orn	r3, r3, #15
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	490e      	ldr	r1, [pc, #56]	@ (800471c <I2C_MasterRequestWrite+0xfc>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f966 	bl	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e010      	b.n	8004714 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046f2:	897b      	ldrh	r3, [r7, #10]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4907      	ldr	r1, [pc, #28]	@ (8004720 <I2C_MasterRequestWrite+0x100>)
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 f956 	bl	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	00010008 	.word	0x00010008
 8004720:	00010002 	.word	0x00010002

08004724 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b088      	sub	sp, #32
 8004728:	af02      	add	r7, sp, #8
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	607a      	str	r2, [r7, #4]
 800472e:	603b      	str	r3, [r7, #0]
 8004730:	460b      	mov	r3, r1
 8004732:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004748:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2b08      	cmp	r3, #8
 800474e:	d006      	beq.n	800475e <I2C_MasterRequestRead+0x3a>
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d003      	beq.n	800475e <I2C_MasterRequestRead+0x3a>
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800475c:	d108      	bne.n	8004770 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e00b      	b.n	8004788 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	2b11      	cmp	r3, #17
 8004776:	d107      	bne.n	8004788 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004786:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	9300      	str	r3, [sp, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f893 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00d      	beq.n	80047bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047ae:	d103      	bne.n	80047b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e079      	b.n	80048b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047c4:	d108      	bne.n	80047d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	611a      	str	r2, [r3, #16]
 80047d6:	e05f      	b.n	8004898 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047d8:	897b      	ldrh	r3, [r7, #10]
 80047da:	11db      	asrs	r3, r3, #7
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0306 	and.w	r3, r3, #6
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f063 030f 	orn	r3, r3, #15
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	4930      	ldr	r1, [pc, #192]	@ (80048b8 <I2C_MasterRequestRead+0x194>)
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f8dc 	bl	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e054      	b.n	80048b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004806:	897b      	ldrh	r3, [r7, #10]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	4929      	ldr	r1, [pc, #164]	@ (80048bc <I2C_MasterRequestRead+0x198>)
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f8cc 	bl	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e044      	b.n	80048b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800484a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f831 	bl	80048c0 <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004872:	d103      	bne.n	800487c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800487a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e017      	b.n	80048b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	11db      	asrs	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0306 	and.w	r3, r3, #6
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f063 030e 	orn	r3, r3, #14
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4907      	ldr	r1, [pc, #28]	@ (80048bc <I2C_MasterRequestRead+0x198>)
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f888 	bl	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e000      	b.n	80048b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	00010008 	.word	0x00010008
 80048bc:	00010002 	.word	0x00010002

080048c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d0:	e048      	b.n	8004964 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d044      	beq.n	8004964 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe feeb 	bl	80036b4 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d139      	bne.n	8004964 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	0c1b      	lsrs	r3, r3, #16
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10d      	bne.n	8004916 <I2C_WaitOnFlagUntilTimeout+0x56>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	43da      	mvns	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4013      	ands	r3, r2
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf0c      	ite	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	2300      	movne	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	e00c      	b.n	8004930 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	43da      	mvns	r2, r3
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	4013      	ands	r3, r2
 8004922:	b29b      	uxth	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	bf0c      	ite	eq
 8004928:	2301      	moveq	r3, #1
 800492a:	2300      	movne	r3, #0
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	429a      	cmp	r2, r3
 8004934:	d116      	bne.n	8004964 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e023      	b.n	80049ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d10d      	bne.n	800498a <I2C_WaitOnFlagUntilTimeout+0xca>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	43da      	mvns	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4013      	ands	r3, r2
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	461a      	mov	r2, r3
 8004988:	e00c      	b.n	80049a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	43da      	mvns	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	4013      	ands	r3, r2
 8004996:	b29b      	uxth	r3, r3
 8004998:	2b00      	cmp	r3, #0
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	461a      	mov	r2, r3
 80049a4:	79fb      	ldrb	r3, [r7, #7]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d093      	beq.n	80048d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049c2:	e071      	b.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049d2:	d123      	bne.n	8004a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a08:	f043 0204 	orr.w	r2, r3, #4
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e067      	b.n	8004aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d041      	beq.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a24:	f7fe fe46 	bl	80036b4 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d302      	bcc.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d136      	bne.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10c      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e00b      	b.n	8004a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	43da      	mvns	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d016      	beq.n	8004aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e021      	b.n	8004aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d10c      	bne.n	8004acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	43da      	mvns	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e00b      	b.n	8004ae4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f47f af6d 	bne.w	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b00:	e034      	b.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f8e3 	bl	8004cce <I2C_IsAcknowledgeFailed>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e034      	b.n	8004b7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d028      	beq.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b1a:	f7fe fdcb 	bl	80036b4 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d302      	bcc.n	8004b30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d11d      	bne.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3a:	2b80      	cmp	r3, #128	@ 0x80
 8004b3c:	d016      	beq.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e007      	b.n	8004b7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b80      	cmp	r3, #128	@ 0x80
 8004b78:	d1c3      	bne.n	8004b02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b90:	e034      	b.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f89b 	bl	8004cce <I2C_IsAcknowledgeFailed>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e034      	b.n	8004c0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d028      	beq.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004baa:	f7fe fd83 	bl	80036b4 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d302      	bcc.n	8004bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11d      	bne.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d016      	beq.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	f043 0220 	orr.w	r2, r3, #32
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e007      	b.n	8004c0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d1c3      	bne.n	8004b92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c20:	e049      	b.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0310 	and.w	r3, r3, #16
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	d119      	bne.n	8004c64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0210 	mvn.w	r2, #16
 8004c38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e030      	b.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c64:	f7fe fd26 	bl	80036b4 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d302      	bcc.n	8004c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d11d      	bne.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c84:	2b40      	cmp	r3, #64	@ 0x40
 8004c86:	d016      	beq.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e007      	b.n	8004cc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b40      	cmp	r3, #64	@ 0x40
 8004cc2:	d1ae      	bne.n	8004c22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce4:	d11b      	bne.n	8004d1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bc80      	pop	{r7}
 8004d28:	4770      	bx	lr

08004d2a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e036      	b.n	8004daa <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004d44:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6852      	ldr	r2, [r2, #4]
 8004d58:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6892      	ldr	r2, [r2, #8]
 8004d62:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004d64:	f7fe fca6 	bl	80036b4 <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d6a:	e011      	b.n	8004d90 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004d6c:	f7fe fca2 	bl	80036b4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 323c 	movw	r2, #4924	@ 0x133c
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d908      	bls.n	8004d90 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e00c      	b.n	8004daa <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0303 	and.w	r3, r3, #3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e6      	bne.n	8004d6c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004da6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e272      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 8087 	beq.w	8004efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df0:	4b92      	ldr	r3, [pc, #584]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d00c      	beq.n	8004e16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dfc:	4b8f      	ldr	r3, [pc, #572]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 030c 	and.w	r3, r3, #12
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d112      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5e>
 8004e08:	4b8c      	ldr	r3, [pc, #560]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e16:	4b89      	ldr	r3, [pc, #548]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d06c      	beq.n	8004efc <HAL_RCC_OscConfig+0x12c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d168      	bne.n	8004efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e24c      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e36:	d106      	bne.n	8004e46 <HAL_RCC_OscConfig+0x76>
 8004e38:	4b80      	ldr	r3, [pc, #512]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a7f      	ldr	r2, [pc, #508]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	e02e      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCC_OscConfig+0x98>
 8004e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7a      	ldr	r2, [pc, #488]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	4b78      	ldr	r3, [pc, #480]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a77      	ldr	r2, [pc, #476]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	e01d      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCC_OscConfig+0xbc>
 8004e72:	4b72      	ldr	r3, [pc, #456]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a71      	ldr	r2, [pc, #452]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e7c:	6013      	str	r3, [r2, #0]
 8004e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a6e      	ldr	r2, [pc, #440]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e00b      	b.n	8004ea4 <HAL_RCC_OscConfig+0xd4>
 8004e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a6a      	ldr	r2, [pc, #424]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	4b68      	ldr	r3, [pc, #416]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a67      	ldr	r2, [pc, #412]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ea2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d013      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eac:	f7fe fc02 	bl	80036b4 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb4:	f7fe fbfe 	bl	80036b4 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b64      	cmp	r3, #100	@ 0x64
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e200      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec6:	4b5d      	ldr	r3, [pc, #372]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0xe4>
 8004ed2:	e014      	b.n	8004efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed4:	f7fe fbee 	bl	80036b4 <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004edc:	f7fe fbea 	bl	80036b4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b64      	cmp	r3, #100	@ 0x64
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e1ec      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eee:	4b53      	ldr	r3, [pc, #332]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f0      	bne.n	8004edc <HAL_RCC_OscConfig+0x10c>
 8004efa:	e000      	b.n	8004efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d063      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f003 030c 	and.w	r3, r3, #12
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00b      	beq.n	8004f2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f16:	4b49      	ldr	r3, [pc, #292]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d11c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x18c>
 8004f22:	4b46      	ldr	r3, [pc, #280]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d116      	bne.n	8004f5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2e:	4b43      	ldr	r3, [pc, #268]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_RCC_OscConfig+0x176>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e1c0      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f46:	4b3d      	ldr	r3, [pc, #244]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	4939      	ldr	r1, [pc, #228]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	e03a      	b.n	8004fd2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f64:	4b36      	ldr	r3, [pc, #216]	@ (8005040 <HAL_RCC_OscConfig+0x270>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6a:	f7fe fba3 	bl	80036b4 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f72:	f7fe fb9f 	bl	80036b4 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e1a1      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f84:	4b2d      	ldr	r3, [pc, #180]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f90:	4b2a      	ldr	r3, [pc, #168]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4927      	ldr	r1, [pc, #156]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	600b      	str	r3, [r1, #0]
 8004fa4:	e015      	b.n	8004fd2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa6:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <HAL_RCC_OscConfig+0x270>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fe fb82 	bl	80036b4 <HAL_GetTick>
 8004fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fb4:	f7fe fb7e 	bl	80036b4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e180      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d03a      	beq.n	8005054 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d019      	beq.n	800501a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fe6:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fec:	f7fe fb62 	bl	80036b4 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fe fb5e 	bl	80036b4 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e160      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <HAL_RCC_OscConfig+0x26c>)
 8005008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005012:	2001      	movs	r0, #1
 8005014:	f000 faba 	bl	800558c <RCC_Delay>
 8005018:	e01c      	b.n	8005054 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800501a:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <HAL_RCC_OscConfig+0x274>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005020:	f7fe fb48 	bl	80036b4 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005026:	e00f      	b.n	8005048 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005028:	f7fe fb44 	bl	80036b4 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d908      	bls.n	8005048 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e146      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000
 8005040:	42420000 	.word	0x42420000
 8005044:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	4b92      	ldr	r3, [pc, #584]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e9      	bne.n	8005028 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 80a6 	beq.w	80051ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005066:	4b8b      	ldr	r3, [pc, #556]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10d      	bne.n	800508e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005072:	4b88      	ldr	r3, [pc, #544]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	4a87      	ldr	r2, [pc, #540]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800507c:	61d3      	str	r3, [r2, #28]
 800507e:	4b85      	ldr	r3, [pc, #532]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005086:	60bb      	str	r3, [r7, #8]
 8005088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508e:	4b82      	ldr	r3, [pc, #520]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005096:	2b00      	cmp	r3, #0
 8005098:	d118      	bne.n	80050cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800509a:	4b7f      	ldr	r3, [pc, #508]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a7e      	ldr	r2, [pc, #504]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 80050a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050a6:	f7fe fb05 	bl	80036b4 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050ae:	f7fe fb01 	bl	80036b4 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	@ 0x64
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e103      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c0:	4b75      	ldr	r3, [pc, #468]	@ (8005298 <HAL_RCC_OscConfig+0x4c8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0f0      	beq.n	80050ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d106      	bne.n	80050e2 <HAL_RCC_OscConfig+0x312>
 80050d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050da:	f043 0301 	orr.w	r3, r3, #1
 80050de:	6213      	str	r3, [r2, #32]
 80050e0:	e02d      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10c      	bne.n	8005104 <HAL_RCC_OscConfig+0x334>
 80050ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	4a69      	ldr	r2, [pc, #420]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	6213      	str	r3, [r2, #32]
 80050f6:	4b67      	ldr	r3, [pc, #412]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4a66      	ldr	r2, [pc, #408]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	f023 0304 	bic.w	r3, r3, #4
 8005100:	6213      	str	r3, [r2, #32]
 8005102:	e01c      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b05      	cmp	r3, #5
 800510a:	d10c      	bne.n	8005126 <HAL_RCC_OscConfig+0x356>
 800510c:	4b61      	ldr	r3, [pc, #388]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4a60      	ldr	r2, [pc, #384]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005112:	f043 0304 	orr.w	r3, r3, #4
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	4b5e      	ldr	r3, [pc, #376]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	4a5d      	ldr	r2, [pc, #372]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	6213      	str	r3, [r2, #32]
 8005124:	e00b      	b.n	800513e <HAL_RCC_OscConfig+0x36e>
 8005126:	4b5b      	ldr	r3, [pc, #364]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	4a5a      	ldr	r2, [pc, #360]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800512c:	f023 0301 	bic.w	r3, r3, #1
 8005130:	6213      	str	r3, [r2, #32]
 8005132:	4b58      	ldr	r3, [pc, #352]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4a57      	ldr	r2, [pc, #348]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005138:	f023 0304 	bic.w	r3, r3, #4
 800513c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005146:	f7fe fab5 	bl	80036b4 <HAL_GetTick>
 800514a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800514c:	e00a      	b.n	8005164 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514e:	f7fe fab1 	bl	80036b4 <HAL_GetTick>
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515c:	4293      	cmp	r3, r2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e0b1      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005164:	4b4b      	ldr	r3, [pc, #300]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0ee      	beq.n	800514e <HAL_RCC_OscConfig+0x37e>
 8005170:	e014      	b.n	800519c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005172:	f7fe fa9f 	bl	80036b4 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517a:	f7fe fa9b 	bl	80036b4 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e09b      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005190:	4b40      	ldr	r3, [pc, #256]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1ee      	bne.n	800517a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800519c:	7dfb      	ldrb	r3, [r7, #23]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d105      	bne.n	80051ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8087 	beq.w	80052c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b8:	4b36      	ldr	r3, [pc, #216]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f003 030c 	and.w	r3, r3, #12
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d061      	beq.n	8005288 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d146      	bne.n	800525a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051cc:	4b33      	ldr	r3, [pc, #204]	@ (800529c <HAL_RCC_OscConfig+0x4cc>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d2:	f7fe fa6f 	bl	80036b4 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051da:	f7fe fa6b 	bl	80036b4 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e06d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ec:	4b29      	ldr	r3, [pc, #164]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005200:	d108      	bne.n	8005214 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005202:	4b24      	ldr	r3, [pc, #144]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	4921      	ldr	r1, [pc, #132]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005210:	4313      	orrs	r3, r2
 8005212:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005214:	4b1f      	ldr	r3, [pc, #124]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a19      	ldr	r1, [r3, #32]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	430b      	orrs	r3, r1
 8005226:	491b      	ldr	r1, [pc, #108]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 8005228:	4313      	orrs	r3, r2
 800522a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800522c:	4b1b      	ldr	r3, [pc, #108]	@ (800529c <HAL_RCC_OscConfig+0x4cc>)
 800522e:	2201      	movs	r2, #1
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fe fa3f 	bl	80036b4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fe fa3b 	bl	80036b4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e03d      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCC_OscConfig+0x46a>
 8005258:	e035      	b.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b10      	ldr	r3, [pc, #64]	@ (800529c <HAL_RCC_OscConfig+0x4cc>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fe fa28 	bl	80036b4 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005268:	f7fe fa24 	bl	80036b4 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e026      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527a:	4b06      	ldr	r3, [pc, #24]	@ (8005294 <HAL_RCC_OscConfig+0x4c4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x498>
 8005286:	e01e      	b.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d107      	bne.n	80052a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e019      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
 8005294:	40021000 	.word	0x40021000
 8005298:	40007000 	.word	0x40007000
 800529c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <HAL_RCC_OscConfig+0x500>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	429a      	cmp	r2, r3
 80052c0:	d001      	beq.n	80052c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e000      	b.n	80052c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0d0      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d910      	bls.n	8005318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f6:	4b67      	ldr	r3, [pc, #412]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f023 0207 	bic.w	r2, r3, #7
 80052fe:	4965      	ldr	r1, [pc, #404]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4313      	orrs	r3, r2
 8005304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005306:	4b63      	ldr	r3, [pc, #396]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d001      	beq.n	8005318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0b8      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0302 	and.w	r3, r3, #2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d020      	beq.n	8005366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0304 	and.w	r3, r3, #4
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005330:	4b59      	ldr	r3, [pc, #356]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a58      	ldr	r2, [pc, #352]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005336:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800533a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d005      	beq.n	8005354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005348:	4b53      	ldr	r3, [pc, #332]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	4a52      	ldr	r2, [pc, #328]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800534e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005354:	4b50      	ldr	r3, [pc, #320]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	494d      	ldr	r1, [pc, #308]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005362:	4313      	orrs	r3, r2
 8005364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d040      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d107      	bne.n	800538a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537a:	4b47      	ldr	r3, [pc, #284]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d115      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e07f      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d107      	bne.n	80053a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005392:	4b41      	ldr	r3, [pc, #260]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e073      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0302 	and.w	r3, r3, #2
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e06b      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b2:	4b39      	ldr	r3, [pc, #228]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f023 0203 	bic.w	r2, r3, #3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4936      	ldr	r1, [pc, #216]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c4:	f7fe f976 	bl	80036b4 <HAL_GetTick>
 80053c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ca:	e00a      	b.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053cc:	f7fe f972 	bl	80036b4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053da:	4293      	cmp	r3, r2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e053      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 020c 	and.w	r2, r3, #12
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d1eb      	bne.n	80053cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053f4:	4b27      	ldr	r3, [pc, #156]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	683a      	ldr	r2, [r7, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d210      	bcs.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005402:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f023 0207 	bic.w	r2, r3, #7
 800540a:	4922      	ldr	r1, [pc, #136]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	4313      	orrs	r3, r2
 8005410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <HAL_RCC_ClockConfig+0x1c0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e032      	b.n	800548a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005430:	4b19      	ldr	r3, [pc, #100]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	4916      	ldr	r1, [pc, #88]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d009      	beq.n	8005462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800544e:	4b12      	ldr	r3, [pc, #72]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	490e      	ldr	r1, [pc, #56]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005462:	f000 f821 	bl	80054a8 <HAL_RCC_GetSysClockFreq>
 8005466:	4602      	mov	r2, r0
 8005468:	4b0b      	ldr	r3, [pc, #44]	@ (8005498 <HAL_RCC_ClockConfig+0x1c4>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	091b      	lsrs	r3, r3, #4
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	490a      	ldr	r1, [pc, #40]	@ (800549c <HAL_RCC_ClockConfig+0x1c8>)
 8005474:	5ccb      	ldrb	r3, [r1, r3]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <HAL_RCC_ClockConfig+0x1cc>)
 800547c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800547e:	4b09      	ldr	r3, [pc, #36]	@ (80054a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f7fe f8d4 	bl	8003630 <HAL_InitTick>

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40022000 	.word	0x40022000
 8005498:	40021000 	.word	0x40021000
 800549c:	0800bb48 	.word	0x0800bb48
 80054a0:	200003a4 	.word	0x200003a4
 80054a4:	200003a8 	.word	0x200003a8

080054a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	2300      	movs	r3, #0
 80054b4:	60bb      	str	r3, [r7, #8]
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054be:	2300      	movs	r3, #0
 80054c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054c2:	4b1e      	ldr	r3, [pc, #120]	@ (800553c <HAL_RCC_GetSysClockFreq+0x94>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d002      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x30>
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d003      	beq.n	80054de <HAL_RCC_GetSysClockFreq+0x36>
 80054d6:	e027      	b.n	8005528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054d8:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 80054da:	613b      	str	r3, [r7, #16]
      break;
 80054dc:	e027      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	0c9b      	lsrs	r3, r3, #18
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	4a17      	ldr	r2, [pc, #92]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054e8:	5cd3      	ldrb	r3, [r2, r3]
 80054ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d010      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054f6:	4b11      	ldr	r3, [pc, #68]	@ (800553c <HAL_RCC_GetSysClockFreq+0x94>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0c5b      	lsrs	r3, r3, #17
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a0d      	ldr	r2, [pc, #52]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 800550a:	fb03 f202 	mul.w	r2, r3, r2
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	e004      	b.n	8005522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a0c      	ldr	r2, [pc, #48]	@ (800554c <HAL_RCC_GetSysClockFreq+0xa4>)
 800551c:	fb02 f303 	mul.w	r3, r2, r3
 8005520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	613b      	str	r3, [r7, #16]
      break;
 8005526:	e002      	b.n	800552e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005528:	4b05      	ldr	r3, [pc, #20]	@ (8005540 <HAL_RCC_GetSysClockFreq+0x98>)
 800552a:	613b      	str	r3, [r7, #16]
      break;
 800552c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800552e:	693b      	ldr	r3, [r7, #16]
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
 8005540:	007a1200 	.word	0x007a1200
 8005544:	0800bb60 	.word	0x0800bb60
 8005548:	0800bb70 	.word	0x0800bb70
 800554c:	003d0900 	.word	0x003d0900

08005550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005554:	4b02      	ldr	r3, [pc, #8]	@ (8005560 <HAL_RCC_GetHCLKFreq+0x10>)
 8005556:	681b      	ldr	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr
 8005560:	200003a4 	.word	0x200003a4

08005564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005568:	f7ff fff2 	bl	8005550 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	@ (8005584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	@ (8005588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40021000 	.word	0x40021000
 8005588:	0800bb58 	.word	0x0800bb58

0800558c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005594:	4b0a      	ldr	r3, [pc, #40]	@ (80055c0 <RCC_Delay+0x34>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0a      	ldr	r2, [pc, #40]	@ (80055c4 <RCC_Delay+0x38>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	0a5b      	lsrs	r3, r3, #9
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80055a8:	bf00      	nop
  }
  while (Delay --);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	60fa      	str	r2, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f9      	bne.n	80055a8 <RCC_Delay+0x1c>
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	200003a4 	.word	0x200003a4
 80055c4:	10624dd3 	.word	0x10624dd3

080055c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e041      	b.n	800565e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d106      	bne.n	80055f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fd ff4a 	bl	8003488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f000 fd52 	bl	80060b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3708      	adds	r7, #8
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e032      	b.n	80056e6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a18      	ldr	r2, [pc, #96]	@ (80056f0 <HAL_TIM_Base_Start+0x88>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00e      	beq.n	80056b0 <HAL_TIM_Base_Start+0x48>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569a:	d009      	beq.n	80056b0 <HAL_TIM_Base_Start+0x48>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a14      	ldr	r2, [pc, #80]	@ (80056f4 <HAL_TIM_Base_Start+0x8c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d004      	beq.n	80056b0 <HAL_TIM_Base_Start+0x48>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a13      	ldr	r2, [pc, #76]	@ (80056f8 <HAL_TIM_Base_Start+0x90>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d111      	bne.n	80056d4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 0307 	and.w	r3, r3, #7
 80056ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b06      	cmp	r3, #6
 80056c0:	d010      	beq.n	80056e4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d2:	e007      	b.n	80056e4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc80      	pop	{r7}
 80056ee:	4770      	bx	lr
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40000400 	.word	0x40000400
 80056f8:	40000800 	.word	0x40000800

080056fc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10f      	bne.n	8005734 <HAL_TIM_Base_Stop+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	f240 4344 	movw	r3, #1092	@ 0x444
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <HAL_TIM_Base_Stop+0x38>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d001      	beq.n	8005760 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e03a      	b.n	80057d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	@ (80057e0 <HAL_TIM_Base_Start_IT+0x98>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x58>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x58>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a14      	ldr	r2, [pc, #80]	@ (80057e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_Base_Start_IT+0x58>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a13      	ldr	r2, [pc, #76]	@ (80057e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d111      	bne.n	80057c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d010      	beq.n	80057d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c2:	e007      	b.n	80057d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800

080057ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0201 	bic.w	r2, r2, #1
 8005802:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6a1a      	ldr	r2, [r3, #32]
 800580a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10f      	bne.n	8005834 <HAL_TIM_Base_Stop_IT+0x48>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	f240 4344 	movw	r3, #1092	@ 0x444
 800581e:	4013      	ands	r3, r2
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_TIM_Base_Stop_IT+0x48>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	370c      	adds	r7, #12
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e041      	b.n	80058de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f839 	bl	80058e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4619      	mov	r1, r3
 8005886:	4610      	mov	r0, r2
 8005888:	f000 fc12 	bl	80060b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <HAL_TIM_IC_Start+0x1a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800590e:	b2db      	uxtb	r3, r3
 8005910:	e013      	b.n	800593a <HAL_TIM_IC_Start+0x42>
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b04      	cmp	r3, #4
 8005916:	d104      	bne.n	8005922 <HAL_TIM_IC_Start+0x2a>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800591e:	b2db      	uxtb	r3, r3
 8005920:	e00b      	b.n	800593a <HAL_TIM_IC_Start+0x42>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d104      	bne.n	8005932 <HAL_TIM_IC_Start+0x3a>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e003      	b.n	800593a <HAL_TIM_IC_Start+0x42>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005938:	b2db      	uxtb	r3, r3
 800593a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <HAL_TIM_IC_Start+0x54>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005948:	b2db      	uxtb	r3, r3
 800594a:	e013      	b.n	8005974 <HAL_TIM_IC_Start+0x7c>
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d104      	bne.n	800595c <HAL_TIM_IC_Start+0x64>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005958:	b2db      	uxtb	r3, r3
 800595a:	e00b      	b.n	8005974 <HAL_TIM_IC_Start+0x7c>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b08      	cmp	r3, #8
 8005960:	d104      	bne.n	800596c <HAL_TIM_IC_Start+0x74>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e003      	b.n	8005974 <HAL_TIM_IC_Start+0x7c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005972:	b2db      	uxtb	r3, r3
 8005974:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d102      	bne.n	8005982 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d001      	beq.n	8005986 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e06d      	b.n	8005a62 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <HAL_TIM_IC_Start+0x9e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005994:	e013      	b.n	80059be <HAL_TIM_IC_Start+0xc6>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_IC_Start+0xae>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a4:	e00b      	b.n	80059be <HAL_TIM_IC_Start+0xc6>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_IC_Start+0xbe>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b4:	e003      	b.n	80059be <HAL_TIM_IC_Start+0xc6>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d104      	bne.n	80059ce <HAL_TIM_IC_Start+0xd6>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059cc:	e013      	b.n	80059f6 <HAL_TIM_IC_Start+0xfe>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d104      	bne.n	80059de <HAL_TIM_IC_Start+0xe6>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059dc:	e00b      	b.n	80059f6 <HAL_TIM_IC_Start+0xfe>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_IC_Start+0xf6>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059ec:	e003      	b.n	80059f6 <HAL_TIM_IC_Start+0xfe>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2201      	movs	r2, #1
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fd67 	bl	80064d2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a18      	ldr	r2, [pc, #96]	@ (8005a6c <HAL_TIM_IC_Start+0x174>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00e      	beq.n	8005a2c <HAL_TIM_IC_Start+0x134>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a16:	d009      	beq.n	8005a2c <HAL_TIM_IC_Start+0x134>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a14      	ldr	r2, [pc, #80]	@ (8005a70 <HAL_TIM_IC_Start+0x178>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d004      	beq.n	8005a2c <HAL_TIM_IC_Start+0x134>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a13      	ldr	r2, [pc, #76]	@ (8005a74 <HAL_TIM_IC_Start+0x17c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d111      	bne.n	8005a50 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b06      	cmp	r3, #6
 8005a3c:	d010      	beq.n	8005a60 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f042 0201 	orr.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4e:	e007      	b.n	8005a60 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40012c00 	.word	0x40012c00
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800

08005a78 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	6839      	ldr	r1, [r7, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fd21 	bl	80064d2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_TIM_IC_Stop+0x48>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a1a      	ldr	r2, [r3, #32]
 8005aa6:	f240 4344 	movw	r3, #1092	@ 0x444
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <HAL_TIM_IC_Stop+0x48>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0201 	bic.w	r2, r2, #1
 8005abe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <HAL_TIM_IC_Stop+0x58>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ace:	e013      	b.n	8005af8 <HAL_TIM_IC_Stop+0x80>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d104      	bne.n	8005ae0 <HAL_TIM_IC_Stop+0x68>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ade:	e00b      	b.n	8005af8 <HAL_TIM_IC_Stop+0x80>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d104      	bne.n	8005af0 <HAL_TIM_IC_Stop+0x78>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aee:	e003      	b.n	8005af8 <HAL_TIM_IC_Stop+0x80>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <HAL_TIM_IC_Stop+0x90>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b06:	e013      	b.n	8005b30 <HAL_TIM_IC_Stop+0xb8>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d104      	bne.n	8005b18 <HAL_TIM_IC_Stop+0xa0>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b16:	e00b      	b.n	8005b30 <HAL_TIM_IC_Stop+0xb8>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b08      	cmp	r3, #8
 8005b1c:	d104      	bne.n	8005b28 <HAL_TIM_IC_Stop+0xb0>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b26:	e003      	b.n	8005b30 <HAL_TIM_IC_Stop+0xb8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d020      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01b      	beq.n	8005b9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f06f 0202 	mvn.w	r2, #2
 8005b6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fa78 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005b8a:	e005      	b.n	8005b98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fa6b 	bl	8006068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa7a 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d020      	beq.n	8005bea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01b      	beq.n	8005bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f06f 0204 	mvn.w	r2, #4
 8005bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa52 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005bd6:	e005      	b.n	8005be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fa45 	bl	8006068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa54 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d01b      	beq.n	8005c36 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0208 	mvn.w	r2, #8
 8005c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2204      	movs	r2, #4
 8005c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa2c 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005c22:	e005      	b.n	8005c30 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fa1f 	bl	8006068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fa2e 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f003 0310 	and.w	r3, r3, #16
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d020      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01b      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0210 	mvn.w	r2, #16
 8005c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2208      	movs	r2, #8
 8005c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fa06 	bl	800607a <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e005      	b.n	8005c7c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f9f9 	bl	8006068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa08 	bl	800608c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f06f 0201 	mvn.w	r2, #1
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fc fad7 	bl	8002254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fc90 	bl	80065ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f9d8 	bl	800609e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00c      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f003 0320 	and.w	r3, r3, #32
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f06f 0220 	mvn.w	r2, #32
 8005d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fc63 	bl	80065d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b086      	sub	sp, #24
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	60f8      	str	r0, [r7, #12]
 8005d22:	60b9      	str	r1, [r7, #8]
 8005d24:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e088      	b.n	8005e4a <HAL_TIM_IC_ConfigChannel+0x130>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d11b      	bne.n	8005d7e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d56:	f000 fa19 	bl	800618c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 020c 	bic.w	r2, r2, #12
 8005d68:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6999      	ldr	r1, [r3, #24]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	619a      	str	r2, [r3, #24]
 8005d7c:	e060      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d11c      	bne.n	8005dbe <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d94:	f000 fa82 	bl	800629c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005da6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6999      	ldr	r1, [r3, #24]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	021a      	lsls	r2, r3, #8
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	619a      	str	r2, [r3, #24]
 8005dbc:	e040      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d11b      	bne.n	8005dfc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005dd4:	f000 facd 	bl	8006372 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69da      	ldr	r2, [r3, #28]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 020c 	bic.w	r2, r2, #12
 8005de6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	69d9      	ldr	r1, [r3, #28]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	61da      	str	r2, [r3, #28]
 8005dfa:	e021      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b0c      	cmp	r3, #12
 8005e00:	d11c      	bne.n	8005e3c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e12:	f000 fae9 	bl	80063e8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	021a      	lsls	r2, r3, #8
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	61da      	str	r2, [r3, #28]
 8005e3a:	e001      	b.n	8005e40 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d101      	bne.n	8005e6e <HAL_TIM_ConfigClockSource+0x1c>
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e0b4      	b.n	8005fd8 <HAL_TIM_ConfigClockSource+0x186>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2202      	movs	r2, #2
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ea6:	d03e      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0xd4>
 8005ea8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005eac:	f200 8087 	bhi.w	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb4:	f000 8086 	beq.w	8005fc4 <HAL_TIM_ConfigClockSource+0x172>
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ebc:	d87f      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005ebe:	2b70      	cmp	r3, #112	@ 0x70
 8005ec0:	d01a      	beq.n	8005ef8 <HAL_TIM_ConfigClockSource+0xa6>
 8005ec2:	2b70      	cmp	r3, #112	@ 0x70
 8005ec4:	d87b      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005ec6:	2b60      	cmp	r3, #96	@ 0x60
 8005ec8:	d050      	beq.n	8005f6c <HAL_TIM_ConfigClockSource+0x11a>
 8005eca:	2b60      	cmp	r3, #96	@ 0x60
 8005ecc:	d877      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005ece:	2b50      	cmp	r3, #80	@ 0x50
 8005ed0:	d03c      	beq.n	8005f4c <HAL_TIM_ConfigClockSource+0xfa>
 8005ed2:	2b50      	cmp	r3, #80	@ 0x50
 8005ed4:	d873      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005ed6:	2b40      	cmp	r3, #64	@ 0x40
 8005ed8:	d058      	beq.n	8005f8c <HAL_TIM_ConfigClockSource+0x13a>
 8005eda:	2b40      	cmp	r3, #64	@ 0x40
 8005edc:	d86f      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005ede:	2b30      	cmp	r3, #48	@ 0x30
 8005ee0:	d064      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x15a>
 8005ee2:	2b30      	cmp	r3, #48	@ 0x30
 8005ee4:	d86b      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d060      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x15a>
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	d867      	bhi.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d05c      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x15a>
 8005ef2:	2b10      	cmp	r3, #16
 8005ef4:	d05a      	beq.n	8005fac <HAL_TIM_ConfigClockSource+0x15a>
 8005ef6:	e062      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	f000 fac4 	bl	8006494 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005f1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	609a      	str	r2, [r3, #8]
      break;
 8005f24:	e04f      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f36:	f000 faad 	bl	8006494 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f48:	609a      	str	r2, [r3, #8]
      break;
 8005f4a:	e03c      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f000 f971 	bl	8006240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2150      	movs	r1, #80	@ 0x50
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 fa7b 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8005f6a:	e02c      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f000 f9cb 	bl	8006314 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2160      	movs	r1, #96	@ 0x60
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fa6b 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8005f8a:	e01c      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f98:	461a      	mov	r2, r3
 8005f9a:	f000 f951 	bl	8006240 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2140      	movs	r1, #64	@ 0x40
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fa5b 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8005faa:	e00c      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f000 fa52 	bl	8006460 <TIM_ITRx_SetConfig>
      break;
 8005fbc:	e003      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc2:	e000      	b.n	8005fc6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d831      	bhi.n	8006058 <HAL_TIM_ReadCapturedValue+0x78>
 8005ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ffc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006031 	.word	0x08006031
 8006000:	08006059 	.word	0x08006059
 8006004:	08006059 	.word	0x08006059
 8006008:	08006059 	.word	0x08006059
 800600c:	0800603b 	.word	0x0800603b
 8006010:	08006059 	.word	0x08006059
 8006014:	08006059 	.word	0x08006059
 8006018:	08006059 	.word	0x08006059
 800601c:	08006045 	.word	0x08006045
 8006020:	08006059 	.word	0x08006059
 8006024:	08006059 	.word	0x08006059
 8006028:	08006059 	.word	0x08006059
 800602c:	0800604f 	.word	0x0800604f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006036:	60fb      	str	r3, [r7, #12]

      break;
 8006038:	e00f      	b.n	800605a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006040:	60fb      	str	r3, [r7, #12]

      break;
 8006042:	e00a      	b.n	800605a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	60fb      	str	r3, [r7, #12]

      break;
 800604c:	e005      	b.n	800605a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006054:	60fb      	str	r3, [r7, #12]

      break;
 8006056:	e000      	b.n	800605a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006058:	bf00      	nop
  }

  return tmpreg;
 800605a:	68fb      	ldr	r3, [r7, #12]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3714      	adds	r7, #20
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop

08006068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr

0800607a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	bc80      	pop	{r7}
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	bc80      	pop	{r7}
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bc80      	pop	{r7}
 80060ae:	4770      	bx	lr

080060b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a2f      	ldr	r2, [pc, #188]	@ (8006180 <TIM_Base_SetConfig+0xd0>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <TIM_Base_SetConfig+0x30>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060ce:	d007      	beq.n	80060e0 <TIM_Base_SetConfig+0x30>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006184 <TIM_Base_SetConfig+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d003      	beq.n	80060e0 <TIM_Base_SetConfig+0x30>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a2b      	ldr	r2, [pc, #172]	@ (8006188 <TIM_Base_SetConfig+0xd8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d108      	bne.n	80060f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a22      	ldr	r2, [pc, #136]	@ (8006180 <TIM_Base_SetConfig+0xd0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00b      	beq.n	8006112 <TIM_Base_SetConfig+0x62>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006100:	d007      	beq.n	8006112 <TIM_Base_SetConfig+0x62>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1f      	ldr	r2, [pc, #124]	@ (8006184 <TIM_Base_SetConfig+0xd4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d003      	beq.n	8006112 <TIM_Base_SetConfig+0x62>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1e      	ldr	r2, [pc, #120]	@ (8006188 <TIM_Base_SetConfig+0xd8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a0d      	ldr	r2, [pc, #52]	@ (8006180 <TIM_Base_SetConfig+0xd0>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d103      	bne.n	8006158 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]
  }
}
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	bc80      	pop	{r7}
 800617e:	4770      	bx	lr
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800

0800618c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
 8006198:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f023 0201 	bic.w	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006234 <TIM_TI1_SetConfig+0xa8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <TIM_TI1_SetConfig+0x46>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c0:	d007      	beq.n	80061d2 <TIM_TI1_SetConfig+0x46>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <TIM_TI1_SetConfig+0xac>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_TI1_SetConfig+0x46>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4a1b      	ldr	r2, [pc, #108]	@ (800623c <TIM_TI1_SetConfig+0xb0>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d101      	bne.n	80061d6 <TIM_TI1_SetConfig+0x4a>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <TIM_TI1_SetConfig+0x4c>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e003      	b.n	80061f6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f043 0301 	orr.w	r3, r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	b2db      	uxtb	r3, r3
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	4313      	orrs	r3, r2
 8006208:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f023 030a 	bic.w	r3, r3, #10
 8006210:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f003 030a 	and.w	r3, r3, #10
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	621a      	str	r2, [r3, #32]
}
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40000400 	.word	0x40000400
 800623c:	40000800 	.word	0x40000800

08006240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	f023 0201 	bic.w	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800626a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f023 030a 	bic.w	r3, r3, #10
 800627c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	621a      	str	r2, [r3, #32]
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	bc80      	pop	{r7}
 800629a:	4770      	bx	lr

0800629c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800629c:	b480      	push	{r7}
 800629e:	b087      	sub	sp, #28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a1b      	ldr	r3, [r3, #32]
 80062b4:	f023 0210 	bic.w	r2, r3, #16
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	031b      	lsls	r3, r3, #12
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f023 0210 	bic.w	r2, r3, #16
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800633e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	031b      	lsls	r3, r3, #12
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006350:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
 800637e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ae:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063c2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	021b      	lsls	r3, r3, #8
 80063c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	4770      	bx	lr

080063e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006414:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006426:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	031b      	lsls	r3, r3, #12
 800642c:	b29b      	uxth	r3, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	031b      	lsls	r3, r3, #12
 8006440:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr

08006460 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006476:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4313      	orrs	r3, r2
 800647e:	f043 0307 	orr.w	r3, r3, #7
 8006482:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	609a      	str	r2, [r3, #8]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bc80      	pop	{r7}
 80064d0:	4770      	bx	lr

080064d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b087      	sub	sp, #28
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	2201      	movs	r2, #1
 80064e6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	401a      	ands	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1a      	ldr	r2, [r3, #32]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	fa01 f303 	lsl.w	r3, r1, r3
 800650a:	431a      	orrs	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]
}
 8006510:	bf00      	nop
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	bc80      	pop	{r7}
 8006518:	4770      	bx	lr
	...

0800651c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006530:	2302      	movs	r3, #2
 8006532:	e046      	b.n	80065c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a16      	ldr	r2, [pc, #88]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00e      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006580:	d009      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a12      	ldr	r2, [pc, #72]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d004      	beq.n	8006596 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a10      	ldr	r2, [pc, #64]	@ (80065d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10c      	bne.n	80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800659c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800

080065d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr

080065ea <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065ea:	b480      	push	{r7}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bc80      	pop	{r7}
 80065fa:	4770      	bx	lr

080065fc <__cvt>:
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006602:	461d      	mov	r5, r3
 8006604:	bfbb      	ittet	lt
 8006606:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800660a:	461d      	movlt	r5, r3
 800660c:	2300      	movge	r3, #0
 800660e:	232d      	movlt	r3, #45	@ 0x2d
 8006610:	b088      	sub	sp, #32
 8006612:	4614      	mov	r4, r2
 8006614:	bfb8      	it	lt
 8006616:	4614      	movlt	r4, r2
 8006618:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800661a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800661c:	7013      	strb	r3, [r2, #0]
 800661e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006620:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006624:	f023 0820 	bic.w	r8, r3, #32
 8006628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800662c:	d005      	beq.n	800663a <__cvt+0x3e>
 800662e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006632:	d100      	bne.n	8006636 <__cvt+0x3a>
 8006634:	3601      	adds	r6, #1
 8006636:	2302      	movs	r3, #2
 8006638:	e000      	b.n	800663c <__cvt+0x40>
 800663a:	2303      	movs	r3, #3
 800663c:	aa07      	add	r2, sp, #28
 800663e:	9204      	str	r2, [sp, #16]
 8006640:	aa06      	add	r2, sp, #24
 8006642:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006646:	e9cd 3600 	strd	r3, r6, [sp]
 800664a:	4622      	mov	r2, r4
 800664c:	462b      	mov	r3, r5
 800664e:	f001 f88f 	bl	8007770 <_dtoa_r>
 8006652:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006656:	4607      	mov	r7, r0
 8006658:	d119      	bne.n	800668e <__cvt+0x92>
 800665a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800665c:	07db      	lsls	r3, r3, #31
 800665e:	d50e      	bpl.n	800667e <__cvt+0x82>
 8006660:	eb00 0906 	add.w	r9, r0, r6
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	f7fa f99c 	bl	80009a8 <__aeabi_dcmpeq>
 8006670:	b108      	cbz	r0, 8006676 <__cvt+0x7a>
 8006672:	f8cd 901c 	str.w	r9, [sp, #28]
 8006676:	2230      	movs	r2, #48	@ 0x30
 8006678:	9b07      	ldr	r3, [sp, #28]
 800667a:	454b      	cmp	r3, r9
 800667c:	d31e      	bcc.n	80066bc <__cvt+0xc0>
 800667e:	4638      	mov	r0, r7
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006684:	1bdb      	subs	r3, r3, r7
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	b008      	add	sp, #32
 800668a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006692:	eb00 0906 	add.w	r9, r0, r6
 8006696:	d1e5      	bne.n	8006664 <__cvt+0x68>
 8006698:	7803      	ldrb	r3, [r0, #0]
 800669a:	2b30      	cmp	r3, #48	@ 0x30
 800669c:	d10a      	bne.n	80066b4 <__cvt+0xb8>
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7fa f97f 	bl	80009a8 <__aeabi_dcmpeq>
 80066aa:	b918      	cbnz	r0, 80066b4 <__cvt+0xb8>
 80066ac:	f1c6 0601 	rsb	r6, r6, #1
 80066b0:	f8ca 6000 	str.w	r6, [sl]
 80066b4:	f8da 3000 	ldr.w	r3, [sl]
 80066b8:	4499      	add	r9, r3
 80066ba:	e7d3      	b.n	8006664 <__cvt+0x68>
 80066bc:	1c59      	adds	r1, r3, #1
 80066be:	9107      	str	r1, [sp, #28]
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	e7d9      	b.n	8006678 <__cvt+0x7c>

080066c4 <__exponent>:
 80066c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c6:	2900      	cmp	r1, #0
 80066c8:	bfb6      	itet	lt
 80066ca:	232d      	movlt	r3, #45	@ 0x2d
 80066cc:	232b      	movge	r3, #43	@ 0x2b
 80066ce:	4249      	neglt	r1, r1
 80066d0:	2909      	cmp	r1, #9
 80066d2:	7002      	strb	r2, [r0, #0]
 80066d4:	7043      	strb	r3, [r0, #1]
 80066d6:	dd29      	ble.n	800672c <__exponent+0x68>
 80066d8:	f10d 0307 	add.w	r3, sp, #7
 80066dc:	461d      	mov	r5, r3
 80066de:	270a      	movs	r7, #10
 80066e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80066e4:	461a      	mov	r2, r3
 80066e6:	fb07 1416 	mls	r4, r7, r6, r1
 80066ea:	3430      	adds	r4, #48	@ 0x30
 80066ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 80066f0:	460c      	mov	r4, r1
 80066f2:	2c63      	cmp	r4, #99	@ 0x63
 80066f4:	4631      	mov	r1, r6
 80066f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80066fa:	dcf1      	bgt.n	80066e0 <__exponent+0x1c>
 80066fc:	3130      	adds	r1, #48	@ 0x30
 80066fe:	1e94      	subs	r4, r2, #2
 8006700:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006704:	4623      	mov	r3, r4
 8006706:	1c41      	adds	r1, r0, #1
 8006708:	42ab      	cmp	r3, r5
 800670a:	d30a      	bcc.n	8006722 <__exponent+0x5e>
 800670c:	f10d 0309 	add.w	r3, sp, #9
 8006710:	1a9b      	subs	r3, r3, r2
 8006712:	42ac      	cmp	r4, r5
 8006714:	bf88      	it	hi
 8006716:	2300      	movhi	r3, #0
 8006718:	3302      	adds	r3, #2
 800671a:	4403      	add	r3, r0
 800671c:	1a18      	subs	r0, r3, r0
 800671e:	b003      	add	sp, #12
 8006720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006722:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006726:	f801 6f01 	strb.w	r6, [r1, #1]!
 800672a:	e7ed      	b.n	8006708 <__exponent+0x44>
 800672c:	2330      	movs	r3, #48	@ 0x30
 800672e:	3130      	adds	r1, #48	@ 0x30
 8006730:	7083      	strb	r3, [r0, #2]
 8006732:	70c1      	strb	r1, [r0, #3]
 8006734:	1d03      	adds	r3, r0, #4
 8006736:	e7f1      	b.n	800671c <__exponent+0x58>

08006738 <_printf_float>:
 8006738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673c:	b091      	sub	sp, #68	@ 0x44
 800673e:	460c      	mov	r4, r1
 8006740:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006744:	4616      	mov	r6, r2
 8006746:	461f      	mov	r7, r3
 8006748:	4605      	mov	r5, r0
 800674a:	f000 fef1 	bl	8007530 <_localeconv_r>
 800674e:	6803      	ldr	r3, [r0, #0]
 8006750:	4618      	mov	r0, r3
 8006752:	9308      	str	r3, [sp, #32]
 8006754:	f7f9 fcfc 	bl	8000150 <strlen>
 8006758:	2300      	movs	r3, #0
 800675a:	930e      	str	r3, [sp, #56]	@ 0x38
 800675c:	f8d8 3000 	ldr.w	r3, [r8]
 8006760:	9009      	str	r0, [sp, #36]	@ 0x24
 8006762:	3307      	adds	r3, #7
 8006764:	f023 0307 	bic.w	r3, r3, #7
 8006768:	f103 0208 	add.w	r2, r3, #8
 800676c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006770:	f8d4 b000 	ldr.w	fp, [r4]
 8006774:	f8c8 2000 	str.w	r2, [r8]
 8006778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800677c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006782:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006786:	f04f 32ff 	mov.w	r2, #4294967295
 800678a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800678e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006792:	4b9c      	ldr	r3, [pc, #624]	@ (8006a04 <_printf_float+0x2cc>)
 8006794:	f7fa f93a 	bl	8000a0c <__aeabi_dcmpun>
 8006798:	bb70      	cbnz	r0, 80067f8 <_printf_float+0xc0>
 800679a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800679e:	f04f 32ff 	mov.w	r2, #4294967295
 80067a2:	4b98      	ldr	r3, [pc, #608]	@ (8006a04 <_printf_float+0x2cc>)
 80067a4:	f7fa f914 	bl	80009d0 <__aeabi_dcmple>
 80067a8:	bb30      	cbnz	r0, 80067f8 <_printf_float+0xc0>
 80067aa:	2200      	movs	r2, #0
 80067ac:	2300      	movs	r3, #0
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7fa f903 	bl	80009bc <__aeabi_dcmplt>
 80067b6:	b110      	cbz	r0, 80067be <_printf_float+0x86>
 80067b8:	232d      	movs	r3, #45	@ 0x2d
 80067ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067be:	4a92      	ldr	r2, [pc, #584]	@ (8006a08 <_printf_float+0x2d0>)
 80067c0:	4b92      	ldr	r3, [pc, #584]	@ (8006a0c <_printf_float+0x2d4>)
 80067c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067c6:	bf94      	ite	ls
 80067c8:	4690      	movls	r8, r2
 80067ca:	4698      	movhi	r8, r3
 80067cc:	2303      	movs	r3, #3
 80067ce:	f04f 0900 	mov.w	r9, #0
 80067d2:	6123      	str	r3, [r4, #16]
 80067d4:	f02b 0304 	bic.w	r3, fp, #4
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	4633      	mov	r3, r6
 80067dc:	4621      	mov	r1, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	9700      	str	r7, [sp, #0]
 80067e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80067e4:	f000 f9d4 	bl	8006b90 <_printf_common>
 80067e8:	3001      	adds	r0, #1
 80067ea:	f040 8090 	bne.w	800690e <_printf_float+0x1d6>
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295
 80067f2:	b011      	add	sp, #68	@ 0x44
 80067f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f8:	4642      	mov	r2, r8
 80067fa:	464b      	mov	r3, r9
 80067fc:	4640      	mov	r0, r8
 80067fe:	4649      	mov	r1, r9
 8006800:	f7fa f904 	bl	8000a0c <__aeabi_dcmpun>
 8006804:	b148      	cbz	r0, 800681a <_printf_float+0xe2>
 8006806:	464b      	mov	r3, r9
 8006808:	2b00      	cmp	r3, #0
 800680a:	bfb8      	it	lt
 800680c:	232d      	movlt	r3, #45	@ 0x2d
 800680e:	4a80      	ldr	r2, [pc, #512]	@ (8006a10 <_printf_float+0x2d8>)
 8006810:	bfb8      	it	lt
 8006812:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006816:	4b7f      	ldr	r3, [pc, #508]	@ (8006a14 <_printf_float+0x2dc>)
 8006818:	e7d3      	b.n	80067c2 <_printf_float+0x8a>
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	d13f      	bne.n	80068a4 <_printf_float+0x16c>
 8006824:	2306      	movs	r3, #6
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	9206      	str	r2, [sp, #24]
 8006832:	aa0e      	add	r2, sp, #56	@ 0x38
 8006834:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006838:	aa0d      	add	r2, sp, #52	@ 0x34
 800683a:	9203      	str	r2, [sp, #12]
 800683c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006840:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	4642      	mov	r2, r8
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	4628      	mov	r0, r5
 800684c:	464b      	mov	r3, r9
 800684e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006850:	f7ff fed4 	bl	80065fc <__cvt>
 8006854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006856:	4680      	mov	r8, r0
 8006858:	2947      	cmp	r1, #71	@ 0x47
 800685a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800685c:	d128      	bne.n	80068b0 <_printf_float+0x178>
 800685e:	1cc8      	adds	r0, r1, #3
 8006860:	db02      	blt.n	8006868 <_printf_float+0x130>
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	4299      	cmp	r1, r3
 8006866:	dd40      	ble.n	80068ea <_printf_float+0x1b2>
 8006868:	f1aa 0a02 	sub.w	sl, sl, #2
 800686c:	fa5f fa8a 	uxtb.w	sl, sl
 8006870:	4652      	mov	r2, sl
 8006872:	3901      	subs	r1, #1
 8006874:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006878:	910d      	str	r1, [sp, #52]	@ 0x34
 800687a:	f7ff ff23 	bl	80066c4 <__exponent>
 800687e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006880:	4681      	mov	r9, r0
 8006882:	1813      	adds	r3, r2, r0
 8006884:	2a01      	cmp	r2, #1
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	dc02      	bgt.n	8006890 <_printf_float+0x158>
 800688a:	6822      	ldr	r2, [r4, #0]
 800688c:	07d2      	lsls	r2, r2, #31
 800688e:	d501      	bpl.n	8006894 <_printf_float+0x15c>
 8006890:	3301      	adds	r3, #1
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006898:	2b00      	cmp	r3, #0
 800689a:	d09e      	beq.n	80067da <_printf_float+0xa2>
 800689c:	232d      	movs	r3, #45	@ 0x2d
 800689e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a2:	e79a      	b.n	80067da <_printf_float+0xa2>
 80068a4:	2947      	cmp	r1, #71	@ 0x47
 80068a6:	d1bf      	bne.n	8006828 <_printf_float+0xf0>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1bd      	bne.n	8006828 <_printf_float+0xf0>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e7ba      	b.n	8006826 <_printf_float+0xee>
 80068b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068b4:	d9dc      	bls.n	8006870 <_printf_float+0x138>
 80068b6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068ba:	d118      	bne.n	80068ee <_printf_float+0x1b6>
 80068bc:	2900      	cmp	r1, #0
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	dd0b      	ble.n	80068da <_printf_float+0x1a2>
 80068c2:	6121      	str	r1, [r4, #16]
 80068c4:	b913      	cbnz	r3, 80068cc <_printf_float+0x194>
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	07d0      	lsls	r0, r2, #31
 80068ca:	d502      	bpl.n	80068d2 <_printf_float+0x19a>
 80068cc:	3301      	adds	r3, #1
 80068ce:	440b      	add	r3, r1
 80068d0:	6123      	str	r3, [r4, #16]
 80068d2:	f04f 0900 	mov.w	r9, #0
 80068d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068d8:	e7dc      	b.n	8006894 <_printf_float+0x15c>
 80068da:	b913      	cbnz	r3, 80068e2 <_printf_float+0x1aa>
 80068dc:	6822      	ldr	r2, [r4, #0]
 80068de:	07d2      	lsls	r2, r2, #31
 80068e0:	d501      	bpl.n	80068e6 <_printf_float+0x1ae>
 80068e2:	3302      	adds	r3, #2
 80068e4:	e7f4      	b.n	80068d0 <_printf_float+0x198>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e7f2      	b.n	80068d0 <_printf_float+0x198>
 80068ea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068f0:	4299      	cmp	r1, r3
 80068f2:	db05      	blt.n	8006900 <_printf_float+0x1c8>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	6121      	str	r1, [r4, #16]
 80068f8:	07d8      	lsls	r0, r3, #31
 80068fa:	d5ea      	bpl.n	80068d2 <_printf_float+0x19a>
 80068fc:	1c4b      	adds	r3, r1, #1
 80068fe:	e7e7      	b.n	80068d0 <_printf_float+0x198>
 8006900:	2900      	cmp	r1, #0
 8006902:	bfcc      	ite	gt
 8006904:	2201      	movgt	r2, #1
 8006906:	f1c1 0202 	rsble	r2, r1, #2
 800690a:	4413      	add	r3, r2
 800690c:	e7e0      	b.n	80068d0 <_printf_float+0x198>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	055a      	lsls	r2, r3, #21
 8006912:	d407      	bmi.n	8006924 <_printf_float+0x1ec>
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	4642      	mov	r2, r8
 8006918:	4631      	mov	r1, r6
 800691a:	4628      	mov	r0, r5
 800691c:	47b8      	blx	r7
 800691e:	3001      	adds	r0, #1
 8006920:	d12b      	bne.n	800697a <_printf_float+0x242>
 8006922:	e764      	b.n	80067ee <_printf_float+0xb6>
 8006924:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006928:	f240 80dc 	bls.w	8006ae4 <_printf_float+0x3ac>
 800692c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006930:	2200      	movs	r2, #0
 8006932:	2300      	movs	r3, #0
 8006934:	f7fa f838 	bl	80009a8 <__aeabi_dcmpeq>
 8006938:	2800      	cmp	r0, #0
 800693a:	d033      	beq.n	80069a4 <_printf_float+0x26c>
 800693c:	2301      	movs	r3, #1
 800693e:	4631      	mov	r1, r6
 8006940:	4628      	mov	r0, r5
 8006942:	4a35      	ldr	r2, [pc, #212]	@ (8006a18 <_printf_float+0x2e0>)
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f af51 	beq.w	80067ee <_printf_float+0xb6>
 800694c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006950:	4543      	cmp	r3, r8
 8006952:	db02      	blt.n	800695a <_printf_float+0x222>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	07d8      	lsls	r0, r3, #31
 8006958:	d50f      	bpl.n	800697a <_printf_float+0x242>
 800695a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f af42 	beq.w	80067ee <_printf_float+0xb6>
 800696a:	f04f 0900 	mov.w	r9, #0
 800696e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006972:	f104 0a1a 	add.w	sl, r4, #26
 8006976:	45c8      	cmp	r8, r9
 8006978:	dc09      	bgt.n	800698e <_printf_float+0x256>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	079b      	lsls	r3, r3, #30
 800697e:	f100 8102 	bmi.w	8006b86 <_printf_float+0x44e>
 8006982:	68e0      	ldr	r0, [r4, #12]
 8006984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006986:	4298      	cmp	r0, r3
 8006988:	bfb8      	it	lt
 800698a:	4618      	movlt	r0, r3
 800698c:	e731      	b.n	80067f2 <_printf_float+0xba>
 800698e:	2301      	movs	r3, #1
 8006990:	4652      	mov	r2, sl
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	f43f af28 	beq.w	80067ee <_printf_float+0xb6>
 800699e:	f109 0901 	add.w	r9, r9, #1
 80069a2:	e7e8      	b.n	8006976 <_printf_float+0x23e>
 80069a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dc38      	bgt.n	8006a1c <_printf_float+0x2e4>
 80069aa:	2301      	movs	r3, #1
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	4a19      	ldr	r2, [pc, #100]	@ (8006a18 <_printf_float+0x2e0>)
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	f43f af1a 	beq.w	80067ee <_printf_float+0xb6>
 80069ba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80069be:	ea59 0303 	orrs.w	r3, r9, r3
 80069c2:	d102      	bne.n	80069ca <_printf_float+0x292>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	07d9      	lsls	r1, r3, #31
 80069c8:	d5d7      	bpl.n	800697a <_printf_float+0x242>
 80069ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f af0a 	beq.w	80067ee <_printf_float+0xb6>
 80069da:	f04f 0a00 	mov.w	sl, #0
 80069de:	f104 0b1a 	add.w	fp, r4, #26
 80069e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069e4:	425b      	negs	r3, r3
 80069e6:	4553      	cmp	r3, sl
 80069e8:	dc01      	bgt.n	80069ee <_printf_float+0x2b6>
 80069ea:	464b      	mov	r3, r9
 80069ec:	e793      	b.n	8006916 <_printf_float+0x1de>
 80069ee:	2301      	movs	r3, #1
 80069f0:	465a      	mov	r2, fp
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	f43f aef8 	beq.w	80067ee <_printf_float+0xb6>
 80069fe:	f10a 0a01 	add.w	sl, sl, #1
 8006a02:	e7ee      	b.n	80069e2 <_printf_float+0x2aa>
 8006a04:	7fefffff 	.word	0x7fefffff
 8006a08:	0800bb72 	.word	0x0800bb72
 8006a0c:	0800bb76 	.word	0x0800bb76
 8006a10:	0800bb7a 	.word	0x0800bb7a
 8006a14:	0800bb7e 	.word	0x0800bb7e
 8006a18:	0800bb82 	.word	0x0800bb82
 8006a1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a1e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a22:	4553      	cmp	r3, sl
 8006a24:	bfa8      	it	ge
 8006a26:	4653      	movge	r3, sl
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	4699      	mov	r9, r3
 8006a2c:	dc36      	bgt.n	8006a9c <_printf_float+0x364>
 8006a2e:	f04f 0b00 	mov.w	fp, #0
 8006a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a36:	f104 021a 	add.w	r2, r4, #26
 8006a3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a3e:	eba3 0309 	sub.w	r3, r3, r9
 8006a42:	455b      	cmp	r3, fp
 8006a44:	dc31      	bgt.n	8006aaa <_printf_float+0x372>
 8006a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a48:	459a      	cmp	sl, r3
 8006a4a:	dc3a      	bgt.n	8006ac2 <_printf_float+0x38a>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	07da      	lsls	r2, r3, #31
 8006a50:	d437      	bmi.n	8006ac2 <_printf_float+0x38a>
 8006a52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a54:	ebaa 0903 	sub.w	r9, sl, r3
 8006a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a5a:	ebaa 0303 	sub.w	r3, sl, r3
 8006a5e:	4599      	cmp	r9, r3
 8006a60:	bfa8      	it	ge
 8006a62:	4699      	movge	r9, r3
 8006a64:	f1b9 0f00 	cmp.w	r9, #0
 8006a68:	dc33      	bgt.n	8006ad2 <_printf_float+0x39a>
 8006a6a:	f04f 0800 	mov.w	r8, #0
 8006a6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a72:	f104 0b1a 	add.w	fp, r4, #26
 8006a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a78:	ebaa 0303 	sub.w	r3, sl, r3
 8006a7c:	eba3 0309 	sub.w	r3, r3, r9
 8006a80:	4543      	cmp	r3, r8
 8006a82:	f77f af7a 	ble.w	800697a <_printf_float+0x242>
 8006a86:	2301      	movs	r3, #1
 8006a88:	465a      	mov	r2, fp
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f aeac 	beq.w	80067ee <_printf_float+0xb6>
 8006a96:	f108 0801 	add.w	r8, r8, #1
 8006a9a:	e7ec      	b.n	8006a76 <_printf_float+0x33e>
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d1c2      	bne.n	8006a2e <_printf_float+0x2f6>
 8006aa8:	e6a1      	b.n	80067ee <_printf_float+0xb6>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4631      	mov	r1, r6
 8006aae:	4628      	mov	r0, r5
 8006ab0:	920a      	str	r2, [sp, #40]	@ 0x28
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f ae9a 	beq.w	80067ee <_printf_float+0xb6>
 8006aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006abc:	f10b 0b01 	add.w	fp, fp, #1
 8006ac0:	e7bb      	b.n	8006a3a <_printf_float+0x302>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	d1c0      	bne.n	8006a52 <_printf_float+0x31a>
 8006ad0:	e68d      	b.n	80067ee <_printf_float+0xb6>
 8006ad2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	4442      	add	r2, r8
 8006adc:	47b8      	blx	r7
 8006ade:	3001      	adds	r0, #1
 8006ae0:	d1c3      	bne.n	8006a6a <_printf_float+0x332>
 8006ae2:	e684      	b.n	80067ee <_printf_float+0xb6>
 8006ae4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ae8:	f1ba 0f01 	cmp.w	sl, #1
 8006aec:	dc01      	bgt.n	8006af2 <_printf_float+0x3ba>
 8006aee:	07db      	lsls	r3, r3, #31
 8006af0:	d536      	bpl.n	8006b60 <_printf_float+0x428>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4642      	mov	r2, r8
 8006af6:	4631      	mov	r1, r6
 8006af8:	4628      	mov	r0, r5
 8006afa:	47b8      	blx	r7
 8006afc:	3001      	adds	r0, #1
 8006afe:	f43f ae76 	beq.w	80067ee <_printf_float+0xb6>
 8006b02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae6e 	beq.w	80067ee <_printf_float+0xb6>
 8006b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b16:	2200      	movs	r2, #0
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b1e:	f7f9 ff43 	bl	80009a8 <__aeabi_dcmpeq>
 8006b22:	b9c0      	cbnz	r0, 8006b56 <_printf_float+0x41e>
 8006b24:	4653      	mov	r3, sl
 8006b26:	f108 0201 	add.w	r2, r8, #1
 8006b2a:	4631      	mov	r1, r6
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	47b8      	blx	r7
 8006b30:	3001      	adds	r0, #1
 8006b32:	d10c      	bne.n	8006b4e <_printf_float+0x416>
 8006b34:	e65b      	b.n	80067ee <_printf_float+0xb6>
 8006b36:	2301      	movs	r3, #1
 8006b38:	465a      	mov	r2, fp
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	f43f ae54 	beq.w	80067ee <_printf_float+0xb6>
 8006b46:	f108 0801 	add.w	r8, r8, #1
 8006b4a:	45d0      	cmp	r8, sl
 8006b4c:	dbf3      	blt.n	8006b36 <_printf_float+0x3fe>
 8006b4e:	464b      	mov	r3, r9
 8006b50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b54:	e6e0      	b.n	8006918 <_printf_float+0x1e0>
 8006b56:	f04f 0800 	mov.w	r8, #0
 8006b5a:	f104 0b1a 	add.w	fp, r4, #26
 8006b5e:	e7f4      	b.n	8006b4a <_printf_float+0x412>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4642      	mov	r2, r8
 8006b64:	e7e1      	b.n	8006b2a <_printf_float+0x3f2>
 8006b66:	2301      	movs	r3, #1
 8006b68:	464a      	mov	r2, r9
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	47b8      	blx	r7
 8006b70:	3001      	adds	r0, #1
 8006b72:	f43f ae3c 	beq.w	80067ee <_printf_float+0xb6>
 8006b76:	f108 0801 	add.w	r8, r8, #1
 8006b7a:	68e3      	ldr	r3, [r4, #12]
 8006b7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b7e:	1a5b      	subs	r3, r3, r1
 8006b80:	4543      	cmp	r3, r8
 8006b82:	dcf0      	bgt.n	8006b66 <_printf_float+0x42e>
 8006b84:	e6fd      	b.n	8006982 <_printf_float+0x24a>
 8006b86:	f04f 0800 	mov.w	r8, #0
 8006b8a:	f104 0919 	add.w	r9, r4, #25
 8006b8e:	e7f4      	b.n	8006b7a <_printf_float+0x442>

08006b90 <_printf_common>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	4616      	mov	r6, r2
 8006b96:	4698      	mov	r8, r3
 8006b98:	688a      	ldr	r2, [r1, #8]
 8006b9a:	690b      	ldr	r3, [r1, #16]
 8006b9c:	4607      	mov	r7, r0
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	bfb8      	it	lt
 8006ba2:	4613      	movlt	r3, r2
 8006ba4:	6033      	str	r3, [r6, #0]
 8006ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006baa:	460c      	mov	r4, r1
 8006bac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bb0:	b10a      	cbz	r2, 8006bb6 <_printf_common+0x26>
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	0699      	lsls	r1, r3, #26
 8006bba:	bf42      	ittt	mi
 8006bbc:	6833      	ldrmi	r3, [r6, #0]
 8006bbe:	3302      	addmi	r3, #2
 8006bc0:	6033      	strmi	r3, [r6, #0]
 8006bc2:	6825      	ldr	r5, [r4, #0]
 8006bc4:	f015 0506 	ands.w	r5, r5, #6
 8006bc8:	d106      	bne.n	8006bd8 <_printf_common+0x48>
 8006bca:	f104 0a19 	add.w	sl, r4, #25
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	6832      	ldr	r2, [r6, #0]
 8006bd2:	1a9b      	subs	r3, r3, r2
 8006bd4:	42ab      	cmp	r3, r5
 8006bd6:	dc2b      	bgt.n	8006c30 <_printf_common+0xa0>
 8006bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	3b00      	subs	r3, #0
 8006be0:	bf18      	it	ne
 8006be2:	2301      	movne	r3, #1
 8006be4:	0692      	lsls	r2, r2, #26
 8006be6:	d430      	bmi.n	8006c4a <_printf_common+0xba>
 8006be8:	4641      	mov	r1, r8
 8006bea:	4638      	mov	r0, r7
 8006bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bf0:	47c8      	blx	r9
 8006bf2:	3001      	adds	r0, #1
 8006bf4:	d023      	beq.n	8006c3e <_printf_common+0xae>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	6922      	ldr	r2, [r4, #16]
 8006bfa:	f003 0306 	and.w	r3, r3, #6
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf14      	ite	ne
 8006c02:	2500      	movne	r5, #0
 8006c04:	6833      	ldreq	r3, [r6, #0]
 8006c06:	f04f 0600 	mov.w	r6, #0
 8006c0a:	bf08      	it	eq
 8006c0c:	68e5      	ldreq	r5, [r4, #12]
 8006c0e:	f104 041a 	add.w	r4, r4, #26
 8006c12:	bf08      	it	eq
 8006c14:	1aed      	subeq	r5, r5, r3
 8006c16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006c1a:	bf08      	it	eq
 8006c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c20:	4293      	cmp	r3, r2
 8006c22:	bfc4      	itt	gt
 8006c24:	1a9b      	subgt	r3, r3, r2
 8006c26:	18ed      	addgt	r5, r5, r3
 8006c28:	42b5      	cmp	r5, r6
 8006c2a:	d11a      	bne.n	8006c62 <_printf_common+0xd2>
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	e008      	b.n	8006c42 <_printf_common+0xb2>
 8006c30:	2301      	movs	r3, #1
 8006c32:	4652      	mov	r2, sl
 8006c34:	4641      	mov	r1, r8
 8006c36:	4638      	mov	r0, r7
 8006c38:	47c8      	blx	r9
 8006c3a:	3001      	adds	r0, #1
 8006c3c:	d103      	bne.n	8006c46 <_printf_common+0xb6>
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	3501      	adds	r5, #1
 8006c48:	e7c1      	b.n	8006bce <_printf_common+0x3e>
 8006c4a:	2030      	movs	r0, #48	@ 0x30
 8006c4c:	18e1      	adds	r1, r4, r3
 8006c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c58:	4422      	add	r2, r4
 8006c5a:	3302      	adds	r3, #2
 8006c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c60:	e7c2      	b.n	8006be8 <_printf_common+0x58>
 8006c62:	2301      	movs	r3, #1
 8006c64:	4622      	mov	r2, r4
 8006c66:	4641      	mov	r1, r8
 8006c68:	4638      	mov	r0, r7
 8006c6a:	47c8      	blx	r9
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d0e6      	beq.n	8006c3e <_printf_common+0xae>
 8006c70:	3601      	adds	r6, #1
 8006c72:	e7d9      	b.n	8006c28 <_printf_common+0x98>

08006c74 <_printf_i>:
 8006c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c78:	7e0f      	ldrb	r7, [r1, #24]
 8006c7a:	4691      	mov	r9, r2
 8006c7c:	2f78      	cmp	r7, #120	@ 0x78
 8006c7e:	4680      	mov	r8, r0
 8006c80:	460c      	mov	r4, r1
 8006c82:	469a      	mov	sl, r3
 8006c84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c8a:	d807      	bhi.n	8006c9c <_printf_i+0x28>
 8006c8c:	2f62      	cmp	r7, #98	@ 0x62
 8006c8e:	d80a      	bhi.n	8006ca6 <_printf_i+0x32>
 8006c90:	2f00      	cmp	r7, #0
 8006c92:	f000 80d3 	beq.w	8006e3c <_printf_i+0x1c8>
 8006c96:	2f58      	cmp	r7, #88	@ 0x58
 8006c98:	f000 80ba 	beq.w	8006e10 <_printf_i+0x19c>
 8006c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ca4:	e03a      	b.n	8006d1c <_printf_i+0xa8>
 8006ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006caa:	2b15      	cmp	r3, #21
 8006cac:	d8f6      	bhi.n	8006c9c <_printf_i+0x28>
 8006cae:	a101      	add	r1, pc, #4	@ (adr r1, 8006cb4 <_printf_i+0x40>)
 8006cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cb4:	08006d0d 	.word	0x08006d0d
 8006cb8:	08006d21 	.word	0x08006d21
 8006cbc:	08006c9d 	.word	0x08006c9d
 8006cc0:	08006c9d 	.word	0x08006c9d
 8006cc4:	08006c9d 	.word	0x08006c9d
 8006cc8:	08006c9d 	.word	0x08006c9d
 8006ccc:	08006d21 	.word	0x08006d21
 8006cd0:	08006c9d 	.word	0x08006c9d
 8006cd4:	08006c9d 	.word	0x08006c9d
 8006cd8:	08006c9d 	.word	0x08006c9d
 8006cdc:	08006c9d 	.word	0x08006c9d
 8006ce0:	08006e23 	.word	0x08006e23
 8006ce4:	08006d4b 	.word	0x08006d4b
 8006ce8:	08006ddd 	.word	0x08006ddd
 8006cec:	08006c9d 	.word	0x08006c9d
 8006cf0:	08006c9d 	.word	0x08006c9d
 8006cf4:	08006e45 	.word	0x08006e45
 8006cf8:	08006c9d 	.word	0x08006c9d
 8006cfc:	08006d4b 	.word	0x08006d4b
 8006d00:	08006c9d 	.word	0x08006c9d
 8006d04:	08006c9d 	.word	0x08006c9d
 8006d08:	08006de5 	.word	0x08006de5
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	6032      	str	r2, [r6, #0]
 8006d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e09e      	b.n	8006e5e <_printf_i+0x1ea>
 8006d20:	6833      	ldr	r3, [r6, #0]
 8006d22:	6820      	ldr	r0, [r4, #0]
 8006d24:	1d19      	adds	r1, r3, #4
 8006d26:	6031      	str	r1, [r6, #0]
 8006d28:	0606      	lsls	r6, r0, #24
 8006d2a:	d501      	bpl.n	8006d30 <_printf_i+0xbc>
 8006d2c:	681d      	ldr	r5, [r3, #0]
 8006d2e:	e003      	b.n	8006d38 <_printf_i+0xc4>
 8006d30:	0645      	lsls	r5, r0, #25
 8006d32:	d5fb      	bpl.n	8006d2c <_printf_i+0xb8>
 8006d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	da03      	bge.n	8006d44 <_printf_i+0xd0>
 8006d3c:	232d      	movs	r3, #45	@ 0x2d
 8006d3e:	426d      	negs	r5, r5
 8006d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d44:	230a      	movs	r3, #10
 8006d46:	4859      	ldr	r0, [pc, #356]	@ (8006eac <_printf_i+0x238>)
 8006d48:	e011      	b.n	8006d6e <_printf_i+0xfa>
 8006d4a:	6821      	ldr	r1, [r4, #0]
 8006d4c:	6833      	ldr	r3, [r6, #0]
 8006d4e:	0608      	lsls	r0, r1, #24
 8006d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d54:	d402      	bmi.n	8006d5c <_printf_i+0xe8>
 8006d56:	0649      	lsls	r1, r1, #25
 8006d58:	bf48      	it	mi
 8006d5a:	b2ad      	uxthmi	r5, r5
 8006d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d5e:	6033      	str	r3, [r6, #0]
 8006d60:	bf14      	ite	ne
 8006d62:	230a      	movne	r3, #10
 8006d64:	2308      	moveq	r3, #8
 8006d66:	4851      	ldr	r0, [pc, #324]	@ (8006eac <_printf_i+0x238>)
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d6e:	6866      	ldr	r6, [r4, #4]
 8006d70:	2e00      	cmp	r6, #0
 8006d72:	bfa8      	it	ge
 8006d74:	6821      	ldrge	r1, [r4, #0]
 8006d76:	60a6      	str	r6, [r4, #8]
 8006d78:	bfa4      	itt	ge
 8006d7a:	f021 0104 	bicge.w	r1, r1, #4
 8006d7e:	6021      	strge	r1, [r4, #0]
 8006d80:	b90d      	cbnz	r5, 8006d86 <_printf_i+0x112>
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d04b      	beq.n	8006e1e <_printf_i+0x1aa>
 8006d86:	4616      	mov	r6, r2
 8006d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8006d90:	5dc7      	ldrb	r7, [r0, r7]
 8006d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d96:	462f      	mov	r7, r5
 8006d98:	42bb      	cmp	r3, r7
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	d9f4      	bls.n	8006d88 <_printf_i+0x114>
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d10b      	bne.n	8006dba <_printf_i+0x146>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07df      	lsls	r7, r3, #31
 8006da6:	d508      	bpl.n	8006dba <_printf_i+0x146>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	6861      	ldr	r1, [r4, #4]
 8006dac:	4299      	cmp	r1, r3
 8006dae:	bfde      	ittt	le
 8006db0:	2330      	movle	r3, #48	@ 0x30
 8006db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dba:	1b92      	subs	r2, r2, r6
 8006dbc:	6122      	str	r2, [r4, #16]
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f8cd a000 	str.w	sl, [sp]
 8006dc8:	aa03      	add	r2, sp, #12
 8006dca:	f7ff fee1 	bl	8006b90 <_printf_common>
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d14a      	bne.n	8006e68 <_printf_i+0x1f4>
 8006dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd6:	b004      	add	sp, #16
 8006dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	f043 0320 	orr.w	r3, r3, #32
 8006de2:	6023      	str	r3, [r4, #0]
 8006de4:	2778      	movs	r7, #120	@ 0x78
 8006de6:	4832      	ldr	r0, [pc, #200]	@ (8006eb0 <_printf_i+0x23c>)
 8006de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	6831      	ldr	r1, [r6, #0]
 8006df0:	061f      	lsls	r7, r3, #24
 8006df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006df6:	d402      	bmi.n	8006dfe <_printf_i+0x18a>
 8006df8:	065f      	lsls	r7, r3, #25
 8006dfa:	bf48      	it	mi
 8006dfc:	b2ad      	uxthmi	r5, r5
 8006dfe:	6031      	str	r1, [r6, #0]
 8006e00:	07d9      	lsls	r1, r3, #31
 8006e02:	bf44      	itt	mi
 8006e04:	f043 0320 	orrmi.w	r3, r3, #32
 8006e08:	6023      	strmi	r3, [r4, #0]
 8006e0a:	b11d      	cbz	r5, 8006e14 <_printf_i+0x1a0>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	e7ab      	b.n	8006d68 <_printf_i+0xf4>
 8006e10:	4826      	ldr	r0, [pc, #152]	@ (8006eac <_printf_i+0x238>)
 8006e12:	e7e9      	b.n	8006de8 <_printf_i+0x174>
 8006e14:	6823      	ldr	r3, [r4, #0]
 8006e16:	f023 0320 	bic.w	r3, r3, #32
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	e7f6      	b.n	8006e0c <_printf_i+0x198>
 8006e1e:	4616      	mov	r6, r2
 8006e20:	e7bd      	b.n	8006d9e <_printf_i+0x12a>
 8006e22:	6833      	ldr	r3, [r6, #0]
 8006e24:	6825      	ldr	r5, [r4, #0]
 8006e26:	1d18      	adds	r0, r3, #4
 8006e28:	6961      	ldr	r1, [r4, #20]
 8006e2a:	6030      	str	r0, [r6, #0]
 8006e2c:	062e      	lsls	r6, r5, #24
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	d501      	bpl.n	8006e36 <_printf_i+0x1c2>
 8006e32:	6019      	str	r1, [r3, #0]
 8006e34:	e002      	b.n	8006e3c <_printf_i+0x1c8>
 8006e36:	0668      	lsls	r0, r5, #25
 8006e38:	d5fb      	bpl.n	8006e32 <_printf_i+0x1be>
 8006e3a:	8019      	strh	r1, [r3, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	4616      	mov	r6, r2
 8006e40:	6123      	str	r3, [r4, #16]
 8006e42:	e7bc      	b.n	8006dbe <_printf_i+0x14a>
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	2100      	movs	r1, #0
 8006e48:	1d1a      	adds	r2, r3, #4
 8006e4a:	6032      	str	r2, [r6, #0]
 8006e4c:	681e      	ldr	r6, [r3, #0]
 8006e4e:	6862      	ldr	r2, [r4, #4]
 8006e50:	4630      	mov	r0, r6
 8006e52:	f000 fbe4 	bl	800761e <memchr>
 8006e56:	b108      	cbz	r0, 8006e5c <_printf_i+0x1e8>
 8006e58:	1b80      	subs	r0, r0, r6
 8006e5a:	6060      	str	r0, [r4, #4]
 8006e5c:	6863      	ldr	r3, [r4, #4]
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	2300      	movs	r3, #0
 8006e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e66:	e7aa      	b.n	8006dbe <_printf_i+0x14a>
 8006e68:	4632      	mov	r2, r6
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	4640      	mov	r0, r8
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	47d0      	blx	sl
 8006e72:	3001      	adds	r0, #1
 8006e74:	d0ad      	beq.n	8006dd2 <_printf_i+0x15e>
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	079b      	lsls	r3, r3, #30
 8006e7a:	d413      	bmi.n	8006ea4 <_printf_i+0x230>
 8006e7c:	68e0      	ldr	r0, [r4, #12]
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	4298      	cmp	r0, r3
 8006e82:	bfb8      	it	lt
 8006e84:	4618      	movlt	r0, r3
 8006e86:	e7a6      	b.n	8006dd6 <_printf_i+0x162>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	4640      	mov	r0, r8
 8006e90:	47d0      	blx	sl
 8006e92:	3001      	adds	r0, #1
 8006e94:	d09d      	beq.n	8006dd2 <_printf_i+0x15e>
 8006e96:	3501      	adds	r5, #1
 8006e98:	68e3      	ldr	r3, [r4, #12]
 8006e9a:	9903      	ldr	r1, [sp, #12]
 8006e9c:	1a5b      	subs	r3, r3, r1
 8006e9e:	42ab      	cmp	r3, r5
 8006ea0:	dcf2      	bgt.n	8006e88 <_printf_i+0x214>
 8006ea2:	e7eb      	b.n	8006e7c <_printf_i+0x208>
 8006ea4:	2500      	movs	r5, #0
 8006ea6:	f104 0619 	add.w	r6, r4, #25
 8006eaa:	e7f5      	b.n	8006e98 <_printf_i+0x224>
 8006eac:	0800bb84 	.word	0x0800bb84
 8006eb0:	0800bb95 	.word	0x0800bb95

08006eb4 <_scanf_float>:
 8006eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb8:	b087      	sub	sp, #28
 8006eba:	9303      	str	r3, [sp, #12]
 8006ebc:	688b      	ldr	r3, [r1, #8]
 8006ebe:	4617      	mov	r7, r2
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ec6:	bf82      	ittt	hi
 8006ec8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ecc:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ed0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	f04f 0500 	mov.w	r5, #0
 8006eda:	bf88      	it	hi
 8006edc:	608b      	strhi	r3, [r1, #8]
 8006ede:	680b      	ldr	r3, [r1, #0]
 8006ee0:	4680      	mov	r8, r0
 8006ee2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ee6:	f842 3b1c 	str.w	r3, [r2], #28
 8006eea:	460c      	mov	r4, r1
 8006eec:	bf98      	it	ls
 8006eee:	f04f 0b00 	movls.w	fp, #0
 8006ef2:	4616      	mov	r6, r2
 8006ef4:	46aa      	mov	sl, r5
 8006ef6:	46a9      	mov	r9, r5
 8006ef8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006efc:	9201      	str	r2, [sp, #4]
 8006efe:	9502      	str	r5, [sp, #8]
 8006f00:	68a2      	ldr	r2, [r4, #8]
 8006f02:	b152      	cbz	r2, 8006f1a <_scanf_float+0x66>
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f0a:	d865      	bhi.n	8006fd8 <_scanf_float+0x124>
 8006f0c:	2b40      	cmp	r3, #64	@ 0x40
 8006f0e:	d83d      	bhi.n	8006f8c <_scanf_float+0xd8>
 8006f10:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f14:	b2c8      	uxtb	r0, r1
 8006f16:	280e      	cmp	r0, #14
 8006f18:	d93b      	bls.n	8006f92 <_scanf_float+0xde>
 8006f1a:	f1b9 0f00 	cmp.w	r9, #0
 8006f1e:	d003      	beq.n	8006f28 <_scanf_float+0x74>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f26:	6023      	str	r3, [r4, #0]
 8006f28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f2c:	f1ba 0f01 	cmp.w	sl, #1
 8006f30:	f200 8118 	bhi.w	8007164 <_scanf_float+0x2b0>
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	429e      	cmp	r6, r3
 8006f38:	f200 8109 	bhi.w	800714e <_scanf_float+0x29a>
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	b007      	add	sp, #28
 8006f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006f48:	2a0d      	cmp	r2, #13
 8006f4a:	d8e6      	bhi.n	8006f1a <_scanf_float+0x66>
 8006f4c:	a101      	add	r1, pc, #4	@ (adr r1, 8006f54 <_scanf_float+0xa0>)
 8006f4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	0800709b 	.word	0x0800709b
 8006f58:	08006f1b 	.word	0x08006f1b
 8006f5c:	08006f1b 	.word	0x08006f1b
 8006f60:	08006f1b 	.word	0x08006f1b
 8006f64:	080070fb 	.word	0x080070fb
 8006f68:	080070d3 	.word	0x080070d3
 8006f6c:	08006f1b 	.word	0x08006f1b
 8006f70:	08006f1b 	.word	0x08006f1b
 8006f74:	080070a9 	.word	0x080070a9
 8006f78:	08006f1b 	.word	0x08006f1b
 8006f7c:	08006f1b 	.word	0x08006f1b
 8006f80:	08006f1b 	.word	0x08006f1b
 8006f84:	08006f1b 	.word	0x08006f1b
 8006f88:	08007061 	.word	0x08007061
 8006f8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f90:	e7da      	b.n	8006f48 <_scanf_float+0x94>
 8006f92:	290e      	cmp	r1, #14
 8006f94:	d8c1      	bhi.n	8006f1a <_scanf_float+0x66>
 8006f96:	a001      	add	r0, pc, #4	@ (adr r0, 8006f9c <_scanf_float+0xe8>)
 8006f98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f9c:	08007051 	.word	0x08007051
 8006fa0:	08006f1b 	.word	0x08006f1b
 8006fa4:	08007051 	.word	0x08007051
 8006fa8:	080070e7 	.word	0x080070e7
 8006fac:	08006f1b 	.word	0x08006f1b
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08007037 	.word	0x08007037
 8006fb8:	08007037 	.word	0x08007037
 8006fbc:	08007037 	.word	0x08007037
 8006fc0:	08007037 	.word	0x08007037
 8006fc4:	08007037 	.word	0x08007037
 8006fc8:	08007037 	.word	0x08007037
 8006fcc:	08007037 	.word	0x08007037
 8006fd0:	08007037 	.word	0x08007037
 8006fd4:	08007037 	.word	0x08007037
 8006fd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8006fda:	d809      	bhi.n	8006ff0 <_scanf_float+0x13c>
 8006fdc:	2b60      	cmp	r3, #96	@ 0x60
 8006fde:	d8b1      	bhi.n	8006f44 <_scanf_float+0x90>
 8006fe0:	2b54      	cmp	r3, #84	@ 0x54
 8006fe2:	d07b      	beq.n	80070dc <_scanf_float+0x228>
 8006fe4:	2b59      	cmp	r3, #89	@ 0x59
 8006fe6:	d198      	bne.n	8006f1a <_scanf_float+0x66>
 8006fe8:	2d07      	cmp	r5, #7
 8006fea:	d196      	bne.n	8006f1a <_scanf_float+0x66>
 8006fec:	2508      	movs	r5, #8
 8006fee:	e02c      	b.n	800704a <_scanf_float+0x196>
 8006ff0:	2b74      	cmp	r3, #116	@ 0x74
 8006ff2:	d073      	beq.n	80070dc <_scanf_float+0x228>
 8006ff4:	2b79      	cmp	r3, #121	@ 0x79
 8006ff6:	e7f6      	b.n	8006fe6 <_scanf_float+0x132>
 8006ff8:	6821      	ldr	r1, [r4, #0]
 8006ffa:	05c8      	lsls	r0, r1, #23
 8006ffc:	d51b      	bpl.n	8007036 <_scanf_float+0x182>
 8006ffe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007002:	6021      	str	r1, [r4, #0]
 8007004:	f109 0901 	add.w	r9, r9, #1
 8007008:	f1bb 0f00 	cmp.w	fp, #0
 800700c:	d003      	beq.n	8007016 <_scanf_float+0x162>
 800700e:	3201      	adds	r2, #1
 8007010:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007014:	60a2      	str	r2, [r4, #8]
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	3b01      	subs	r3, #1
 800701a:	60a3      	str	r3, [r4, #8]
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	3301      	adds	r3, #1
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	2b00      	cmp	r3, #0
 8007028:	607b      	str	r3, [r7, #4]
 800702a:	f340 8087 	ble.w	800713c <_scanf_float+0x288>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	3301      	adds	r3, #1
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	e764      	b.n	8006f00 <_scanf_float+0x4c>
 8007036:	eb1a 0105 	adds.w	r1, sl, r5
 800703a:	f47f af6e 	bne.w	8006f1a <_scanf_float+0x66>
 800703e:	460d      	mov	r5, r1
 8007040:	468a      	mov	sl, r1
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007048:	6022      	str	r2, [r4, #0]
 800704a:	f806 3b01 	strb.w	r3, [r6], #1
 800704e:	e7e2      	b.n	8007016 <_scanf_float+0x162>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	0610      	lsls	r0, r2, #24
 8007054:	f57f af61 	bpl.w	8006f1a <_scanf_float+0x66>
 8007058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800705c:	6022      	str	r2, [r4, #0]
 800705e:	e7f4      	b.n	800704a <_scanf_float+0x196>
 8007060:	f1ba 0f00 	cmp.w	sl, #0
 8007064:	d10e      	bne.n	8007084 <_scanf_float+0x1d0>
 8007066:	f1b9 0f00 	cmp.w	r9, #0
 800706a:	d10e      	bne.n	800708a <_scanf_float+0x1d6>
 800706c:	6822      	ldr	r2, [r4, #0]
 800706e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007072:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007076:	d108      	bne.n	800708a <_scanf_float+0x1d6>
 8007078:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800707c:	f04f 0a01 	mov.w	sl, #1
 8007080:	6022      	str	r2, [r4, #0]
 8007082:	e7e2      	b.n	800704a <_scanf_float+0x196>
 8007084:	f1ba 0f02 	cmp.w	sl, #2
 8007088:	d055      	beq.n	8007136 <_scanf_float+0x282>
 800708a:	2d01      	cmp	r5, #1
 800708c:	d002      	beq.n	8007094 <_scanf_float+0x1e0>
 800708e:	2d04      	cmp	r5, #4
 8007090:	f47f af43 	bne.w	8006f1a <_scanf_float+0x66>
 8007094:	3501      	adds	r5, #1
 8007096:	b2ed      	uxtb	r5, r5
 8007098:	e7d7      	b.n	800704a <_scanf_float+0x196>
 800709a:	f1ba 0f01 	cmp.w	sl, #1
 800709e:	f47f af3c 	bne.w	8006f1a <_scanf_float+0x66>
 80070a2:	f04f 0a02 	mov.w	sl, #2
 80070a6:	e7d0      	b.n	800704a <_scanf_float+0x196>
 80070a8:	b97d      	cbnz	r5, 80070ca <_scanf_float+0x216>
 80070aa:	f1b9 0f00 	cmp.w	r9, #0
 80070ae:	f47f af37 	bne.w	8006f20 <_scanf_float+0x6c>
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070bc:	f040 8103 	bne.w	80072c6 <_scanf_float+0x412>
 80070c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070c4:	2501      	movs	r5, #1
 80070c6:	6022      	str	r2, [r4, #0]
 80070c8:	e7bf      	b.n	800704a <_scanf_float+0x196>
 80070ca:	2d03      	cmp	r5, #3
 80070cc:	d0e2      	beq.n	8007094 <_scanf_float+0x1e0>
 80070ce:	2d05      	cmp	r5, #5
 80070d0:	e7de      	b.n	8007090 <_scanf_float+0x1dc>
 80070d2:	2d02      	cmp	r5, #2
 80070d4:	f47f af21 	bne.w	8006f1a <_scanf_float+0x66>
 80070d8:	2503      	movs	r5, #3
 80070da:	e7b6      	b.n	800704a <_scanf_float+0x196>
 80070dc:	2d06      	cmp	r5, #6
 80070de:	f47f af1c 	bne.w	8006f1a <_scanf_float+0x66>
 80070e2:	2507      	movs	r5, #7
 80070e4:	e7b1      	b.n	800704a <_scanf_float+0x196>
 80070e6:	6822      	ldr	r2, [r4, #0]
 80070e8:	0591      	lsls	r1, r2, #22
 80070ea:	f57f af16 	bpl.w	8006f1a <_scanf_float+0x66>
 80070ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80070f8:	e7a7      	b.n	800704a <_scanf_float+0x196>
 80070fa:	6822      	ldr	r2, [r4, #0]
 80070fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007100:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007104:	d006      	beq.n	8007114 <_scanf_float+0x260>
 8007106:	0550      	lsls	r0, r2, #21
 8007108:	f57f af07 	bpl.w	8006f1a <_scanf_float+0x66>
 800710c:	f1b9 0f00 	cmp.w	r9, #0
 8007110:	f000 80d9 	beq.w	80072c6 <_scanf_float+0x412>
 8007114:	0591      	lsls	r1, r2, #22
 8007116:	bf58      	it	pl
 8007118:	9902      	ldrpl	r1, [sp, #8]
 800711a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800711e:	bf58      	it	pl
 8007120:	eba9 0101 	subpl.w	r1, r9, r1
 8007124:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007128:	f04f 0900 	mov.w	r9, #0
 800712c:	bf58      	it	pl
 800712e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	e789      	b.n	800704a <_scanf_float+0x196>
 8007136:	f04f 0a03 	mov.w	sl, #3
 800713a:	e786      	b.n	800704a <_scanf_float+0x196>
 800713c:	4639      	mov	r1, r7
 800713e:	4640      	mov	r0, r8
 8007140:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007144:	4798      	blx	r3
 8007146:	2800      	cmp	r0, #0
 8007148:	f43f aeda 	beq.w	8006f00 <_scanf_float+0x4c>
 800714c:	e6e5      	b.n	8006f1a <_scanf_float+0x66>
 800714e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007152:	463a      	mov	r2, r7
 8007154:	4640      	mov	r0, r8
 8007156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800715a:	4798      	blx	r3
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	3b01      	subs	r3, #1
 8007160:	6123      	str	r3, [r4, #16]
 8007162:	e6e7      	b.n	8006f34 <_scanf_float+0x80>
 8007164:	1e6b      	subs	r3, r5, #1
 8007166:	2b06      	cmp	r3, #6
 8007168:	d824      	bhi.n	80071b4 <_scanf_float+0x300>
 800716a:	2d02      	cmp	r5, #2
 800716c:	d836      	bhi.n	80071dc <_scanf_float+0x328>
 800716e:	9b01      	ldr	r3, [sp, #4]
 8007170:	429e      	cmp	r6, r3
 8007172:	f67f aee3 	bls.w	8006f3c <_scanf_float+0x88>
 8007176:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800717a:	463a      	mov	r2, r7
 800717c:	4640      	mov	r0, r8
 800717e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007182:	4798      	blx	r3
 8007184:	6923      	ldr	r3, [r4, #16]
 8007186:	3b01      	subs	r3, #1
 8007188:	6123      	str	r3, [r4, #16]
 800718a:	e7f0      	b.n	800716e <_scanf_float+0x2ba>
 800718c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007190:	463a      	mov	r2, r7
 8007192:	4640      	mov	r0, r8
 8007194:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007198:	4798      	blx	r3
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071a4:	fa5f fa8a 	uxtb.w	sl, sl
 80071a8:	f1ba 0f02 	cmp.w	sl, #2
 80071ac:	d1ee      	bne.n	800718c <_scanf_float+0x2d8>
 80071ae:	3d03      	subs	r5, #3
 80071b0:	b2ed      	uxtb	r5, r5
 80071b2:	1b76      	subs	r6, r6, r5
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	05da      	lsls	r2, r3, #23
 80071b8:	d530      	bpl.n	800721c <_scanf_float+0x368>
 80071ba:	055b      	lsls	r3, r3, #21
 80071bc:	d511      	bpl.n	80071e2 <_scanf_float+0x32e>
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	429e      	cmp	r6, r3
 80071c2:	f67f aebb 	bls.w	8006f3c <_scanf_float+0x88>
 80071c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ca:	463a      	mov	r2, r7
 80071cc:	4640      	mov	r0, r8
 80071ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071d2:	4798      	blx	r3
 80071d4:	6923      	ldr	r3, [r4, #16]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	6123      	str	r3, [r4, #16]
 80071da:	e7f0      	b.n	80071be <_scanf_float+0x30a>
 80071dc:	46aa      	mov	sl, r5
 80071de:	46b3      	mov	fp, r6
 80071e0:	e7de      	b.n	80071a0 <_scanf_float+0x2ec>
 80071e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	2965      	cmp	r1, #101	@ 0x65
 80071ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80071ee:	f106 35ff 	add.w	r5, r6, #4294967295
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	d00c      	beq.n	8007210 <_scanf_float+0x35c>
 80071f6:	2945      	cmp	r1, #69	@ 0x45
 80071f8:	d00a      	beq.n	8007210 <_scanf_float+0x35c>
 80071fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071fe:	463a      	mov	r2, r7
 8007200:	4640      	mov	r0, r8
 8007202:	4798      	blx	r3
 8007204:	6923      	ldr	r3, [r4, #16]
 8007206:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800720a:	3b01      	subs	r3, #1
 800720c:	1eb5      	subs	r5, r6, #2
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	463a      	mov	r2, r7
 8007212:	4640      	mov	r0, r8
 8007214:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007218:	4798      	blx	r3
 800721a:	462e      	mov	r6, r5
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	f012 0210 	ands.w	r2, r2, #16
 8007222:	d001      	beq.n	8007228 <_scanf_float+0x374>
 8007224:	2000      	movs	r0, #0
 8007226:	e68a      	b.n	8006f3e <_scanf_float+0x8a>
 8007228:	7032      	strb	r2, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007234:	d11c      	bne.n	8007270 <_scanf_float+0x3bc>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	454b      	cmp	r3, r9
 800723a:	eba3 0209 	sub.w	r2, r3, r9
 800723e:	d123      	bne.n	8007288 <_scanf_float+0x3d4>
 8007240:	2200      	movs	r2, #0
 8007242:	4640      	mov	r0, r8
 8007244:	9901      	ldr	r1, [sp, #4]
 8007246:	f002 fbfb 	bl	8009a40 <_strtod_r>
 800724a:	9b03      	ldr	r3, [sp, #12]
 800724c:	6825      	ldr	r5, [r4, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f015 0f02 	tst.w	r5, #2
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	f103 0204 	add.w	r2, r3, #4
 800725c:	d01f      	beq.n	800729e <_scanf_float+0x3ea>
 800725e:	9903      	ldr	r1, [sp, #12]
 8007260:	600a      	str	r2, [r1, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	e9c3 6700 	strd	r6, r7, [r3]
 8007268:	68e3      	ldr	r3, [r4, #12]
 800726a:	3301      	adds	r3, #1
 800726c:	60e3      	str	r3, [r4, #12]
 800726e:	e7d9      	b.n	8007224 <_scanf_float+0x370>
 8007270:	9b04      	ldr	r3, [sp, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0e4      	beq.n	8007240 <_scanf_float+0x38c>
 8007276:	9905      	ldr	r1, [sp, #20]
 8007278:	230a      	movs	r3, #10
 800727a:	4640      	mov	r0, r8
 800727c:	3101      	adds	r1, #1
 800727e:	f002 fc5f 	bl	8009b40 <_strtol_r>
 8007282:	9b04      	ldr	r3, [sp, #16]
 8007284:	9e05      	ldr	r6, [sp, #20]
 8007286:	1ac2      	subs	r2, r0, r3
 8007288:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800728c:	429e      	cmp	r6, r3
 800728e:	bf28      	it	cs
 8007290:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007294:	4630      	mov	r0, r6
 8007296:	490d      	ldr	r1, [pc, #52]	@ (80072cc <_scanf_float+0x418>)
 8007298:	f000 f8de 	bl	8007458 <siprintf>
 800729c:	e7d0      	b.n	8007240 <_scanf_float+0x38c>
 800729e:	076d      	lsls	r5, r5, #29
 80072a0:	d4dd      	bmi.n	800725e <_scanf_float+0x3aa>
 80072a2:	9d03      	ldr	r5, [sp, #12]
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	681d      	ldr	r5, [r3, #0]
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	f7f9 fbae 	bl	8000a0c <__aeabi_dcmpun>
 80072b0:	b120      	cbz	r0, 80072bc <_scanf_float+0x408>
 80072b2:	4807      	ldr	r0, [pc, #28]	@ (80072d0 <_scanf_float+0x41c>)
 80072b4:	f000 f9d0 	bl	8007658 <nanf>
 80072b8:	6028      	str	r0, [r5, #0]
 80072ba:	e7d5      	b.n	8007268 <_scanf_float+0x3b4>
 80072bc:	4630      	mov	r0, r6
 80072be:	4639      	mov	r1, r7
 80072c0:	f7f9 fc02 	bl	8000ac8 <__aeabi_d2f>
 80072c4:	e7f8      	b.n	80072b8 <_scanf_float+0x404>
 80072c6:	f04f 0900 	mov.w	r9, #0
 80072ca:	e62d      	b.n	8006f28 <_scanf_float+0x74>
 80072cc:	0800bba6 	.word	0x0800bba6
 80072d0:	0800bf3d 	.word	0x0800bf3d

080072d4 <std>:
 80072d4:	2300      	movs	r3, #0
 80072d6:	b510      	push	{r4, lr}
 80072d8:	4604      	mov	r4, r0
 80072da:	e9c0 3300 	strd	r3, r3, [r0]
 80072de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072e2:	6083      	str	r3, [r0, #8]
 80072e4:	8181      	strh	r1, [r0, #12]
 80072e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80072e8:	81c2      	strh	r2, [r0, #14]
 80072ea:	6183      	str	r3, [r0, #24]
 80072ec:	4619      	mov	r1, r3
 80072ee:	2208      	movs	r2, #8
 80072f0:	305c      	adds	r0, #92	@ 0x5c
 80072f2:	f000 f914 	bl	800751e <memset>
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <std+0x58>)
 80072f8:	6224      	str	r4, [r4, #32]
 80072fa:	6263      	str	r3, [r4, #36]	@ 0x24
 80072fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007330 <std+0x5c>)
 80072fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007300:	4b0c      	ldr	r3, [pc, #48]	@ (8007334 <std+0x60>)
 8007302:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007304:	4b0c      	ldr	r3, [pc, #48]	@ (8007338 <std+0x64>)
 8007306:	6323      	str	r3, [r4, #48]	@ 0x30
 8007308:	4b0c      	ldr	r3, [pc, #48]	@ (800733c <std+0x68>)
 800730a:	429c      	cmp	r4, r3
 800730c:	d006      	beq.n	800731c <std+0x48>
 800730e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007312:	4294      	cmp	r4, r2
 8007314:	d002      	beq.n	800731c <std+0x48>
 8007316:	33d0      	adds	r3, #208	@ 0xd0
 8007318:	429c      	cmp	r4, r3
 800731a:	d105      	bne.n	8007328 <std+0x54>
 800731c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007324:	f000 b978 	b.w	8007618 <__retarget_lock_init_recursive>
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	08007499 	.word	0x08007499
 8007330:	080074bb 	.word	0x080074bb
 8007334:	080074f3 	.word	0x080074f3
 8007338:	08007517 	.word	0x08007517
 800733c:	20000798 	.word	0x20000798

08007340 <stdio_exit_handler>:
 8007340:	4a02      	ldr	r2, [pc, #8]	@ (800734c <stdio_exit_handler+0xc>)
 8007342:	4903      	ldr	r1, [pc, #12]	@ (8007350 <stdio_exit_handler+0x10>)
 8007344:	4803      	ldr	r0, [pc, #12]	@ (8007354 <stdio_exit_handler+0x14>)
 8007346:	f000 b869 	b.w	800741c <_fwalk_sglue>
 800734a:	bf00      	nop
 800734c:	200003b0 	.word	0x200003b0
 8007350:	08009ef5 	.word	0x08009ef5
 8007354:	200003c0 	.word	0x200003c0

08007358 <cleanup_stdio>:
 8007358:	6841      	ldr	r1, [r0, #4]
 800735a:	4b0c      	ldr	r3, [pc, #48]	@ (800738c <cleanup_stdio+0x34>)
 800735c:	b510      	push	{r4, lr}
 800735e:	4299      	cmp	r1, r3
 8007360:	4604      	mov	r4, r0
 8007362:	d001      	beq.n	8007368 <cleanup_stdio+0x10>
 8007364:	f002 fdc6 	bl	8009ef4 <_fflush_r>
 8007368:	68a1      	ldr	r1, [r4, #8]
 800736a:	4b09      	ldr	r3, [pc, #36]	@ (8007390 <cleanup_stdio+0x38>)
 800736c:	4299      	cmp	r1, r3
 800736e:	d002      	beq.n	8007376 <cleanup_stdio+0x1e>
 8007370:	4620      	mov	r0, r4
 8007372:	f002 fdbf 	bl	8009ef4 <_fflush_r>
 8007376:	68e1      	ldr	r1, [r4, #12]
 8007378:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <cleanup_stdio+0x3c>)
 800737a:	4299      	cmp	r1, r3
 800737c:	d004      	beq.n	8007388 <cleanup_stdio+0x30>
 800737e:	4620      	mov	r0, r4
 8007380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007384:	f002 bdb6 	b.w	8009ef4 <_fflush_r>
 8007388:	bd10      	pop	{r4, pc}
 800738a:	bf00      	nop
 800738c:	20000798 	.word	0x20000798
 8007390:	20000800 	.word	0x20000800
 8007394:	20000868 	.word	0x20000868

08007398 <global_stdio_init.part.0>:
 8007398:	b510      	push	{r4, lr}
 800739a:	4b0b      	ldr	r3, [pc, #44]	@ (80073c8 <global_stdio_init.part.0+0x30>)
 800739c:	4c0b      	ldr	r4, [pc, #44]	@ (80073cc <global_stdio_init.part.0+0x34>)
 800739e:	4a0c      	ldr	r2, [pc, #48]	@ (80073d0 <global_stdio_init.part.0+0x38>)
 80073a0:	4620      	mov	r0, r4
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	2104      	movs	r1, #4
 80073a6:	2200      	movs	r2, #0
 80073a8:	f7ff ff94 	bl	80072d4 <std>
 80073ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073b0:	2201      	movs	r2, #1
 80073b2:	2109      	movs	r1, #9
 80073b4:	f7ff ff8e 	bl	80072d4 <std>
 80073b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073bc:	2202      	movs	r2, #2
 80073be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c2:	2112      	movs	r1, #18
 80073c4:	f7ff bf86 	b.w	80072d4 <std>
 80073c8:	200008d0 	.word	0x200008d0
 80073cc:	20000798 	.word	0x20000798
 80073d0:	08007341 	.word	0x08007341

080073d4 <__sfp_lock_acquire>:
 80073d4:	4801      	ldr	r0, [pc, #4]	@ (80073dc <__sfp_lock_acquire+0x8>)
 80073d6:	f000 b920 	b.w	800761a <__retarget_lock_acquire_recursive>
 80073da:	bf00      	nop
 80073dc:	200008d9 	.word	0x200008d9

080073e0 <__sfp_lock_release>:
 80073e0:	4801      	ldr	r0, [pc, #4]	@ (80073e8 <__sfp_lock_release+0x8>)
 80073e2:	f000 b91b 	b.w	800761c <__retarget_lock_release_recursive>
 80073e6:	bf00      	nop
 80073e8:	200008d9 	.word	0x200008d9

080073ec <__sinit>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	4604      	mov	r4, r0
 80073f0:	f7ff fff0 	bl	80073d4 <__sfp_lock_acquire>
 80073f4:	6a23      	ldr	r3, [r4, #32]
 80073f6:	b11b      	cbz	r3, 8007400 <__sinit+0x14>
 80073f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073fc:	f7ff bff0 	b.w	80073e0 <__sfp_lock_release>
 8007400:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <__sinit+0x28>)
 8007402:	6223      	str	r3, [r4, #32]
 8007404:	4b04      	ldr	r3, [pc, #16]	@ (8007418 <__sinit+0x2c>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f5      	bne.n	80073f8 <__sinit+0xc>
 800740c:	f7ff ffc4 	bl	8007398 <global_stdio_init.part.0>
 8007410:	e7f2      	b.n	80073f8 <__sinit+0xc>
 8007412:	bf00      	nop
 8007414:	08007359 	.word	0x08007359
 8007418:	200008d0 	.word	0x200008d0

0800741c <_fwalk_sglue>:
 800741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007420:	4607      	mov	r7, r0
 8007422:	4688      	mov	r8, r1
 8007424:	4614      	mov	r4, r2
 8007426:	2600      	movs	r6, #0
 8007428:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800742c:	f1b9 0901 	subs.w	r9, r9, #1
 8007430:	d505      	bpl.n	800743e <_fwalk_sglue+0x22>
 8007432:	6824      	ldr	r4, [r4, #0]
 8007434:	2c00      	cmp	r4, #0
 8007436:	d1f7      	bne.n	8007428 <_fwalk_sglue+0xc>
 8007438:	4630      	mov	r0, r6
 800743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d907      	bls.n	8007454 <_fwalk_sglue+0x38>
 8007444:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007448:	3301      	adds	r3, #1
 800744a:	d003      	beq.n	8007454 <_fwalk_sglue+0x38>
 800744c:	4629      	mov	r1, r5
 800744e:	4638      	mov	r0, r7
 8007450:	47c0      	blx	r8
 8007452:	4306      	orrs	r6, r0
 8007454:	3568      	adds	r5, #104	@ 0x68
 8007456:	e7e9      	b.n	800742c <_fwalk_sglue+0x10>

08007458 <siprintf>:
 8007458:	b40e      	push	{r1, r2, r3}
 800745a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800745e:	b500      	push	{lr}
 8007460:	b09c      	sub	sp, #112	@ 0x70
 8007462:	ab1d      	add	r3, sp, #116	@ 0x74
 8007464:	9002      	str	r0, [sp, #8]
 8007466:	9006      	str	r0, [sp, #24]
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	9104      	str	r1, [sp, #16]
 800746c:	4808      	ldr	r0, [pc, #32]	@ (8007490 <siprintf+0x38>)
 800746e:	4909      	ldr	r1, [pc, #36]	@ (8007494 <siprintf+0x3c>)
 8007470:	f853 2b04 	ldr.w	r2, [r3], #4
 8007474:	9105      	str	r1, [sp, #20]
 8007476:	6800      	ldr	r0, [r0, #0]
 8007478:	a902      	add	r1, sp, #8
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	f002 fbbe 	bl	8009bfc <_svfiprintf_r>
 8007480:	2200      	movs	r2, #0
 8007482:	9b02      	ldr	r3, [sp, #8]
 8007484:	701a      	strb	r2, [r3, #0]
 8007486:	b01c      	add	sp, #112	@ 0x70
 8007488:	f85d eb04 	ldr.w	lr, [sp], #4
 800748c:	b003      	add	sp, #12
 800748e:	4770      	bx	lr
 8007490:	200003bc 	.word	0x200003bc
 8007494:	ffff0208 	.word	0xffff0208

08007498 <__sread>:
 8007498:	b510      	push	{r4, lr}
 800749a:	460c      	mov	r4, r1
 800749c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a0:	f000 f86c 	bl	800757c <_read_r>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	bfab      	itete	ge
 80074a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074aa:	89a3      	ldrhlt	r3, [r4, #12]
 80074ac:	181b      	addge	r3, r3, r0
 80074ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074b2:	bfac      	ite	ge
 80074b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074b6:	81a3      	strhlt	r3, [r4, #12]
 80074b8:	bd10      	pop	{r4, pc}

080074ba <__swrite>:
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	461f      	mov	r7, r3
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	4605      	mov	r5, r0
 80074c4:	05db      	lsls	r3, r3, #23
 80074c6:	460c      	mov	r4, r1
 80074c8:	4616      	mov	r6, r2
 80074ca:	d505      	bpl.n	80074d8 <__swrite+0x1e>
 80074cc:	2302      	movs	r3, #2
 80074ce:	2200      	movs	r2, #0
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	f000 f840 	bl	8007558 <_lseek_r>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	4632      	mov	r2, r6
 80074dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074e0:	81a3      	strh	r3, [r4, #12]
 80074e2:	4628      	mov	r0, r5
 80074e4:	463b      	mov	r3, r7
 80074e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ee:	f000 b857 	b.w	80075a0 <_write_r>

080074f2 <__sseek>:
 80074f2:	b510      	push	{r4, lr}
 80074f4:	460c      	mov	r4, r1
 80074f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fa:	f000 f82d 	bl	8007558 <_lseek_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	bf15      	itete	ne
 8007504:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007506:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800750a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800750e:	81a3      	strheq	r3, [r4, #12]
 8007510:	bf18      	it	ne
 8007512:	81a3      	strhne	r3, [r4, #12]
 8007514:	bd10      	pop	{r4, pc}

08007516 <__sclose>:
 8007516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800751a:	f000 b80d 	b.w	8007538 <_close_r>

0800751e <memset>:
 800751e:	4603      	mov	r3, r0
 8007520:	4402      	add	r2, r0
 8007522:	4293      	cmp	r3, r2
 8007524:	d100      	bne.n	8007528 <memset+0xa>
 8007526:	4770      	bx	lr
 8007528:	f803 1b01 	strb.w	r1, [r3], #1
 800752c:	e7f9      	b.n	8007522 <memset+0x4>
	...

08007530 <_localeconv_r>:
 8007530:	4800      	ldr	r0, [pc, #0]	@ (8007534 <_localeconv_r+0x4>)
 8007532:	4770      	bx	lr
 8007534:	200004fc 	.word	0x200004fc

08007538 <_close_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	2300      	movs	r3, #0
 800753c:	4d05      	ldr	r5, [pc, #20]	@ (8007554 <_close_r+0x1c>)
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7fb fdd9 	bl	80030fa <_close>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_close_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_close_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	200008d4 	.word	0x200008d4

08007558 <_lseek_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	2200      	movs	r2, #0
 8007562:	4d05      	ldr	r5, [pc, #20]	@ (8007578 <_lseek_r+0x20>)
 8007564:	602a      	str	r2, [r5, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	f7fb fdeb 	bl	8003142 <_lseek>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	d102      	bne.n	8007576 <_lseek_r+0x1e>
 8007570:	682b      	ldr	r3, [r5, #0]
 8007572:	b103      	cbz	r3, 8007576 <_lseek_r+0x1e>
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	bd38      	pop	{r3, r4, r5, pc}
 8007578:	200008d4 	.word	0x200008d4

0800757c <_read_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	4611      	mov	r1, r2
 8007584:	2200      	movs	r2, #0
 8007586:	4d05      	ldr	r5, [pc, #20]	@ (800759c <_read_r+0x20>)
 8007588:	602a      	str	r2, [r5, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	f7fb fd7c 	bl	8003088 <_read>
 8007590:	1c43      	adds	r3, r0, #1
 8007592:	d102      	bne.n	800759a <_read_r+0x1e>
 8007594:	682b      	ldr	r3, [r5, #0]
 8007596:	b103      	cbz	r3, 800759a <_read_r+0x1e>
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	bd38      	pop	{r3, r4, r5, pc}
 800759c:	200008d4 	.word	0x200008d4

080075a0 <_write_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4604      	mov	r4, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	4611      	mov	r1, r2
 80075a8:	2200      	movs	r2, #0
 80075aa:	4d05      	ldr	r5, [pc, #20]	@ (80075c0 <_write_r+0x20>)
 80075ac:	602a      	str	r2, [r5, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	f7fb fd87 	bl	80030c2 <_write>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_write_r+0x1e>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_write_r+0x1e>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	200008d4 	.word	0x200008d4

080075c4 <__errno>:
 80075c4:	4b01      	ldr	r3, [pc, #4]	@ (80075cc <__errno+0x8>)
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	200003bc 	.word	0x200003bc

080075d0 <__libc_init_array>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	2600      	movs	r6, #0
 80075d4:	4d0c      	ldr	r5, [pc, #48]	@ (8007608 <__libc_init_array+0x38>)
 80075d6:	4c0d      	ldr	r4, [pc, #52]	@ (800760c <__libc_init_array+0x3c>)
 80075d8:	1b64      	subs	r4, r4, r5
 80075da:	10a4      	asrs	r4, r4, #2
 80075dc:	42a6      	cmp	r6, r4
 80075de:	d109      	bne.n	80075f4 <__libc_init_array+0x24>
 80075e0:	f004 fa98 	bl	800bb14 <_init>
 80075e4:	2600      	movs	r6, #0
 80075e6:	4d0a      	ldr	r5, [pc, #40]	@ (8007610 <__libc_init_array+0x40>)
 80075e8:	4c0a      	ldr	r4, [pc, #40]	@ (8007614 <__libc_init_array+0x44>)
 80075ea:	1b64      	subs	r4, r4, r5
 80075ec:	10a4      	asrs	r4, r4, #2
 80075ee:	42a6      	cmp	r6, r4
 80075f0:	d105      	bne.n	80075fe <__libc_init_array+0x2e>
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075f8:	4798      	blx	r3
 80075fa:	3601      	adds	r6, #1
 80075fc:	e7ee      	b.n	80075dc <__libc_init_array+0xc>
 80075fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007602:	4798      	blx	r3
 8007604:	3601      	adds	r6, #1
 8007606:	e7f2      	b.n	80075ee <__libc_init_array+0x1e>
 8007608:	0800bfd8 	.word	0x0800bfd8
 800760c:	0800bfd8 	.word	0x0800bfd8
 8007610:	0800bfd8 	.word	0x0800bfd8
 8007614:	0800bfdc 	.word	0x0800bfdc

08007618 <__retarget_lock_init_recursive>:
 8007618:	4770      	bx	lr

0800761a <__retarget_lock_acquire_recursive>:
 800761a:	4770      	bx	lr

0800761c <__retarget_lock_release_recursive>:
 800761c:	4770      	bx	lr

0800761e <memchr>:
 800761e:	4603      	mov	r3, r0
 8007620:	b510      	push	{r4, lr}
 8007622:	b2c9      	uxtb	r1, r1
 8007624:	4402      	add	r2, r0
 8007626:	4293      	cmp	r3, r2
 8007628:	4618      	mov	r0, r3
 800762a:	d101      	bne.n	8007630 <memchr+0x12>
 800762c:	2000      	movs	r0, #0
 800762e:	e003      	b.n	8007638 <memchr+0x1a>
 8007630:	7804      	ldrb	r4, [r0, #0]
 8007632:	3301      	adds	r3, #1
 8007634:	428c      	cmp	r4, r1
 8007636:	d1f6      	bne.n	8007626 <memchr+0x8>
 8007638:	bd10      	pop	{r4, pc}

0800763a <memcpy>:
 800763a:	440a      	add	r2, r1
 800763c:	4291      	cmp	r1, r2
 800763e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007642:	d100      	bne.n	8007646 <memcpy+0xc>
 8007644:	4770      	bx	lr
 8007646:	b510      	push	{r4, lr}
 8007648:	f811 4b01 	ldrb.w	r4, [r1], #1
 800764c:	4291      	cmp	r1, r2
 800764e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007652:	d1f9      	bne.n	8007648 <memcpy+0xe>
 8007654:	bd10      	pop	{r4, pc}
	...

08007658 <nanf>:
 8007658:	4800      	ldr	r0, [pc, #0]	@ (800765c <nanf+0x4>)
 800765a:	4770      	bx	lr
 800765c:	7fc00000 	.word	0x7fc00000

08007660 <quorem>:
 8007660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007664:	6903      	ldr	r3, [r0, #16]
 8007666:	690c      	ldr	r4, [r1, #16]
 8007668:	4607      	mov	r7, r0
 800766a:	42a3      	cmp	r3, r4
 800766c:	db7e      	blt.n	800776c <quorem+0x10c>
 800766e:	3c01      	subs	r4, #1
 8007670:	00a3      	lsls	r3, r4, #2
 8007672:	f100 0514 	add.w	r5, r0, #20
 8007676:	f101 0814 	add.w	r8, r1, #20
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007686:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800768a:	3301      	adds	r3, #1
 800768c:	429a      	cmp	r2, r3
 800768e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007692:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007696:	d32e      	bcc.n	80076f6 <quorem+0x96>
 8007698:	f04f 0a00 	mov.w	sl, #0
 800769c:	46c4      	mov	ip, r8
 800769e:	46ae      	mov	lr, r5
 80076a0:	46d3      	mov	fp, sl
 80076a2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80076a6:	b298      	uxth	r0, r3
 80076a8:	fb06 a000 	mla	r0, r6, r0, sl
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	0c02      	lsrs	r2, r0, #16
 80076b0:	fb06 2303 	mla	r3, r6, r3, r2
 80076b4:	f8de 2000 	ldr.w	r2, [lr]
 80076b8:	b280      	uxth	r0, r0
 80076ba:	b292      	uxth	r2, r2
 80076bc:	1a12      	subs	r2, r2, r0
 80076be:	445a      	add	r2, fp
 80076c0:	f8de 0000 	ldr.w	r0, [lr]
 80076c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80076ce:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80076d2:	b292      	uxth	r2, r2
 80076d4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076d8:	45e1      	cmp	r9, ip
 80076da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80076de:	f84e 2b04 	str.w	r2, [lr], #4
 80076e2:	d2de      	bcs.n	80076a2 <quorem+0x42>
 80076e4:	9b00      	ldr	r3, [sp, #0]
 80076e6:	58eb      	ldr	r3, [r5, r3]
 80076e8:	b92b      	cbnz	r3, 80076f6 <quorem+0x96>
 80076ea:	9b01      	ldr	r3, [sp, #4]
 80076ec:	3b04      	subs	r3, #4
 80076ee:	429d      	cmp	r5, r3
 80076f0:	461a      	mov	r2, r3
 80076f2:	d32f      	bcc.n	8007754 <quorem+0xf4>
 80076f4:	613c      	str	r4, [r7, #16]
 80076f6:	4638      	mov	r0, r7
 80076f8:	f001 f9c2 	bl	8008a80 <__mcmp>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	db25      	blt.n	800774c <quorem+0xec>
 8007700:	4629      	mov	r1, r5
 8007702:	2000      	movs	r0, #0
 8007704:	f858 2b04 	ldr.w	r2, [r8], #4
 8007708:	f8d1 c000 	ldr.w	ip, [r1]
 800770c:	fa1f fe82 	uxth.w	lr, r2
 8007710:	fa1f f38c 	uxth.w	r3, ip
 8007714:	eba3 030e 	sub.w	r3, r3, lr
 8007718:	4403      	add	r3, r0
 800771a:	0c12      	lsrs	r2, r2, #16
 800771c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007720:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800772a:	45c1      	cmp	r9, r8
 800772c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007730:	f841 3b04 	str.w	r3, [r1], #4
 8007734:	d2e6      	bcs.n	8007704 <quorem+0xa4>
 8007736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800773a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800773e:	b922      	cbnz	r2, 800774a <quorem+0xea>
 8007740:	3b04      	subs	r3, #4
 8007742:	429d      	cmp	r5, r3
 8007744:	461a      	mov	r2, r3
 8007746:	d30b      	bcc.n	8007760 <quorem+0x100>
 8007748:	613c      	str	r4, [r7, #16]
 800774a:	3601      	adds	r6, #1
 800774c:	4630      	mov	r0, r6
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	3b04      	subs	r3, #4
 8007758:	2a00      	cmp	r2, #0
 800775a:	d1cb      	bne.n	80076f4 <quorem+0x94>
 800775c:	3c01      	subs	r4, #1
 800775e:	e7c6      	b.n	80076ee <quorem+0x8e>
 8007760:	6812      	ldr	r2, [r2, #0]
 8007762:	3b04      	subs	r3, #4
 8007764:	2a00      	cmp	r2, #0
 8007766:	d1ef      	bne.n	8007748 <quorem+0xe8>
 8007768:	3c01      	subs	r4, #1
 800776a:	e7ea      	b.n	8007742 <quorem+0xe2>
 800776c:	2000      	movs	r0, #0
 800776e:	e7ee      	b.n	800774e <quorem+0xee>

08007770 <_dtoa_r>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	4614      	mov	r4, r2
 8007776:	461d      	mov	r5, r3
 8007778:	69c7      	ldr	r7, [r0, #28]
 800777a:	b097      	sub	sp, #92	@ 0x5c
 800777c:	4683      	mov	fp, r0
 800777e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007782:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007784:	b97f      	cbnz	r7, 80077a6 <_dtoa_r+0x36>
 8007786:	2010      	movs	r0, #16
 8007788:	f000 fe02 	bl	8008390 <malloc>
 800778c:	4602      	mov	r2, r0
 800778e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007792:	b920      	cbnz	r0, 800779e <_dtoa_r+0x2e>
 8007794:	21ef      	movs	r1, #239	@ 0xef
 8007796:	4ba8      	ldr	r3, [pc, #672]	@ (8007a38 <_dtoa_r+0x2c8>)
 8007798:	48a8      	ldr	r0, [pc, #672]	@ (8007a3c <_dtoa_r+0x2cc>)
 800779a:	f002 fc15 	bl	8009fc8 <__assert_func>
 800779e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80077a2:	6007      	str	r7, [r0, #0]
 80077a4:	60c7      	str	r7, [r0, #12]
 80077a6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077aa:	6819      	ldr	r1, [r3, #0]
 80077ac:	b159      	cbz	r1, 80077c6 <_dtoa_r+0x56>
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	2301      	movs	r3, #1
 80077b2:	4093      	lsls	r3, r2
 80077b4:	604a      	str	r2, [r1, #4]
 80077b6:	608b      	str	r3, [r1, #8]
 80077b8:	4658      	mov	r0, fp
 80077ba:	f000 fedf 	bl	800857c <_Bfree>
 80077be:	2200      	movs	r2, #0
 80077c0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80077c4:	601a      	str	r2, [r3, #0]
 80077c6:	1e2b      	subs	r3, r5, #0
 80077c8:	bfaf      	iteee	ge
 80077ca:	2300      	movge	r3, #0
 80077cc:	2201      	movlt	r2, #1
 80077ce:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80077d2:	9303      	strlt	r3, [sp, #12]
 80077d4:	bfa8      	it	ge
 80077d6:	6033      	strge	r3, [r6, #0]
 80077d8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80077dc:	4b98      	ldr	r3, [pc, #608]	@ (8007a40 <_dtoa_r+0x2d0>)
 80077de:	bfb8      	it	lt
 80077e0:	6032      	strlt	r2, [r6, #0]
 80077e2:	ea33 0308 	bics.w	r3, r3, r8
 80077e6:	d112      	bne.n	800780e <_dtoa_r+0x9e>
 80077e8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80077ec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077f4:	4323      	orrs	r3, r4
 80077f6:	f000 8550 	beq.w	800829a <_dtoa_r+0xb2a>
 80077fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077fc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007a44 <_dtoa_r+0x2d4>
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8552 	beq.w	80082aa <_dtoa_r+0xb3a>
 8007806:	f10a 0303 	add.w	r3, sl, #3
 800780a:	f000 bd4c 	b.w	80082a6 <_dtoa_r+0xb36>
 800780e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007812:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800781a:	2200      	movs	r2, #0
 800781c:	2300      	movs	r3, #0
 800781e:	f7f9 f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 8007822:	4607      	mov	r7, r0
 8007824:	b158      	cbz	r0, 800783e <_dtoa_r+0xce>
 8007826:	2301      	movs	r3, #1
 8007828:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800782e:	b113      	cbz	r3, 8007836 <_dtoa_r+0xc6>
 8007830:	4b85      	ldr	r3, [pc, #532]	@ (8007a48 <_dtoa_r+0x2d8>)
 8007832:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007a4c <_dtoa_r+0x2dc>
 800783a:	f000 bd36 	b.w	80082aa <_dtoa_r+0xb3a>
 800783e:	ab14      	add	r3, sp, #80	@ 0x50
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	ab15      	add	r3, sp, #84	@ 0x54
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4658      	mov	r0, fp
 8007848:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800784c:	f001 fa30 	bl	8008cb0 <__d2b>
 8007850:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007854:	4681      	mov	r9, r0
 8007856:	2e00      	cmp	r6, #0
 8007858:	d077      	beq.n	800794a <_dtoa_r+0x1da>
 800785a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800785e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007860:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007868:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800786c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007870:	9712      	str	r7, [sp, #72]	@ 0x48
 8007872:	4619      	mov	r1, r3
 8007874:	2200      	movs	r2, #0
 8007876:	4b76      	ldr	r3, [pc, #472]	@ (8007a50 <_dtoa_r+0x2e0>)
 8007878:	f7f8 fc76 	bl	8000168 <__aeabi_dsub>
 800787c:	a368      	add	r3, pc, #416	@ (adr r3, 8007a20 <_dtoa_r+0x2b0>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f7f8 fe29 	bl	80004d8 <__aeabi_dmul>
 8007886:	a368      	add	r3, pc, #416	@ (adr r3, 8007a28 <_dtoa_r+0x2b8>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 fc6e 	bl	800016c <__adddf3>
 8007890:	4604      	mov	r4, r0
 8007892:	4630      	mov	r0, r6
 8007894:	460d      	mov	r5, r1
 8007896:	f7f8 fdb5 	bl	8000404 <__aeabi_i2d>
 800789a:	a365      	add	r3, pc, #404	@ (adr r3, 8007a30 <_dtoa_r+0x2c0>)
 800789c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a0:	f7f8 fe1a 	bl	80004d8 <__aeabi_dmul>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4620      	mov	r0, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	f7f8 fc5e 	bl	800016c <__adddf3>
 80078b0:	4604      	mov	r4, r0
 80078b2:	460d      	mov	r5, r1
 80078b4:	f7f9 f8c0 	bl	8000a38 <__aeabi_d2iz>
 80078b8:	2200      	movs	r2, #0
 80078ba:	4607      	mov	r7, r0
 80078bc:	2300      	movs	r3, #0
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f9 f87b 	bl	80009bc <__aeabi_dcmplt>
 80078c6:	b140      	cbz	r0, 80078da <_dtoa_r+0x16a>
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7f8 fd9b 	bl	8000404 <__aeabi_i2d>
 80078ce:	4622      	mov	r2, r4
 80078d0:	462b      	mov	r3, r5
 80078d2:	f7f9 f869 	bl	80009a8 <__aeabi_dcmpeq>
 80078d6:	b900      	cbnz	r0, 80078da <_dtoa_r+0x16a>
 80078d8:	3f01      	subs	r7, #1
 80078da:	2f16      	cmp	r7, #22
 80078dc:	d853      	bhi.n	8007986 <_dtoa_r+0x216>
 80078de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007a54 <_dtoa_r+0x2e4>)
 80078e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f9 f866 	bl	80009bc <__aeabi_dcmplt>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	d04a      	beq.n	800798a <_dtoa_r+0x21a>
 80078f4:	2300      	movs	r3, #0
 80078f6:	3f01      	subs	r7, #1
 80078f8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078fc:	1b9b      	subs	r3, r3, r6
 80078fe:	1e5a      	subs	r2, r3, #1
 8007900:	bf46      	itte	mi
 8007902:	f1c3 0801 	rsbmi	r8, r3, #1
 8007906:	2300      	movmi	r3, #0
 8007908:	f04f 0800 	movpl.w	r8, #0
 800790c:	9209      	str	r2, [sp, #36]	@ 0x24
 800790e:	bf48      	it	mi
 8007910:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007912:	2f00      	cmp	r7, #0
 8007914:	db3b      	blt.n	800798e <_dtoa_r+0x21e>
 8007916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007918:	970e      	str	r7, [sp, #56]	@ 0x38
 800791a:	443b      	add	r3, r7
 800791c:	9309      	str	r3, [sp, #36]	@ 0x24
 800791e:	2300      	movs	r3, #0
 8007920:	930a      	str	r3, [sp, #40]	@ 0x28
 8007922:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007924:	2b09      	cmp	r3, #9
 8007926:	d866      	bhi.n	80079f6 <_dtoa_r+0x286>
 8007928:	2b05      	cmp	r3, #5
 800792a:	bfc4      	itt	gt
 800792c:	3b04      	subgt	r3, #4
 800792e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007930:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007932:	bfc8      	it	gt
 8007934:	2400      	movgt	r4, #0
 8007936:	f1a3 0302 	sub.w	r3, r3, #2
 800793a:	bfd8      	it	le
 800793c:	2401      	movle	r4, #1
 800793e:	2b03      	cmp	r3, #3
 8007940:	d864      	bhi.n	8007a0c <_dtoa_r+0x29c>
 8007942:	e8df f003 	tbb	[pc, r3]
 8007946:	382b      	.short	0x382b
 8007948:	5636      	.short	0x5636
 800794a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800794e:	441e      	add	r6, r3
 8007950:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007954:	2b20      	cmp	r3, #32
 8007956:	bfc1      	itttt	gt
 8007958:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800795c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007960:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007964:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007968:	bfd6      	itet	le
 800796a:	f1c3 0320 	rsble	r3, r3, #32
 800796e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007972:	fa04 f003 	lslle.w	r0, r4, r3
 8007976:	f7f8 fd35 	bl	80003e4 <__aeabi_ui2d>
 800797a:	2201      	movs	r2, #1
 800797c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007980:	3e01      	subs	r6, #1
 8007982:	9212      	str	r2, [sp, #72]	@ 0x48
 8007984:	e775      	b.n	8007872 <_dtoa_r+0x102>
 8007986:	2301      	movs	r3, #1
 8007988:	e7b6      	b.n	80078f8 <_dtoa_r+0x188>
 800798a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800798c:	e7b5      	b.n	80078fa <_dtoa_r+0x18a>
 800798e:	427b      	negs	r3, r7
 8007990:	930a      	str	r3, [sp, #40]	@ 0x28
 8007992:	2300      	movs	r3, #0
 8007994:	eba8 0807 	sub.w	r8, r8, r7
 8007998:	930e      	str	r3, [sp, #56]	@ 0x38
 800799a:	e7c2      	b.n	8007922 <_dtoa_r+0x1b2>
 800799c:	2300      	movs	r3, #0
 800799e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	dc35      	bgt.n	8007a12 <_dtoa_r+0x2a2>
 80079a6:	2301      	movs	r3, #1
 80079a8:	461a      	mov	r2, r3
 80079aa:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079ae:	9221      	str	r2, [sp, #132]	@ 0x84
 80079b0:	e00b      	b.n	80079ca <_dtoa_r+0x25a>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7f3      	b.n	800799e <_dtoa_r+0x22e>
 80079b6:	2300      	movs	r3, #0
 80079b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079ba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079bc:	18fb      	adds	r3, r7, r3
 80079be:	9308      	str	r3, [sp, #32]
 80079c0:	3301      	adds	r3, #1
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	9307      	str	r3, [sp, #28]
 80079c6:	bfb8      	it	lt
 80079c8:	2301      	movlt	r3, #1
 80079ca:	2100      	movs	r1, #0
 80079cc:	2204      	movs	r2, #4
 80079ce:	f8db 001c 	ldr.w	r0, [fp, #28]
 80079d2:	f102 0514 	add.w	r5, r2, #20
 80079d6:	429d      	cmp	r5, r3
 80079d8:	d91f      	bls.n	8007a1a <_dtoa_r+0x2aa>
 80079da:	6041      	str	r1, [r0, #4]
 80079dc:	4658      	mov	r0, fp
 80079de:	f000 fd8d 	bl	80084fc <_Balloc>
 80079e2:	4682      	mov	sl, r0
 80079e4:	2800      	cmp	r0, #0
 80079e6:	d139      	bne.n	8007a5c <_dtoa_r+0x2ec>
 80079e8:	4602      	mov	r2, r0
 80079ea:	f240 11af 	movw	r1, #431	@ 0x1af
 80079ee:	4b1a      	ldr	r3, [pc, #104]	@ (8007a58 <_dtoa_r+0x2e8>)
 80079f0:	e6d2      	b.n	8007798 <_dtoa_r+0x28>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e7e0      	b.n	80079b8 <_dtoa_r+0x248>
 80079f6:	2401      	movs	r4, #1
 80079f8:	2300      	movs	r3, #0
 80079fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079fc:	9320      	str	r3, [sp, #128]	@ 0x80
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	2200      	movs	r2, #0
 8007a04:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a08:	2312      	movs	r3, #18
 8007a0a:	e7d0      	b.n	80079ae <_dtoa_r+0x23e>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a10:	e7f5      	b.n	80079fe <_dtoa_r+0x28e>
 8007a12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a14:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a18:	e7d7      	b.n	80079ca <_dtoa_r+0x25a>
 8007a1a:	3101      	adds	r1, #1
 8007a1c:	0052      	lsls	r2, r2, #1
 8007a1e:	e7d8      	b.n	80079d2 <_dtoa_r+0x262>
 8007a20:	636f4361 	.word	0x636f4361
 8007a24:	3fd287a7 	.word	0x3fd287a7
 8007a28:	8b60c8b3 	.word	0x8b60c8b3
 8007a2c:	3fc68a28 	.word	0x3fc68a28
 8007a30:	509f79fb 	.word	0x509f79fb
 8007a34:	3fd34413 	.word	0x3fd34413
 8007a38:	0800bbb8 	.word	0x0800bbb8
 8007a3c:	0800bbcf 	.word	0x0800bbcf
 8007a40:	7ff00000 	.word	0x7ff00000
 8007a44:	0800bbb4 	.word	0x0800bbb4
 8007a48:	0800bb83 	.word	0x0800bb83
 8007a4c:	0800bb82 	.word	0x0800bb82
 8007a50:	3ff80000 	.word	0x3ff80000
 8007a54:	0800bcc8 	.word	0x0800bcc8
 8007a58:	0800bc27 	.word	0x0800bc27
 8007a5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a60:	6018      	str	r0, [r3, #0]
 8007a62:	9b07      	ldr	r3, [sp, #28]
 8007a64:	2b0e      	cmp	r3, #14
 8007a66:	f200 80a4 	bhi.w	8007bb2 <_dtoa_r+0x442>
 8007a6a:	2c00      	cmp	r4, #0
 8007a6c:	f000 80a1 	beq.w	8007bb2 <_dtoa_r+0x442>
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	dd33      	ble.n	8007adc <_dtoa_r+0x36c>
 8007a74:	4b86      	ldr	r3, [pc, #536]	@ (8007c90 <_dtoa_r+0x520>)
 8007a76:	f007 020f 	and.w	r2, r7, #15
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	05f8      	lsls	r0, r7, #23
 8007a80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a84:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a8c:	d516      	bpl.n	8007abc <_dtoa_r+0x34c>
 8007a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a92:	4b80      	ldr	r3, [pc, #512]	@ (8007c94 <_dtoa_r+0x524>)
 8007a94:	2603      	movs	r6, #3
 8007a96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a9a:	f7f8 fe47 	bl	800072c <__aeabi_ddiv>
 8007a9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa2:	f004 040f 	and.w	r4, r4, #15
 8007aa6:	4d7b      	ldr	r5, [pc, #492]	@ (8007c94 <_dtoa_r+0x524>)
 8007aa8:	b954      	cbnz	r4, 8007ac0 <_dtoa_r+0x350>
 8007aaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab2:	f7f8 fe3b 	bl	800072c <__aeabi_ddiv>
 8007ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aba:	e028      	b.n	8007b0e <_dtoa_r+0x39e>
 8007abc:	2602      	movs	r6, #2
 8007abe:	e7f2      	b.n	8007aa6 <_dtoa_r+0x336>
 8007ac0:	07e1      	lsls	r1, r4, #31
 8007ac2:	d508      	bpl.n	8007ad6 <_dtoa_r+0x366>
 8007ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ac8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007acc:	f7f8 fd04 	bl	80004d8 <__aeabi_dmul>
 8007ad0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	1064      	asrs	r4, r4, #1
 8007ad8:	3508      	adds	r5, #8
 8007ada:	e7e5      	b.n	8007aa8 <_dtoa_r+0x338>
 8007adc:	f000 80d2 	beq.w	8007c84 <_dtoa_r+0x514>
 8007ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ae4:	427c      	negs	r4, r7
 8007ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8007c90 <_dtoa_r+0x520>)
 8007ae8:	f004 020f 	and.w	r2, r4, #15
 8007aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fcf0 	bl	80004d8 <__aeabi_dmul>
 8007af8:	2602      	movs	r6, #2
 8007afa:	2300      	movs	r3, #0
 8007afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b00:	4d64      	ldr	r5, [pc, #400]	@ (8007c94 <_dtoa_r+0x524>)
 8007b02:	1124      	asrs	r4, r4, #4
 8007b04:	2c00      	cmp	r4, #0
 8007b06:	f040 80b2 	bne.w	8007c6e <_dtoa_r+0x4fe>
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1d3      	bne.n	8007ab6 <_dtoa_r+0x346>
 8007b0e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80b7 	beq.w	8007c88 <_dtoa_r+0x518>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	4b5d      	ldr	r3, [pc, #372]	@ (8007c98 <_dtoa_r+0x528>)
 8007b22:	f7f8 ff4b 	bl	80009bc <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f000 80ae 	beq.w	8007c88 <_dtoa_r+0x518>
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 80aa 	beq.w	8007c88 <_dtoa_r+0x518>
 8007b34:	9b08      	ldr	r3, [sp, #32]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dd37      	ble.n	8007baa <_dtoa_r+0x43a>
 8007b3a:	1e7b      	subs	r3, r7, #1
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	2200      	movs	r2, #0
 8007b42:	4629      	mov	r1, r5
 8007b44:	4b55      	ldr	r3, [pc, #340]	@ (8007c9c <_dtoa_r+0x52c>)
 8007b46:	f7f8 fcc7 	bl	80004d8 <__aeabi_dmul>
 8007b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b4e:	9c08      	ldr	r4, [sp, #32]
 8007b50:	3601      	adds	r6, #1
 8007b52:	4630      	mov	r0, r6
 8007b54:	f7f8 fc56 	bl	8000404 <__aeabi_i2d>
 8007b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b5c:	f7f8 fcbc 	bl	80004d8 <__aeabi_dmul>
 8007b60:	2200      	movs	r2, #0
 8007b62:	4b4f      	ldr	r3, [pc, #316]	@ (8007ca0 <_dtoa_r+0x530>)
 8007b64:	f7f8 fb02 	bl	800016c <__adddf3>
 8007b68:	4605      	mov	r5, r0
 8007b6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	f040 809a 	bne.w	8007ca8 <_dtoa_r+0x538>
 8007b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca4 <_dtoa_r+0x534>)
 8007b7c:	f7f8 faf4 	bl	8000168 <__aeabi_dsub>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4633      	mov	r3, r6
 8007b8c:	f7f8 ff34 	bl	80009f8 <__aeabi_dcmpgt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	f040 828e 	bne.w	80080b2 <_dtoa_r+0x942>
 8007b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9a:	462a      	mov	r2, r5
 8007b9c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ba0:	f7f8 ff0c 	bl	80009bc <__aeabi_dcmplt>
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	f040 8127 	bne.w	8007df8 <_dtoa_r+0x688>
 8007baa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007bae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007bb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	f2c0 8163 	blt.w	8007e80 <_dtoa_r+0x710>
 8007bba:	2f0e      	cmp	r7, #14
 8007bbc:	f300 8160 	bgt.w	8007e80 <_dtoa_r+0x710>
 8007bc0:	4b33      	ldr	r3, [pc, #204]	@ (8007c90 <_dtoa_r+0x520>)
 8007bc2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007bca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007bce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da03      	bge.n	8007bdc <_dtoa_r+0x46c>
 8007bd4:	9b07      	ldr	r3, [sp, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f340 8100 	ble.w	8007ddc <_dtoa_r+0x66c>
 8007bdc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007be0:	4656      	mov	r6, sl
 8007be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7f8 fd9f 	bl	800072c <__aeabi_ddiv>
 8007bee:	f7f8 ff23 	bl	8000a38 <__aeabi_d2iz>
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	f7f8 fc06 	bl	8000404 <__aeabi_i2d>
 8007bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bfc:	f7f8 fc6c 	bl	80004d8 <__aeabi_dmul>
 8007c00:	4602      	mov	r2, r0
 8007c02:	460b      	mov	r3, r1
 8007c04:	4620      	mov	r0, r4
 8007c06:	4629      	mov	r1, r5
 8007c08:	f7f8 faae 	bl	8000168 <__aeabi_dsub>
 8007c0c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c10:	9d07      	ldr	r5, [sp, #28]
 8007c12:	f806 4b01 	strb.w	r4, [r6], #1
 8007c16:	eba6 040a 	sub.w	r4, r6, sl
 8007c1a:	42a5      	cmp	r5, r4
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	f040 8116 	bne.w	8007e50 <_dtoa_r+0x6e0>
 8007c24:	f7f8 faa2 	bl	800016c <__adddf3>
 8007c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	f7f8 fee2 	bl	80009f8 <__aeabi_dcmpgt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f040 80f8 	bne.w	8007e2a <_dtoa_r+0x6ba>
 8007c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	4629      	mov	r1, r5
 8007c42:	f7f8 feb1 	bl	80009a8 <__aeabi_dcmpeq>
 8007c46:	b118      	cbz	r0, 8007c50 <_dtoa_r+0x4e0>
 8007c48:	f018 0f01 	tst.w	r8, #1
 8007c4c:	f040 80ed 	bne.w	8007e2a <_dtoa_r+0x6ba>
 8007c50:	4649      	mov	r1, r9
 8007c52:	4658      	mov	r0, fp
 8007c54:	f000 fc92 	bl	800857c <_Bfree>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	7033      	strb	r3, [r6, #0]
 8007c5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c5e:	3701      	adds	r7, #1
 8007c60:	601f      	str	r7, [r3, #0]
 8007c62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8320 	beq.w	80082aa <_dtoa_r+0xb3a>
 8007c6a:	601e      	str	r6, [r3, #0]
 8007c6c:	e31d      	b.n	80082aa <_dtoa_r+0xb3a>
 8007c6e:	07e2      	lsls	r2, r4, #31
 8007c70:	d505      	bpl.n	8007c7e <_dtoa_r+0x50e>
 8007c72:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c76:	f7f8 fc2f 	bl	80004d8 <__aeabi_dmul>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	1064      	asrs	r4, r4, #1
 8007c80:	3508      	adds	r5, #8
 8007c82:	e73f      	b.n	8007b04 <_dtoa_r+0x394>
 8007c84:	2602      	movs	r6, #2
 8007c86:	e742      	b.n	8007b0e <_dtoa_r+0x39e>
 8007c88:	9c07      	ldr	r4, [sp, #28]
 8007c8a:	9704      	str	r7, [sp, #16]
 8007c8c:	e761      	b.n	8007b52 <_dtoa_r+0x3e2>
 8007c8e:	bf00      	nop
 8007c90:	0800bcc8 	.word	0x0800bcc8
 8007c94:	0800bca0 	.word	0x0800bca0
 8007c98:	3ff00000 	.word	0x3ff00000
 8007c9c:	40240000 	.word	0x40240000
 8007ca0:	401c0000 	.word	0x401c0000
 8007ca4:	40140000 	.word	0x40140000
 8007ca8:	4b70      	ldr	r3, [pc, #448]	@ (8007e6c <_dtoa_r+0x6fc>)
 8007caa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cb4:	4454      	add	r4, sl
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	d045      	beq.n	8007d46 <_dtoa_r+0x5d6>
 8007cba:	2000      	movs	r0, #0
 8007cbc:	496c      	ldr	r1, [pc, #432]	@ (8007e70 <_dtoa_r+0x700>)
 8007cbe:	f7f8 fd35 	bl	800072c <__aeabi_ddiv>
 8007cc2:	4633      	mov	r3, r6
 8007cc4:	462a      	mov	r2, r5
 8007cc6:	f7f8 fa4f 	bl	8000168 <__aeabi_dsub>
 8007cca:	4656      	mov	r6, sl
 8007ccc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007cd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd4:	f7f8 feb0 	bl	8000a38 <__aeabi_d2iz>
 8007cd8:	4605      	mov	r5, r0
 8007cda:	f7f8 fb93 	bl	8000404 <__aeabi_i2d>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce6:	f7f8 fa3f 	bl	8000168 <__aeabi_dsub>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	3530      	adds	r5, #48	@ 0x30
 8007cf0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cf8:	f806 5b01 	strb.w	r5, [r6], #1
 8007cfc:	f7f8 fe5e 	bl	80009bc <__aeabi_dcmplt>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d163      	bne.n	8007dcc <_dtoa_r+0x65c>
 8007d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d08:	2000      	movs	r0, #0
 8007d0a:	495a      	ldr	r1, [pc, #360]	@ (8007e74 <_dtoa_r+0x704>)
 8007d0c:	f7f8 fa2c 	bl	8000168 <__aeabi_dsub>
 8007d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d14:	f7f8 fe52 	bl	80009bc <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f040 8087 	bne.w	8007e2c <_dtoa_r+0x6bc>
 8007d1e:	42a6      	cmp	r6, r4
 8007d20:	f43f af43 	beq.w	8007baa <_dtoa_r+0x43a>
 8007d24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d28:	2200      	movs	r2, #0
 8007d2a:	4b53      	ldr	r3, [pc, #332]	@ (8007e78 <_dtoa_r+0x708>)
 8007d2c:	f7f8 fbd4 	bl	80004d8 <__aeabi_dmul>
 8007d30:	2200      	movs	r2, #0
 8007d32:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8007e78 <_dtoa_r+0x708>)
 8007d3c:	f7f8 fbcc 	bl	80004d8 <__aeabi_dmul>
 8007d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d44:	e7c4      	b.n	8007cd0 <_dtoa_r+0x560>
 8007d46:	4631      	mov	r1, r6
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7f8 fbc5 	bl	80004d8 <__aeabi_dmul>
 8007d4e:	4656      	mov	r6, sl
 8007d50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d54:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d5a:	f7f8 fe6d 	bl	8000a38 <__aeabi_d2iz>
 8007d5e:	4605      	mov	r5, r0
 8007d60:	f7f8 fb50 	bl	8000404 <__aeabi_i2d>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d6c:	f7f8 f9fc 	bl	8000168 <__aeabi_dsub>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	3530      	adds	r5, #48	@ 0x30
 8007d76:	f806 5b01 	strb.w	r5, [r6], #1
 8007d7a:	42a6      	cmp	r6, r4
 8007d7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	d124      	bne.n	8007dd0 <_dtoa_r+0x660>
 8007d86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d8a:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <_dtoa_r+0x700>)
 8007d8c:	f7f8 f9ee 	bl	800016c <__adddf3>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d98:	f7f8 fe2e 	bl	80009f8 <__aeabi_dcmpgt>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d145      	bne.n	8007e2c <_dtoa_r+0x6bc>
 8007da0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007da4:	2000      	movs	r0, #0
 8007da6:	4932      	ldr	r1, [pc, #200]	@ (8007e70 <_dtoa_r+0x700>)
 8007da8:	f7f8 f9de 	bl	8000168 <__aeabi_dsub>
 8007dac:	4602      	mov	r2, r0
 8007dae:	460b      	mov	r3, r1
 8007db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db4:	f7f8 fe02 	bl	80009bc <__aeabi_dcmplt>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	f43f aef6 	beq.w	8007baa <_dtoa_r+0x43a>
 8007dbe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007dc0:	1e73      	subs	r3, r6, #1
 8007dc2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007dc8:	2b30      	cmp	r3, #48	@ 0x30
 8007dca:	d0f8      	beq.n	8007dbe <_dtoa_r+0x64e>
 8007dcc:	9f04      	ldr	r7, [sp, #16]
 8007dce:	e73f      	b.n	8007c50 <_dtoa_r+0x4e0>
 8007dd0:	4b29      	ldr	r3, [pc, #164]	@ (8007e78 <_dtoa_r+0x708>)
 8007dd2:	f7f8 fb81 	bl	80004d8 <__aeabi_dmul>
 8007dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dda:	e7bc      	b.n	8007d56 <_dtoa_r+0x5e6>
 8007ddc:	d10c      	bne.n	8007df8 <_dtoa_r+0x688>
 8007dde:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007de2:	2200      	movs	r2, #0
 8007de4:	4b25      	ldr	r3, [pc, #148]	@ (8007e7c <_dtoa_r+0x70c>)
 8007de6:	f7f8 fb77 	bl	80004d8 <__aeabi_dmul>
 8007dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dee:	f7f8 fdf9 	bl	80009e4 <__aeabi_dcmpge>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f000 815b 	beq.w	80080ae <_dtoa_r+0x93e>
 8007df8:	2400      	movs	r4, #0
 8007dfa:	4625      	mov	r5, r4
 8007dfc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dfe:	4656      	mov	r6, sl
 8007e00:	43db      	mvns	r3, r3
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	2700      	movs	r7, #0
 8007e06:	4621      	mov	r1, r4
 8007e08:	4658      	mov	r0, fp
 8007e0a:	f000 fbb7 	bl	800857c <_Bfree>
 8007e0e:	2d00      	cmp	r5, #0
 8007e10:	d0dc      	beq.n	8007dcc <_dtoa_r+0x65c>
 8007e12:	b12f      	cbz	r7, 8007e20 <_dtoa_r+0x6b0>
 8007e14:	42af      	cmp	r7, r5
 8007e16:	d003      	beq.n	8007e20 <_dtoa_r+0x6b0>
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4658      	mov	r0, fp
 8007e1c:	f000 fbae 	bl	800857c <_Bfree>
 8007e20:	4629      	mov	r1, r5
 8007e22:	4658      	mov	r0, fp
 8007e24:	f000 fbaa 	bl	800857c <_Bfree>
 8007e28:	e7d0      	b.n	8007dcc <_dtoa_r+0x65c>
 8007e2a:	9704      	str	r7, [sp, #16]
 8007e2c:	4633      	mov	r3, r6
 8007e2e:	461e      	mov	r6, r3
 8007e30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e34:	2a39      	cmp	r2, #57	@ 0x39
 8007e36:	d107      	bne.n	8007e48 <_dtoa_r+0x6d8>
 8007e38:	459a      	cmp	sl, r3
 8007e3a:	d1f8      	bne.n	8007e2e <_dtoa_r+0x6be>
 8007e3c:	9a04      	ldr	r2, [sp, #16]
 8007e3e:	3201      	adds	r2, #1
 8007e40:	9204      	str	r2, [sp, #16]
 8007e42:	2230      	movs	r2, #48	@ 0x30
 8007e44:	f88a 2000 	strb.w	r2, [sl]
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	3201      	adds	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e7bd      	b.n	8007dcc <_dtoa_r+0x65c>
 8007e50:	2200      	movs	r2, #0
 8007e52:	4b09      	ldr	r3, [pc, #36]	@ (8007e78 <_dtoa_r+0x708>)
 8007e54:	f7f8 fb40 	bl	80004d8 <__aeabi_dmul>
 8007e58:	2200      	movs	r2, #0
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	4604      	mov	r4, r0
 8007e5e:	460d      	mov	r5, r1
 8007e60:	f7f8 fda2 	bl	80009a8 <__aeabi_dcmpeq>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	f43f aebc 	beq.w	8007be2 <_dtoa_r+0x472>
 8007e6a:	e6f1      	b.n	8007c50 <_dtoa_r+0x4e0>
 8007e6c:	0800bcc8 	.word	0x0800bcc8
 8007e70:	3fe00000 	.word	0x3fe00000
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	40140000 	.word	0x40140000
 8007e80:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	f000 80db 	beq.w	800803e <_dtoa_r+0x8ce>
 8007e88:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e8a:	2a01      	cmp	r2, #1
 8007e8c:	f300 80bf 	bgt.w	800800e <_dtoa_r+0x89e>
 8007e90:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	f000 80b7 	beq.w	8008006 <_dtoa_r+0x896>
 8007e98:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e9c:	4646      	mov	r6, r8
 8007e9e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	441a      	add	r2, r3
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	4498      	add	r8, r3
 8007eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eac:	f000 fc64 	bl	8008778 <__i2b>
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b15e      	cbz	r6, 8007ecc <_dtoa_r+0x75c>
 8007eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dd08      	ble.n	8007ecc <_dtoa_r+0x75c>
 8007eba:	42b3      	cmp	r3, r6
 8007ebc:	bfa8      	it	ge
 8007ebe:	4633      	movge	r3, r6
 8007ec0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ec2:	eba8 0803 	sub.w	r8, r8, r3
 8007ec6:	1af6      	subs	r6, r6, r3
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ece:	b1f3      	cbz	r3, 8007f0e <_dtoa_r+0x79e>
 8007ed0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80b7 	beq.w	8008046 <_dtoa_r+0x8d6>
 8007ed8:	b18c      	cbz	r4, 8007efe <_dtoa_r+0x78e>
 8007eda:	4629      	mov	r1, r5
 8007edc:	4622      	mov	r2, r4
 8007ede:	4658      	mov	r0, fp
 8007ee0:	f000 fd08 	bl	80088f4 <__pow5mult>
 8007ee4:	464a      	mov	r2, r9
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	4605      	mov	r5, r0
 8007eea:	4658      	mov	r0, fp
 8007eec:	f000 fc5a 	bl	80087a4 <__multiply>
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	9004      	str	r0, [sp, #16]
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	f000 fb41 	bl	800857c <_Bfree>
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	4699      	mov	r9, r3
 8007efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f00:	1b1a      	subs	r2, r3, r4
 8007f02:	d004      	beq.n	8007f0e <_dtoa_r+0x79e>
 8007f04:	4649      	mov	r1, r9
 8007f06:	4658      	mov	r0, fp
 8007f08:	f000 fcf4 	bl	80088f4 <__pow5mult>
 8007f0c:	4681      	mov	r9, r0
 8007f0e:	2101      	movs	r1, #1
 8007f10:	4658      	mov	r0, fp
 8007f12:	f000 fc31 	bl	8008778 <__i2b>
 8007f16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f18:	4604      	mov	r4, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f000 81c9 	beq.w	80082b2 <_dtoa_r+0xb42>
 8007f20:	461a      	mov	r2, r3
 8007f22:	4601      	mov	r1, r0
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fce5 	bl	80088f4 <__pow5mult>
 8007f2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	f300 808f 	bgt.w	8008052 <_dtoa_r+0x8e2>
 8007f34:	9b02      	ldr	r3, [sp, #8]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f040 8087 	bne.w	800804a <_dtoa_r+0x8da>
 8007f3c:	9b03      	ldr	r3, [sp, #12]
 8007f3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 8083 	bne.w	800804e <_dtoa_r+0x8de>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f4e:	0d1b      	lsrs	r3, r3, #20
 8007f50:	051b      	lsls	r3, r3, #20
 8007f52:	b12b      	cbz	r3, 8007f60 <_dtoa_r+0x7f0>
 8007f54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f56:	f108 0801 	add.w	r8, r8, #1
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f5e:	2301      	movs	r3, #1
 8007f60:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 81aa 	beq.w	80082be <_dtoa_r+0xb4e>
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f70:	6918      	ldr	r0, [r3, #16]
 8007f72:	f000 fbb5 	bl	80086e0 <__hi0bits>
 8007f76:	f1c0 0020 	rsb	r0, r0, #32
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	4418      	add	r0, r3
 8007f7e:	f010 001f 	ands.w	r0, r0, #31
 8007f82:	d071      	beq.n	8008068 <_dtoa_r+0x8f8>
 8007f84:	f1c0 0320 	rsb	r3, r0, #32
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	dd65      	ble.n	8008058 <_dtoa_r+0x8e8>
 8007f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8e:	f1c0 001c 	rsb	r0, r0, #28
 8007f92:	4403      	add	r3, r0
 8007f94:	4480      	add	r8, r0
 8007f96:	4406      	add	r6, r0
 8007f98:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9a:	f1b8 0f00 	cmp.w	r8, #0
 8007f9e:	dd05      	ble.n	8007fac <_dtoa_r+0x83c>
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	4642      	mov	r2, r8
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	f000 fcff 	bl	80089a8 <__lshift>
 8007faa:	4681      	mov	r9, r0
 8007fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd05      	ble.n	8007fbe <_dtoa_r+0x84e>
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	4658      	mov	r0, fp
 8007fb8:	f000 fcf6 	bl	80089a8 <__lshift>
 8007fbc:	4604      	mov	r4, r0
 8007fbe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d053      	beq.n	800806c <_dtoa_r+0x8fc>
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	f000 fd5a 	bl	8008a80 <__mcmp>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	da4d      	bge.n	800806c <_dtoa_r+0x8fc>
 8007fd0:	1e7b      	subs	r3, r7, #1
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	220a      	movs	r2, #10
 8007fd8:	2300      	movs	r3, #0
 8007fda:	4658      	mov	r0, fp
 8007fdc:	f000 faf0 	bl	80085c0 <__multadd>
 8007fe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fe2:	4681      	mov	r9, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 816c 	beq.w	80082c2 <_dtoa_r+0xb52>
 8007fea:	2300      	movs	r3, #0
 8007fec:	4629      	mov	r1, r5
 8007fee:	220a      	movs	r2, #10
 8007ff0:	4658      	mov	r0, fp
 8007ff2:	f000 fae5 	bl	80085c0 <__multadd>
 8007ff6:	9b08      	ldr	r3, [sp, #32]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dc61      	bgt.n	80080c2 <_dtoa_r+0x952>
 8007ffe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008000:	2b02      	cmp	r3, #2
 8008002:	dc3b      	bgt.n	800807c <_dtoa_r+0x90c>
 8008004:	e05d      	b.n	80080c2 <_dtoa_r+0x952>
 8008006:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008008:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800800c:	e746      	b.n	8007e9c <_dtoa_r+0x72c>
 800800e:	9b07      	ldr	r3, [sp, #28]
 8008010:	1e5c      	subs	r4, r3, #1
 8008012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008014:	42a3      	cmp	r3, r4
 8008016:	bfbf      	itttt	lt
 8008018:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800801a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800801c:	1ae3      	sublt	r3, r4, r3
 800801e:	18d2      	addlt	r2, r2, r3
 8008020:	bfa8      	it	ge
 8008022:	1b1c      	subge	r4, r3, r4
 8008024:	9b07      	ldr	r3, [sp, #28]
 8008026:	bfbe      	ittt	lt
 8008028:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800802a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800802c:	2400      	movlt	r4, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	bfb5      	itete	lt
 8008032:	eba8 0603 	sublt.w	r6, r8, r3
 8008036:	4646      	movge	r6, r8
 8008038:	2300      	movlt	r3, #0
 800803a:	9b07      	ldrge	r3, [sp, #28]
 800803c:	e730      	b.n	8007ea0 <_dtoa_r+0x730>
 800803e:	4646      	mov	r6, r8
 8008040:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008042:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008044:	e735      	b.n	8007eb2 <_dtoa_r+0x742>
 8008046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008048:	e75c      	b.n	8007f04 <_dtoa_r+0x794>
 800804a:	2300      	movs	r3, #0
 800804c:	e788      	b.n	8007f60 <_dtoa_r+0x7f0>
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	e786      	b.n	8007f60 <_dtoa_r+0x7f0>
 8008052:	2300      	movs	r3, #0
 8008054:	930a      	str	r3, [sp, #40]	@ 0x28
 8008056:	e788      	b.n	8007f6a <_dtoa_r+0x7fa>
 8008058:	d09f      	beq.n	8007f9a <_dtoa_r+0x82a>
 800805a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800805c:	331c      	adds	r3, #28
 800805e:	441a      	add	r2, r3
 8008060:	4498      	add	r8, r3
 8008062:	441e      	add	r6, r3
 8008064:	9209      	str	r2, [sp, #36]	@ 0x24
 8008066:	e798      	b.n	8007f9a <_dtoa_r+0x82a>
 8008068:	4603      	mov	r3, r0
 800806a:	e7f6      	b.n	800805a <_dtoa_r+0x8ea>
 800806c:	9b07      	ldr	r3, [sp, #28]
 800806e:	9704      	str	r7, [sp, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc20      	bgt.n	80080b6 <_dtoa_r+0x946>
 8008074:	9308      	str	r3, [sp, #32]
 8008076:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008078:	2b02      	cmp	r3, #2
 800807a:	dd1e      	ble.n	80080ba <_dtoa_r+0x94a>
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f47f aebc 	bne.w	8007dfc <_dtoa_r+0x68c>
 8008084:	4621      	mov	r1, r4
 8008086:	2205      	movs	r2, #5
 8008088:	4658      	mov	r0, fp
 800808a:	f000 fa99 	bl	80085c0 <__multadd>
 800808e:	4601      	mov	r1, r0
 8008090:	4604      	mov	r4, r0
 8008092:	4648      	mov	r0, r9
 8008094:	f000 fcf4 	bl	8008a80 <__mcmp>
 8008098:	2800      	cmp	r0, #0
 800809a:	f77f aeaf 	ble.w	8007dfc <_dtoa_r+0x68c>
 800809e:	2331      	movs	r3, #49	@ 0x31
 80080a0:	4656      	mov	r6, sl
 80080a2:	f806 3b01 	strb.w	r3, [r6], #1
 80080a6:	9b04      	ldr	r3, [sp, #16]
 80080a8:	3301      	adds	r3, #1
 80080aa:	9304      	str	r3, [sp, #16]
 80080ac:	e6aa      	b.n	8007e04 <_dtoa_r+0x694>
 80080ae:	9c07      	ldr	r4, [sp, #28]
 80080b0:	9704      	str	r7, [sp, #16]
 80080b2:	4625      	mov	r5, r4
 80080b4:	e7f3      	b.n	800809e <_dtoa_r+0x92e>
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	9308      	str	r3, [sp, #32]
 80080ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8104 	beq.w	80082ca <_dtoa_r+0xb5a>
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	dd05      	ble.n	80080d2 <_dtoa_r+0x962>
 80080c6:	4629      	mov	r1, r5
 80080c8:	4632      	mov	r2, r6
 80080ca:	4658      	mov	r0, fp
 80080cc:	f000 fc6c 	bl	80089a8 <__lshift>
 80080d0:	4605      	mov	r5, r0
 80080d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05a      	beq.n	800818e <_dtoa_r+0xa1e>
 80080d8:	4658      	mov	r0, fp
 80080da:	6869      	ldr	r1, [r5, #4]
 80080dc:	f000 fa0e 	bl	80084fc <_Balloc>
 80080e0:	4606      	mov	r6, r0
 80080e2:	b928      	cbnz	r0, 80080f0 <_dtoa_r+0x980>
 80080e4:	4602      	mov	r2, r0
 80080e6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80080ea:	4b83      	ldr	r3, [pc, #524]	@ (80082f8 <_dtoa_r+0xb88>)
 80080ec:	f7ff bb54 	b.w	8007798 <_dtoa_r+0x28>
 80080f0:	692a      	ldr	r2, [r5, #16]
 80080f2:	f105 010c 	add.w	r1, r5, #12
 80080f6:	3202      	adds	r2, #2
 80080f8:	0092      	lsls	r2, r2, #2
 80080fa:	300c      	adds	r0, #12
 80080fc:	f7ff fa9d 	bl	800763a <memcpy>
 8008100:	2201      	movs	r2, #1
 8008102:	4631      	mov	r1, r6
 8008104:	4658      	mov	r0, fp
 8008106:	f000 fc4f 	bl	80089a8 <__lshift>
 800810a:	462f      	mov	r7, r5
 800810c:	4605      	mov	r5, r0
 800810e:	f10a 0301 	add.w	r3, sl, #1
 8008112:	9307      	str	r3, [sp, #28]
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	4453      	add	r3, sl
 8008118:	930b      	str	r3, [sp, #44]	@ 0x2c
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	930a      	str	r3, [sp, #40]	@ 0x28
 8008122:	9b07      	ldr	r3, [sp, #28]
 8008124:	4621      	mov	r1, r4
 8008126:	3b01      	subs	r3, #1
 8008128:	4648      	mov	r0, r9
 800812a:	9302      	str	r3, [sp, #8]
 800812c:	f7ff fa98 	bl	8007660 <quorem>
 8008130:	4639      	mov	r1, r7
 8008132:	9008      	str	r0, [sp, #32]
 8008134:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008138:	4648      	mov	r0, r9
 800813a:	f000 fca1 	bl	8008a80 <__mcmp>
 800813e:	462a      	mov	r2, r5
 8008140:	9009      	str	r0, [sp, #36]	@ 0x24
 8008142:	4621      	mov	r1, r4
 8008144:	4658      	mov	r0, fp
 8008146:	f000 fcb7 	bl	8008ab8 <__mdiff>
 800814a:	68c2      	ldr	r2, [r0, #12]
 800814c:	4606      	mov	r6, r0
 800814e:	bb02      	cbnz	r2, 8008192 <_dtoa_r+0xa22>
 8008150:	4601      	mov	r1, r0
 8008152:	4648      	mov	r0, r9
 8008154:	f000 fc94 	bl	8008a80 <__mcmp>
 8008158:	4602      	mov	r2, r0
 800815a:	4631      	mov	r1, r6
 800815c:	4658      	mov	r0, fp
 800815e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008160:	f000 fa0c 	bl	800857c <_Bfree>
 8008164:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008166:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008168:	9e07      	ldr	r6, [sp, #28]
 800816a:	ea43 0102 	orr.w	r1, r3, r2
 800816e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008170:	4319      	orrs	r1, r3
 8008172:	d110      	bne.n	8008196 <_dtoa_r+0xa26>
 8008174:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008178:	d029      	beq.n	80081ce <_dtoa_r+0xa5e>
 800817a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	dd02      	ble.n	8008186 <_dtoa_r+0xa16>
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008186:	9b02      	ldr	r3, [sp, #8]
 8008188:	f883 8000 	strb.w	r8, [r3]
 800818c:	e63b      	b.n	8007e06 <_dtoa_r+0x696>
 800818e:	4628      	mov	r0, r5
 8008190:	e7bb      	b.n	800810a <_dtoa_r+0x99a>
 8008192:	2201      	movs	r2, #1
 8008194:	e7e1      	b.n	800815a <_dtoa_r+0x9ea>
 8008196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008198:	2b00      	cmp	r3, #0
 800819a:	db04      	blt.n	80081a6 <_dtoa_r+0xa36>
 800819c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800819e:	430b      	orrs	r3, r1
 80081a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081a2:	430b      	orrs	r3, r1
 80081a4:	d120      	bne.n	80081e8 <_dtoa_r+0xa78>
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	dded      	ble.n	8008186 <_dtoa_r+0xa16>
 80081aa:	4649      	mov	r1, r9
 80081ac:	2201      	movs	r2, #1
 80081ae:	4658      	mov	r0, fp
 80081b0:	f000 fbfa 	bl	80089a8 <__lshift>
 80081b4:	4621      	mov	r1, r4
 80081b6:	4681      	mov	r9, r0
 80081b8:	f000 fc62 	bl	8008a80 <__mcmp>
 80081bc:	2800      	cmp	r0, #0
 80081be:	dc03      	bgt.n	80081c8 <_dtoa_r+0xa58>
 80081c0:	d1e1      	bne.n	8008186 <_dtoa_r+0xa16>
 80081c2:	f018 0f01 	tst.w	r8, #1
 80081c6:	d0de      	beq.n	8008186 <_dtoa_r+0xa16>
 80081c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081cc:	d1d8      	bne.n	8008180 <_dtoa_r+0xa10>
 80081ce:	2339      	movs	r3, #57	@ 0x39
 80081d0:	9a02      	ldr	r2, [sp, #8]
 80081d2:	7013      	strb	r3, [r2, #0]
 80081d4:	4633      	mov	r3, r6
 80081d6:	461e      	mov	r6, r3
 80081d8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80081dc:	3b01      	subs	r3, #1
 80081de:	2a39      	cmp	r2, #57	@ 0x39
 80081e0:	d052      	beq.n	8008288 <_dtoa_r+0xb18>
 80081e2:	3201      	adds	r2, #1
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e60e      	b.n	8007e06 <_dtoa_r+0x696>
 80081e8:	2a00      	cmp	r2, #0
 80081ea:	dd07      	ble.n	80081fc <_dtoa_r+0xa8c>
 80081ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081f0:	d0ed      	beq.n	80081ce <_dtoa_r+0xa5e>
 80081f2:	9a02      	ldr	r2, [sp, #8]
 80081f4:	f108 0301 	add.w	r3, r8, #1
 80081f8:	7013      	strb	r3, [r2, #0]
 80081fa:	e604      	b.n	8007e06 <_dtoa_r+0x696>
 80081fc:	9b07      	ldr	r3, [sp, #28]
 80081fe:	9a07      	ldr	r2, [sp, #28]
 8008200:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008206:	4293      	cmp	r3, r2
 8008208:	d028      	beq.n	800825c <_dtoa_r+0xaec>
 800820a:	4649      	mov	r1, r9
 800820c:	2300      	movs	r3, #0
 800820e:	220a      	movs	r2, #10
 8008210:	4658      	mov	r0, fp
 8008212:	f000 f9d5 	bl	80085c0 <__multadd>
 8008216:	42af      	cmp	r7, r5
 8008218:	4681      	mov	r9, r0
 800821a:	f04f 0300 	mov.w	r3, #0
 800821e:	f04f 020a 	mov.w	r2, #10
 8008222:	4639      	mov	r1, r7
 8008224:	4658      	mov	r0, fp
 8008226:	d107      	bne.n	8008238 <_dtoa_r+0xac8>
 8008228:	f000 f9ca 	bl	80085c0 <__multadd>
 800822c:	4607      	mov	r7, r0
 800822e:	4605      	mov	r5, r0
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	3301      	adds	r3, #1
 8008234:	9307      	str	r3, [sp, #28]
 8008236:	e774      	b.n	8008122 <_dtoa_r+0x9b2>
 8008238:	f000 f9c2 	bl	80085c0 <__multadd>
 800823c:	4629      	mov	r1, r5
 800823e:	4607      	mov	r7, r0
 8008240:	2300      	movs	r3, #0
 8008242:	220a      	movs	r2, #10
 8008244:	4658      	mov	r0, fp
 8008246:	f000 f9bb 	bl	80085c0 <__multadd>
 800824a:	4605      	mov	r5, r0
 800824c:	e7f0      	b.n	8008230 <_dtoa_r+0xac0>
 800824e:	9b08      	ldr	r3, [sp, #32]
 8008250:	2700      	movs	r7, #0
 8008252:	2b00      	cmp	r3, #0
 8008254:	bfcc      	ite	gt
 8008256:	461e      	movgt	r6, r3
 8008258:	2601      	movle	r6, #1
 800825a:	4456      	add	r6, sl
 800825c:	4649      	mov	r1, r9
 800825e:	2201      	movs	r2, #1
 8008260:	4658      	mov	r0, fp
 8008262:	f000 fba1 	bl	80089a8 <__lshift>
 8008266:	4621      	mov	r1, r4
 8008268:	4681      	mov	r9, r0
 800826a:	f000 fc09 	bl	8008a80 <__mcmp>
 800826e:	2800      	cmp	r0, #0
 8008270:	dcb0      	bgt.n	80081d4 <_dtoa_r+0xa64>
 8008272:	d102      	bne.n	800827a <_dtoa_r+0xb0a>
 8008274:	f018 0f01 	tst.w	r8, #1
 8008278:	d1ac      	bne.n	80081d4 <_dtoa_r+0xa64>
 800827a:	4633      	mov	r3, r6
 800827c:	461e      	mov	r6, r3
 800827e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008282:	2a30      	cmp	r2, #48	@ 0x30
 8008284:	d0fa      	beq.n	800827c <_dtoa_r+0xb0c>
 8008286:	e5be      	b.n	8007e06 <_dtoa_r+0x696>
 8008288:	459a      	cmp	sl, r3
 800828a:	d1a4      	bne.n	80081d6 <_dtoa_r+0xa66>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	3301      	adds	r3, #1
 8008290:	9304      	str	r3, [sp, #16]
 8008292:	2331      	movs	r3, #49	@ 0x31
 8008294:	f88a 3000 	strb.w	r3, [sl]
 8008298:	e5b5      	b.n	8007e06 <_dtoa_r+0x696>
 800829a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800829c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082fc <_dtoa_r+0xb8c>
 80082a0:	b11b      	cbz	r3, 80082aa <_dtoa_r+0xb3a>
 80082a2:	f10a 0308 	add.w	r3, sl, #8
 80082a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	4650      	mov	r0, sl
 80082ac:	b017      	add	sp, #92	@ 0x5c
 80082ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	f77f ae3d 	ble.w	8007f34 <_dtoa_r+0x7c4>
 80082ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80082be:	2001      	movs	r0, #1
 80082c0:	e65b      	b.n	8007f7a <_dtoa_r+0x80a>
 80082c2:	9b08      	ldr	r3, [sp, #32]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f77f aed6 	ble.w	8008076 <_dtoa_r+0x906>
 80082ca:	4656      	mov	r6, sl
 80082cc:	4621      	mov	r1, r4
 80082ce:	4648      	mov	r0, r9
 80082d0:	f7ff f9c6 	bl	8007660 <quorem>
 80082d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082d8:	9b08      	ldr	r3, [sp, #32]
 80082da:	f806 8b01 	strb.w	r8, [r6], #1
 80082de:	eba6 020a 	sub.w	r2, r6, sl
 80082e2:	4293      	cmp	r3, r2
 80082e4:	ddb3      	ble.n	800824e <_dtoa_r+0xade>
 80082e6:	4649      	mov	r1, r9
 80082e8:	2300      	movs	r3, #0
 80082ea:	220a      	movs	r2, #10
 80082ec:	4658      	mov	r0, fp
 80082ee:	f000 f967 	bl	80085c0 <__multadd>
 80082f2:	4681      	mov	r9, r0
 80082f4:	e7ea      	b.n	80082cc <_dtoa_r+0xb5c>
 80082f6:	bf00      	nop
 80082f8:	0800bc27 	.word	0x0800bc27
 80082fc:	0800bbab 	.word	0x0800bbab

08008300 <_free_r>:
 8008300:	b538      	push	{r3, r4, r5, lr}
 8008302:	4605      	mov	r5, r0
 8008304:	2900      	cmp	r1, #0
 8008306:	d040      	beq.n	800838a <_free_r+0x8a>
 8008308:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800830c:	1f0c      	subs	r4, r1, #4
 800830e:	2b00      	cmp	r3, #0
 8008310:	bfb8      	it	lt
 8008312:	18e4      	addlt	r4, r4, r3
 8008314:	f000 f8e6 	bl	80084e4 <__malloc_lock>
 8008318:	4a1c      	ldr	r2, [pc, #112]	@ (800838c <_free_r+0x8c>)
 800831a:	6813      	ldr	r3, [r2, #0]
 800831c:	b933      	cbnz	r3, 800832c <_free_r+0x2c>
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	4628      	mov	r0, r5
 8008324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008328:	f000 b8e2 	b.w	80084f0 <__malloc_unlock>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d908      	bls.n	8008342 <_free_r+0x42>
 8008330:	6820      	ldr	r0, [r4, #0]
 8008332:	1821      	adds	r1, r4, r0
 8008334:	428b      	cmp	r3, r1
 8008336:	bf01      	itttt	eq
 8008338:	6819      	ldreq	r1, [r3, #0]
 800833a:	685b      	ldreq	r3, [r3, #4]
 800833c:	1809      	addeq	r1, r1, r0
 800833e:	6021      	streq	r1, [r4, #0]
 8008340:	e7ed      	b.n	800831e <_free_r+0x1e>
 8008342:	461a      	mov	r2, r3
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	b10b      	cbz	r3, 800834c <_free_r+0x4c>
 8008348:	42a3      	cmp	r3, r4
 800834a:	d9fa      	bls.n	8008342 <_free_r+0x42>
 800834c:	6811      	ldr	r1, [r2, #0]
 800834e:	1850      	adds	r0, r2, r1
 8008350:	42a0      	cmp	r0, r4
 8008352:	d10b      	bne.n	800836c <_free_r+0x6c>
 8008354:	6820      	ldr	r0, [r4, #0]
 8008356:	4401      	add	r1, r0
 8008358:	1850      	adds	r0, r2, r1
 800835a:	4283      	cmp	r3, r0
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	d1e0      	bne.n	8008322 <_free_r+0x22>
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	4408      	add	r0, r1
 8008366:	6010      	str	r0, [r2, #0]
 8008368:	6053      	str	r3, [r2, #4]
 800836a:	e7da      	b.n	8008322 <_free_r+0x22>
 800836c:	d902      	bls.n	8008374 <_free_r+0x74>
 800836e:	230c      	movs	r3, #12
 8008370:	602b      	str	r3, [r5, #0]
 8008372:	e7d6      	b.n	8008322 <_free_r+0x22>
 8008374:	6820      	ldr	r0, [r4, #0]
 8008376:	1821      	adds	r1, r4, r0
 8008378:	428b      	cmp	r3, r1
 800837a:	bf01      	itttt	eq
 800837c:	6819      	ldreq	r1, [r3, #0]
 800837e:	685b      	ldreq	r3, [r3, #4]
 8008380:	1809      	addeq	r1, r1, r0
 8008382:	6021      	streq	r1, [r4, #0]
 8008384:	6063      	str	r3, [r4, #4]
 8008386:	6054      	str	r4, [r2, #4]
 8008388:	e7cb      	b.n	8008322 <_free_r+0x22>
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	200008e0 	.word	0x200008e0

08008390 <malloc>:
 8008390:	4b02      	ldr	r3, [pc, #8]	@ (800839c <malloc+0xc>)
 8008392:	4601      	mov	r1, r0
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	f000 b825 	b.w	80083e4 <_malloc_r>
 800839a:	bf00      	nop
 800839c:	200003bc 	.word	0x200003bc

080083a0 <sbrk_aligned>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4e0f      	ldr	r6, [pc, #60]	@ (80083e0 <sbrk_aligned+0x40>)
 80083a4:	460c      	mov	r4, r1
 80083a6:	6831      	ldr	r1, [r6, #0]
 80083a8:	4605      	mov	r5, r0
 80083aa:	b911      	cbnz	r1, 80083b2 <sbrk_aligned+0x12>
 80083ac:	f001 fdf6 	bl	8009f9c <_sbrk_r>
 80083b0:	6030      	str	r0, [r6, #0]
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f001 fdf1 	bl	8009f9c <_sbrk_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d103      	bne.n	80083c6 <sbrk_aligned+0x26>
 80083be:	f04f 34ff 	mov.w	r4, #4294967295
 80083c2:	4620      	mov	r0, r4
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	1cc4      	adds	r4, r0, #3
 80083c8:	f024 0403 	bic.w	r4, r4, #3
 80083cc:	42a0      	cmp	r0, r4
 80083ce:	d0f8      	beq.n	80083c2 <sbrk_aligned+0x22>
 80083d0:	1a21      	subs	r1, r4, r0
 80083d2:	4628      	mov	r0, r5
 80083d4:	f001 fde2 	bl	8009f9c <_sbrk_r>
 80083d8:	3001      	adds	r0, #1
 80083da:	d1f2      	bne.n	80083c2 <sbrk_aligned+0x22>
 80083dc:	e7ef      	b.n	80083be <sbrk_aligned+0x1e>
 80083de:	bf00      	nop
 80083e0:	200008dc 	.word	0x200008dc

080083e4 <_malloc_r>:
 80083e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	1ccd      	adds	r5, r1, #3
 80083ea:	f025 0503 	bic.w	r5, r5, #3
 80083ee:	3508      	adds	r5, #8
 80083f0:	2d0c      	cmp	r5, #12
 80083f2:	bf38      	it	cc
 80083f4:	250c      	movcc	r5, #12
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	4606      	mov	r6, r0
 80083fa:	db01      	blt.n	8008400 <_malloc_r+0x1c>
 80083fc:	42a9      	cmp	r1, r5
 80083fe:	d904      	bls.n	800840a <_malloc_r+0x26>
 8008400:	230c      	movs	r3, #12
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	2000      	movs	r0, #0
 8008406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084e0 <_malloc_r+0xfc>
 800840e:	f000 f869 	bl	80084e4 <__malloc_lock>
 8008412:	f8d8 3000 	ldr.w	r3, [r8]
 8008416:	461c      	mov	r4, r3
 8008418:	bb44      	cbnz	r4, 800846c <_malloc_r+0x88>
 800841a:	4629      	mov	r1, r5
 800841c:	4630      	mov	r0, r6
 800841e:	f7ff ffbf 	bl	80083a0 <sbrk_aligned>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	4604      	mov	r4, r0
 8008426:	d158      	bne.n	80084da <_malloc_r+0xf6>
 8008428:	f8d8 4000 	ldr.w	r4, [r8]
 800842c:	4627      	mov	r7, r4
 800842e:	2f00      	cmp	r7, #0
 8008430:	d143      	bne.n	80084ba <_malloc_r+0xd6>
 8008432:	2c00      	cmp	r4, #0
 8008434:	d04b      	beq.n	80084ce <_malloc_r+0xea>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	4639      	mov	r1, r7
 800843a:	4630      	mov	r0, r6
 800843c:	eb04 0903 	add.w	r9, r4, r3
 8008440:	f001 fdac 	bl	8009f9c <_sbrk_r>
 8008444:	4581      	cmp	r9, r0
 8008446:	d142      	bne.n	80084ce <_malloc_r+0xea>
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	4630      	mov	r0, r6
 800844c:	1a6d      	subs	r5, r5, r1
 800844e:	4629      	mov	r1, r5
 8008450:	f7ff ffa6 	bl	80083a0 <sbrk_aligned>
 8008454:	3001      	adds	r0, #1
 8008456:	d03a      	beq.n	80084ce <_malloc_r+0xea>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	442b      	add	r3, r5
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	f8d8 3000 	ldr.w	r3, [r8]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	bb62      	cbnz	r2, 80084c0 <_malloc_r+0xdc>
 8008466:	f8c8 7000 	str.w	r7, [r8]
 800846a:	e00f      	b.n	800848c <_malloc_r+0xa8>
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	1b52      	subs	r2, r2, r5
 8008470:	d420      	bmi.n	80084b4 <_malloc_r+0xd0>
 8008472:	2a0b      	cmp	r2, #11
 8008474:	d917      	bls.n	80084a6 <_malloc_r+0xc2>
 8008476:	1961      	adds	r1, r4, r5
 8008478:	42a3      	cmp	r3, r4
 800847a:	6025      	str	r5, [r4, #0]
 800847c:	bf18      	it	ne
 800847e:	6059      	strne	r1, [r3, #4]
 8008480:	6863      	ldr	r3, [r4, #4]
 8008482:	bf08      	it	eq
 8008484:	f8c8 1000 	streq.w	r1, [r8]
 8008488:	5162      	str	r2, [r4, r5]
 800848a:	604b      	str	r3, [r1, #4]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 f82f 	bl	80084f0 <__malloc_unlock>
 8008492:	f104 000b 	add.w	r0, r4, #11
 8008496:	1d23      	adds	r3, r4, #4
 8008498:	f020 0007 	bic.w	r0, r0, #7
 800849c:	1ac2      	subs	r2, r0, r3
 800849e:	bf1c      	itt	ne
 80084a0:	1a1b      	subne	r3, r3, r0
 80084a2:	50a3      	strne	r3, [r4, r2]
 80084a4:	e7af      	b.n	8008406 <_malloc_r+0x22>
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	bf0c      	ite	eq
 80084ac:	f8c8 2000 	streq.w	r2, [r8]
 80084b0:	605a      	strne	r2, [r3, #4]
 80084b2:	e7eb      	b.n	800848c <_malloc_r+0xa8>
 80084b4:	4623      	mov	r3, r4
 80084b6:	6864      	ldr	r4, [r4, #4]
 80084b8:	e7ae      	b.n	8008418 <_malloc_r+0x34>
 80084ba:	463c      	mov	r4, r7
 80084bc:	687f      	ldr	r7, [r7, #4]
 80084be:	e7b6      	b.n	800842e <_malloc_r+0x4a>
 80084c0:	461a      	mov	r2, r3
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d1fb      	bne.n	80084c0 <_malloc_r+0xdc>
 80084c8:	2300      	movs	r3, #0
 80084ca:	6053      	str	r3, [r2, #4]
 80084cc:	e7de      	b.n	800848c <_malloc_r+0xa8>
 80084ce:	230c      	movs	r3, #12
 80084d0:	4630      	mov	r0, r6
 80084d2:	6033      	str	r3, [r6, #0]
 80084d4:	f000 f80c 	bl	80084f0 <__malloc_unlock>
 80084d8:	e794      	b.n	8008404 <_malloc_r+0x20>
 80084da:	6005      	str	r5, [r0, #0]
 80084dc:	e7d6      	b.n	800848c <_malloc_r+0xa8>
 80084de:	bf00      	nop
 80084e0:	200008e0 	.word	0x200008e0

080084e4 <__malloc_lock>:
 80084e4:	4801      	ldr	r0, [pc, #4]	@ (80084ec <__malloc_lock+0x8>)
 80084e6:	f7ff b898 	b.w	800761a <__retarget_lock_acquire_recursive>
 80084ea:	bf00      	nop
 80084ec:	200008d8 	.word	0x200008d8

080084f0 <__malloc_unlock>:
 80084f0:	4801      	ldr	r0, [pc, #4]	@ (80084f8 <__malloc_unlock+0x8>)
 80084f2:	f7ff b893 	b.w	800761c <__retarget_lock_release_recursive>
 80084f6:	bf00      	nop
 80084f8:	200008d8 	.word	0x200008d8

080084fc <_Balloc>:
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	69c6      	ldr	r6, [r0, #28]
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	b976      	cbnz	r6, 8008524 <_Balloc+0x28>
 8008506:	2010      	movs	r0, #16
 8008508:	f7ff ff42 	bl	8008390 <malloc>
 800850c:	4602      	mov	r2, r0
 800850e:	61e0      	str	r0, [r4, #28]
 8008510:	b920      	cbnz	r0, 800851c <_Balloc+0x20>
 8008512:	216b      	movs	r1, #107	@ 0x6b
 8008514:	4b17      	ldr	r3, [pc, #92]	@ (8008574 <_Balloc+0x78>)
 8008516:	4818      	ldr	r0, [pc, #96]	@ (8008578 <_Balloc+0x7c>)
 8008518:	f001 fd56 	bl	8009fc8 <__assert_func>
 800851c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008520:	6006      	str	r6, [r0, #0]
 8008522:	60c6      	str	r6, [r0, #12]
 8008524:	69e6      	ldr	r6, [r4, #28]
 8008526:	68f3      	ldr	r3, [r6, #12]
 8008528:	b183      	cbz	r3, 800854c <_Balloc+0x50>
 800852a:	69e3      	ldr	r3, [r4, #28]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008532:	b9b8      	cbnz	r0, 8008564 <_Balloc+0x68>
 8008534:	2101      	movs	r1, #1
 8008536:	fa01 f605 	lsl.w	r6, r1, r5
 800853a:	1d72      	adds	r2, r6, #5
 800853c:	4620      	mov	r0, r4
 800853e:	0092      	lsls	r2, r2, #2
 8008540:	f001 fd60 	bl	800a004 <_calloc_r>
 8008544:	b160      	cbz	r0, 8008560 <_Balloc+0x64>
 8008546:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800854a:	e00e      	b.n	800856a <_Balloc+0x6e>
 800854c:	2221      	movs	r2, #33	@ 0x21
 800854e:	2104      	movs	r1, #4
 8008550:	4620      	mov	r0, r4
 8008552:	f001 fd57 	bl	800a004 <_calloc_r>
 8008556:	69e3      	ldr	r3, [r4, #28]
 8008558:	60f0      	str	r0, [r6, #12]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e4      	bne.n	800852a <_Balloc+0x2e>
 8008560:	2000      	movs	r0, #0
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	6802      	ldr	r2, [r0, #0]
 8008566:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800856a:	2300      	movs	r3, #0
 800856c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008570:	e7f7      	b.n	8008562 <_Balloc+0x66>
 8008572:	bf00      	nop
 8008574:	0800bbb8 	.word	0x0800bbb8
 8008578:	0800bc38 	.word	0x0800bc38

0800857c <_Bfree>:
 800857c:	b570      	push	{r4, r5, r6, lr}
 800857e:	69c6      	ldr	r6, [r0, #28]
 8008580:	4605      	mov	r5, r0
 8008582:	460c      	mov	r4, r1
 8008584:	b976      	cbnz	r6, 80085a4 <_Bfree+0x28>
 8008586:	2010      	movs	r0, #16
 8008588:	f7ff ff02 	bl	8008390 <malloc>
 800858c:	4602      	mov	r2, r0
 800858e:	61e8      	str	r0, [r5, #28]
 8008590:	b920      	cbnz	r0, 800859c <_Bfree+0x20>
 8008592:	218f      	movs	r1, #143	@ 0x8f
 8008594:	4b08      	ldr	r3, [pc, #32]	@ (80085b8 <_Bfree+0x3c>)
 8008596:	4809      	ldr	r0, [pc, #36]	@ (80085bc <_Bfree+0x40>)
 8008598:	f001 fd16 	bl	8009fc8 <__assert_func>
 800859c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085a0:	6006      	str	r6, [r0, #0]
 80085a2:	60c6      	str	r6, [r0, #12]
 80085a4:	b13c      	cbz	r4, 80085b6 <_Bfree+0x3a>
 80085a6:	69eb      	ldr	r3, [r5, #28]
 80085a8:	6862      	ldr	r2, [r4, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085b0:	6021      	str	r1, [r4, #0]
 80085b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	0800bbb8 	.word	0x0800bbb8
 80085bc:	0800bc38 	.word	0x0800bc38

080085c0 <__multadd>:
 80085c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c4:	4607      	mov	r7, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	461e      	mov	r6, r3
 80085ca:	2000      	movs	r0, #0
 80085cc:	690d      	ldr	r5, [r1, #16]
 80085ce:	f101 0c14 	add.w	ip, r1, #20
 80085d2:	f8dc 3000 	ldr.w	r3, [ip]
 80085d6:	3001      	adds	r0, #1
 80085d8:	b299      	uxth	r1, r3
 80085da:	fb02 6101 	mla	r1, r2, r1, r6
 80085de:	0c1e      	lsrs	r6, r3, #16
 80085e0:	0c0b      	lsrs	r3, r1, #16
 80085e2:	fb02 3306 	mla	r3, r2, r6, r3
 80085e6:	b289      	uxth	r1, r1
 80085e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085ec:	4285      	cmp	r5, r0
 80085ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085f2:	f84c 1b04 	str.w	r1, [ip], #4
 80085f6:	dcec      	bgt.n	80085d2 <__multadd+0x12>
 80085f8:	b30e      	cbz	r6, 800863e <__multadd+0x7e>
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	42ab      	cmp	r3, r5
 80085fe:	dc19      	bgt.n	8008634 <__multadd+0x74>
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	4638      	mov	r0, r7
 8008604:	3101      	adds	r1, #1
 8008606:	f7ff ff79 	bl	80084fc <_Balloc>
 800860a:	4680      	mov	r8, r0
 800860c:	b928      	cbnz	r0, 800861a <__multadd+0x5a>
 800860e:	4602      	mov	r2, r0
 8008610:	21ba      	movs	r1, #186	@ 0xba
 8008612:	4b0c      	ldr	r3, [pc, #48]	@ (8008644 <__multadd+0x84>)
 8008614:	480c      	ldr	r0, [pc, #48]	@ (8008648 <__multadd+0x88>)
 8008616:	f001 fcd7 	bl	8009fc8 <__assert_func>
 800861a:	6922      	ldr	r2, [r4, #16]
 800861c:	f104 010c 	add.w	r1, r4, #12
 8008620:	3202      	adds	r2, #2
 8008622:	0092      	lsls	r2, r2, #2
 8008624:	300c      	adds	r0, #12
 8008626:	f7ff f808 	bl	800763a <memcpy>
 800862a:	4621      	mov	r1, r4
 800862c:	4638      	mov	r0, r7
 800862e:	f7ff ffa5 	bl	800857c <_Bfree>
 8008632:	4644      	mov	r4, r8
 8008634:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008638:	3501      	adds	r5, #1
 800863a:	615e      	str	r6, [r3, #20]
 800863c:	6125      	str	r5, [r4, #16]
 800863e:	4620      	mov	r0, r4
 8008640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008644:	0800bc27 	.word	0x0800bc27
 8008648:	0800bc38 	.word	0x0800bc38

0800864c <__s2b>:
 800864c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008650:	4615      	mov	r5, r2
 8008652:	2209      	movs	r2, #9
 8008654:	461f      	mov	r7, r3
 8008656:	3308      	adds	r3, #8
 8008658:	460c      	mov	r4, r1
 800865a:	fb93 f3f2 	sdiv	r3, r3, r2
 800865e:	4606      	mov	r6, r0
 8008660:	2201      	movs	r2, #1
 8008662:	2100      	movs	r1, #0
 8008664:	429a      	cmp	r2, r3
 8008666:	db09      	blt.n	800867c <__s2b+0x30>
 8008668:	4630      	mov	r0, r6
 800866a:	f7ff ff47 	bl	80084fc <_Balloc>
 800866e:	b940      	cbnz	r0, 8008682 <__s2b+0x36>
 8008670:	4602      	mov	r2, r0
 8008672:	21d3      	movs	r1, #211	@ 0xd3
 8008674:	4b18      	ldr	r3, [pc, #96]	@ (80086d8 <__s2b+0x8c>)
 8008676:	4819      	ldr	r0, [pc, #100]	@ (80086dc <__s2b+0x90>)
 8008678:	f001 fca6 	bl	8009fc8 <__assert_func>
 800867c:	0052      	lsls	r2, r2, #1
 800867e:	3101      	adds	r1, #1
 8008680:	e7f0      	b.n	8008664 <__s2b+0x18>
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	2d09      	cmp	r5, #9
 8008686:	6143      	str	r3, [r0, #20]
 8008688:	f04f 0301 	mov.w	r3, #1
 800868c:	6103      	str	r3, [r0, #16]
 800868e:	dd16      	ble.n	80086be <__s2b+0x72>
 8008690:	f104 0909 	add.w	r9, r4, #9
 8008694:	46c8      	mov	r8, r9
 8008696:	442c      	add	r4, r5
 8008698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800869c:	4601      	mov	r1, r0
 800869e:	220a      	movs	r2, #10
 80086a0:	4630      	mov	r0, r6
 80086a2:	3b30      	subs	r3, #48	@ 0x30
 80086a4:	f7ff ff8c 	bl	80085c0 <__multadd>
 80086a8:	45a0      	cmp	r8, r4
 80086aa:	d1f5      	bne.n	8008698 <__s2b+0x4c>
 80086ac:	f1a5 0408 	sub.w	r4, r5, #8
 80086b0:	444c      	add	r4, r9
 80086b2:	1b2d      	subs	r5, r5, r4
 80086b4:	1963      	adds	r3, r4, r5
 80086b6:	42bb      	cmp	r3, r7
 80086b8:	db04      	blt.n	80086c4 <__s2b+0x78>
 80086ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086be:	2509      	movs	r5, #9
 80086c0:	340a      	adds	r4, #10
 80086c2:	e7f6      	b.n	80086b2 <__s2b+0x66>
 80086c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80086c8:	4601      	mov	r1, r0
 80086ca:	220a      	movs	r2, #10
 80086cc:	4630      	mov	r0, r6
 80086ce:	3b30      	subs	r3, #48	@ 0x30
 80086d0:	f7ff ff76 	bl	80085c0 <__multadd>
 80086d4:	e7ee      	b.n	80086b4 <__s2b+0x68>
 80086d6:	bf00      	nop
 80086d8:	0800bc27 	.word	0x0800bc27
 80086dc:	0800bc38 	.word	0x0800bc38

080086e0 <__hi0bits>:
 80086e0:	4603      	mov	r3, r0
 80086e2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086e6:	bf3a      	itte	cc
 80086e8:	0403      	lslcc	r3, r0, #16
 80086ea:	2010      	movcc	r0, #16
 80086ec:	2000      	movcs	r0, #0
 80086ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086f2:	bf3c      	itt	cc
 80086f4:	021b      	lslcc	r3, r3, #8
 80086f6:	3008      	addcc	r0, #8
 80086f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086fc:	bf3c      	itt	cc
 80086fe:	011b      	lslcc	r3, r3, #4
 8008700:	3004      	addcc	r0, #4
 8008702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008706:	bf3c      	itt	cc
 8008708:	009b      	lslcc	r3, r3, #2
 800870a:	3002      	addcc	r0, #2
 800870c:	2b00      	cmp	r3, #0
 800870e:	db05      	blt.n	800871c <__hi0bits+0x3c>
 8008710:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008714:	f100 0001 	add.w	r0, r0, #1
 8008718:	bf08      	it	eq
 800871a:	2020      	moveq	r0, #32
 800871c:	4770      	bx	lr

0800871e <__lo0bits>:
 800871e:	6803      	ldr	r3, [r0, #0]
 8008720:	4602      	mov	r2, r0
 8008722:	f013 0007 	ands.w	r0, r3, #7
 8008726:	d00b      	beq.n	8008740 <__lo0bits+0x22>
 8008728:	07d9      	lsls	r1, r3, #31
 800872a:	d421      	bmi.n	8008770 <__lo0bits+0x52>
 800872c:	0798      	lsls	r0, r3, #30
 800872e:	bf49      	itett	mi
 8008730:	085b      	lsrmi	r3, r3, #1
 8008732:	089b      	lsrpl	r3, r3, #2
 8008734:	2001      	movmi	r0, #1
 8008736:	6013      	strmi	r3, [r2, #0]
 8008738:	bf5c      	itt	pl
 800873a:	2002      	movpl	r0, #2
 800873c:	6013      	strpl	r3, [r2, #0]
 800873e:	4770      	bx	lr
 8008740:	b299      	uxth	r1, r3
 8008742:	b909      	cbnz	r1, 8008748 <__lo0bits+0x2a>
 8008744:	2010      	movs	r0, #16
 8008746:	0c1b      	lsrs	r3, r3, #16
 8008748:	b2d9      	uxtb	r1, r3
 800874a:	b909      	cbnz	r1, 8008750 <__lo0bits+0x32>
 800874c:	3008      	adds	r0, #8
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	0719      	lsls	r1, r3, #28
 8008752:	bf04      	itt	eq
 8008754:	091b      	lsreq	r3, r3, #4
 8008756:	3004      	addeq	r0, #4
 8008758:	0799      	lsls	r1, r3, #30
 800875a:	bf04      	itt	eq
 800875c:	089b      	lsreq	r3, r3, #2
 800875e:	3002      	addeq	r0, #2
 8008760:	07d9      	lsls	r1, r3, #31
 8008762:	d403      	bmi.n	800876c <__lo0bits+0x4e>
 8008764:	085b      	lsrs	r3, r3, #1
 8008766:	f100 0001 	add.w	r0, r0, #1
 800876a:	d003      	beq.n	8008774 <__lo0bits+0x56>
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	4770      	bx	lr
 8008770:	2000      	movs	r0, #0
 8008772:	4770      	bx	lr
 8008774:	2020      	movs	r0, #32
 8008776:	4770      	bx	lr

08008778 <__i2b>:
 8008778:	b510      	push	{r4, lr}
 800877a:	460c      	mov	r4, r1
 800877c:	2101      	movs	r1, #1
 800877e:	f7ff febd 	bl	80084fc <_Balloc>
 8008782:	4602      	mov	r2, r0
 8008784:	b928      	cbnz	r0, 8008792 <__i2b+0x1a>
 8008786:	f240 1145 	movw	r1, #325	@ 0x145
 800878a:	4b04      	ldr	r3, [pc, #16]	@ (800879c <__i2b+0x24>)
 800878c:	4804      	ldr	r0, [pc, #16]	@ (80087a0 <__i2b+0x28>)
 800878e:	f001 fc1b 	bl	8009fc8 <__assert_func>
 8008792:	2301      	movs	r3, #1
 8008794:	6144      	str	r4, [r0, #20]
 8008796:	6103      	str	r3, [r0, #16]
 8008798:	bd10      	pop	{r4, pc}
 800879a:	bf00      	nop
 800879c:	0800bc27 	.word	0x0800bc27
 80087a0:	0800bc38 	.word	0x0800bc38

080087a4 <__multiply>:
 80087a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a8:	4614      	mov	r4, r2
 80087aa:	690a      	ldr	r2, [r1, #16]
 80087ac:	6923      	ldr	r3, [r4, #16]
 80087ae:	460f      	mov	r7, r1
 80087b0:	429a      	cmp	r2, r3
 80087b2:	bfa2      	ittt	ge
 80087b4:	4623      	movge	r3, r4
 80087b6:	460c      	movge	r4, r1
 80087b8:	461f      	movge	r7, r3
 80087ba:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087be:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	6861      	ldr	r1, [r4, #4]
 80087c6:	eb0a 0609 	add.w	r6, sl, r9
 80087ca:	42b3      	cmp	r3, r6
 80087cc:	b085      	sub	sp, #20
 80087ce:	bfb8      	it	lt
 80087d0:	3101      	addlt	r1, #1
 80087d2:	f7ff fe93 	bl	80084fc <_Balloc>
 80087d6:	b930      	cbnz	r0, 80087e6 <__multiply+0x42>
 80087d8:	4602      	mov	r2, r0
 80087da:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087de:	4b43      	ldr	r3, [pc, #268]	@ (80088ec <__multiply+0x148>)
 80087e0:	4843      	ldr	r0, [pc, #268]	@ (80088f0 <__multiply+0x14c>)
 80087e2:	f001 fbf1 	bl	8009fc8 <__assert_func>
 80087e6:	f100 0514 	add.w	r5, r0, #20
 80087ea:	462b      	mov	r3, r5
 80087ec:	2200      	movs	r2, #0
 80087ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087f2:	4543      	cmp	r3, r8
 80087f4:	d321      	bcc.n	800883a <__multiply+0x96>
 80087f6:	f107 0114 	add.w	r1, r7, #20
 80087fa:	f104 0214 	add.w	r2, r4, #20
 80087fe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008802:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008806:	9302      	str	r3, [sp, #8]
 8008808:	1b13      	subs	r3, r2, r4
 800880a:	3b15      	subs	r3, #21
 800880c:	f023 0303 	bic.w	r3, r3, #3
 8008810:	3304      	adds	r3, #4
 8008812:	f104 0715 	add.w	r7, r4, #21
 8008816:	42ba      	cmp	r2, r7
 8008818:	bf38      	it	cc
 800881a:	2304      	movcc	r3, #4
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	428b      	cmp	r3, r1
 8008824:	d80c      	bhi.n	8008840 <__multiply+0x9c>
 8008826:	2e00      	cmp	r6, #0
 8008828:	dd03      	ble.n	8008832 <__multiply+0x8e>
 800882a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800882e:	2b00      	cmp	r3, #0
 8008830:	d05a      	beq.n	80088e8 <__multiply+0x144>
 8008832:	6106      	str	r6, [r0, #16]
 8008834:	b005      	add	sp, #20
 8008836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883a:	f843 2b04 	str.w	r2, [r3], #4
 800883e:	e7d8      	b.n	80087f2 <__multiply+0x4e>
 8008840:	f8b1 a000 	ldrh.w	sl, [r1]
 8008844:	f1ba 0f00 	cmp.w	sl, #0
 8008848:	d023      	beq.n	8008892 <__multiply+0xee>
 800884a:	46a9      	mov	r9, r5
 800884c:	f04f 0c00 	mov.w	ip, #0
 8008850:	f104 0e14 	add.w	lr, r4, #20
 8008854:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008858:	f8d9 3000 	ldr.w	r3, [r9]
 800885c:	fa1f fb87 	uxth.w	fp, r7
 8008860:	b29b      	uxth	r3, r3
 8008862:	fb0a 330b 	mla	r3, sl, fp, r3
 8008866:	4463      	add	r3, ip
 8008868:	f8d9 c000 	ldr.w	ip, [r9]
 800886c:	0c3f      	lsrs	r7, r7, #16
 800886e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008872:	fb0a c707 	mla	r7, sl, r7, ip
 8008876:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800887a:	b29b      	uxth	r3, r3
 800887c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008880:	4572      	cmp	r2, lr
 8008882:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008886:	f849 3b04 	str.w	r3, [r9], #4
 800888a:	d8e3      	bhi.n	8008854 <__multiply+0xb0>
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	f845 c003 	str.w	ip, [r5, r3]
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3104      	adds	r1, #4
 8008896:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800889a:	f1b9 0f00 	cmp.w	r9, #0
 800889e:	d021      	beq.n	80088e4 <__multiply+0x140>
 80088a0:	46ae      	mov	lr, r5
 80088a2:	f04f 0a00 	mov.w	sl, #0
 80088a6:	682b      	ldr	r3, [r5, #0]
 80088a8:	f104 0c14 	add.w	ip, r4, #20
 80088ac:	f8bc b000 	ldrh.w	fp, [ip]
 80088b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	fb09 770b 	mla	r7, r9, fp, r7
 80088ba:	4457      	add	r7, sl
 80088bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088c0:	f84e 3b04 	str.w	r3, [lr], #4
 80088c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088cc:	f8be 3000 	ldrh.w	r3, [lr]
 80088d0:	4562      	cmp	r2, ip
 80088d2:	fb09 330a 	mla	r3, r9, sl, r3
 80088d6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088de:	d8e5      	bhi.n	80088ac <__multiply+0x108>
 80088e0:	9f01      	ldr	r7, [sp, #4]
 80088e2:	51eb      	str	r3, [r5, r7]
 80088e4:	3504      	adds	r5, #4
 80088e6:	e79a      	b.n	800881e <__multiply+0x7a>
 80088e8:	3e01      	subs	r6, #1
 80088ea:	e79c      	b.n	8008826 <__multiply+0x82>
 80088ec:	0800bc27 	.word	0x0800bc27
 80088f0:	0800bc38 	.word	0x0800bc38

080088f4 <__pow5mult>:
 80088f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f8:	4615      	mov	r5, r2
 80088fa:	f012 0203 	ands.w	r2, r2, #3
 80088fe:	4607      	mov	r7, r0
 8008900:	460e      	mov	r6, r1
 8008902:	d007      	beq.n	8008914 <__pow5mult+0x20>
 8008904:	4c25      	ldr	r4, [pc, #148]	@ (800899c <__pow5mult+0xa8>)
 8008906:	3a01      	subs	r2, #1
 8008908:	2300      	movs	r3, #0
 800890a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800890e:	f7ff fe57 	bl	80085c0 <__multadd>
 8008912:	4606      	mov	r6, r0
 8008914:	10ad      	asrs	r5, r5, #2
 8008916:	d03d      	beq.n	8008994 <__pow5mult+0xa0>
 8008918:	69fc      	ldr	r4, [r7, #28]
 800891a:	b97c      	cbnz	r4, 800893c <__pow5mult+0x48>
 800891c:	2010      	movs	r0, #16
 800891e:	f7ff fd37 	bl	8008390 <malloc>
 8008922:	4602      	mov	r2, r0
 8008924:	61f8      	str	r0, [r7, #28]
 8008926:	b928      	cbnz	r0, 8008934 <__pow5mult+0x40>
 8008928:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800892c:	4b1c      	ldr	r3, [pc, #112]	@ (80089a0 <__pow5mult+0xac>)
 800892e:	481d      	ldr	r0, [pc, #116]	@ (80089a4 <__pow5mult+0xb0>)
 8008930:	f001 fb4a 	bl	8009fc8 <__assert_func>
 8008934:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008938:	6004      	str	r4, [r0, #0]
 800893a:	60c4      	str	r4, [r0, #12]
 800893c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008940:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008944:	b94c      	cbnz	r4, 800895a <__pow5mult+0x66>
 8008946:	f240 2171 	movw	r1, #625	@ 0x271
 800894a:	4638      	mov	r0, r7
 800894c:	f7ff ff14 	bl	8008778 <__i2b>
 8008950:	2300      	movs	r3, #0
 8008952:	4604      	mov	r4, r0
 8008954:	f8c8 0008 	str.w	r0, [r8, #8]
 8008958:	6003      	str	r3, [r0, #0]
 800895a:	f04f 0900 	mov.w	r9, #0
 800895e:	07eb      	lsls	r3, r5, #31
 8008960:	d50a      	bpl.n	8008978 <__pow5mult+0x84>
 8008962:	4631      	mov	r1, r6
 8008964:	4622      	mov	r2, r4
 8008966:	4638      	mov	r0, r7
 8008968:	f7ff ff1c 	bl	80087a4 <__multiply>
 800896c:	4680      	mov	r8, r0
 800896e:	4631      	mov	r1, r6
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff fe03 	bl	800857c <_Bfree>
 8008976:	4646      	mov	r6, r8
 8008978:	106d      	asrs	r5, r5, #1
 800897a:	d00b      	beq.n	8008994 <__pow5mult+0xa0>
 800897c:	6820      	ldr	r0, [r4, #0]
 800897e:	b938      	cbnz	r0, 8008990 <__pow5mult+0x9c>
 8008980:	4622      	mov	r2, r4
 8008982:	4621      	mov	r1, r4
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff ff0d 	bl	80087a4 <__multiply>
 800898a:	6020      	str	r0, [r4, #0]
 800898c:	f8c0 9000 	str.w	r9, [r0]
 8008990:	4604      	mov	r4, r0
 8008992:	e7e4      	b.n	800895e <__pow5mult+0x6a>
 8008994:	4630      	mov	r0, r6
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	bf00      	nop
 800899c:	0800bc94 	.word	0x0800bc94
 80089a0:	0800bbb8 	.word	0x0800bbb8
 80089a4:	0800bc38 	.word	0x0800bc38

080089a8 <__lshift>:
 80089a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089ac:	460c      	mov	r4, r1
 80089ae:	4607      	mov	r7, r0
 80089b0:	4691      	mov	r9, r2
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	6849      	ldr	r1, [r1, #4]
 80089b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80089ba:	68a3      	ldr	r3, [r4, #8]
 80089bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089c0:	f108 0601 	add.w	r6, r8, #1
 80089c4:	42b3      	cmp	r3, r6
 80089c6:	db0b      	blt.n	80089e0 <__lshift+0x38>
 80089c8:	4638      	mov	r0, r7
 80089ca:	f7ff fd97 	bl	80084fc <_Balloc>
 80089ce:	4605      	mov	r5, r0
 80089d0:	b948      	cbnz	r0, 80089e6 <__lshift+0x3e>
 80089d2:	4602      	mov	r2, r0
 80089d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089d8:	4b27      	ldr	r3, [pc, #156]	@ (8008a78 <__lshift+0xd0>)
 80089da:	4828      	ldr	r0, [pc, #160]	@ (8008a7c <__lshift+0xd4>)
 80089dc:	f001 faf4 	bl	8009fc8 <__assert_func>
 80089e0:	3101      	adds	r1, #1
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	e7ee      	b.n	80089c4 <__lshift+0x1c>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f100 0114 	add.w	r1, r0, #20
 80089ec:	f100 0210 	add.w	r2, r0, #16
 80089f0:	4618      	mov	r0, r3
 80089f2:	4553      	cmp	r3, sl
 80089f4:	db33      	blt.n	8008a5e <__lshift+0xb6>
 80089f6:	6920      	ldr	r0, [r4, #16]
 80089f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089fc:	f104 0314 	add.w	r3, r4, #20
 8008a00:	f019 091f 	ands.w	r9, r9, #31
 8008a04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a0c:	d02b      	beq.n	8008a66 <__lshift+0xbe>
 8008a0e:	468a      	mov	sl, r1
 8008a10:	2200      	movs	r2, #0
 8008a12:	f1c9 0e20 	rsb	lr, r9, #32
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	fa00 f009 	lsl.w	r0, r0, r9
 8008a1c:	4310      	orrs	r0, r2
 8008a1e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a26:	459c      	cmp	ip, r3
 8008a28:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a2c:	d8f3      	bhi.n	8008a16 <__lshift+0x6e>
 8008a2e:	ebac 0304 	sub.w	r3, ip, r4
 8008a32:	3b15      	subs	r3, #21
 8008a34:	f023 0303 	bic.w	r3, r3, #3
 8008a38:	3304      	adds	r3, #4
 8008a3a:	f104 0015 	add.w	r0, r4, #21
 8008a3e:	4584      	cmp	ip, r0
 8008a40:	bf38      	it	cc
 8008a42:	2304      	movcc	r3, #4
 8008a44:	50ca      	str	r2, [r1, r3]
 8008a46:	b10a      	cbz	r2, 8008a4c <__lshift+0xa4>
 8008a48:	f108 0602 	add.w	r6, r8, #2
 8008a4c:	3e01      	subs	r6, #1
 8008a4e:	4638      	mov	r0, r7
 8008a50:	4621      	mov	r1, r4
 8008a52:	612e      	str	r6, [r5, #16]
 8008a54:	f7ff fd92 	bl	800857c <_Bfree>
 8008a58:	4628      	mov	r0, r5
 8008a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a62:	3301      	adds	r3, #1
 8008a64:	e7c5      	b.n	80089f2 <__lshift+0x4a>
 8008a66:	3904      	subs	r1, #4
 8008a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6c:	459c      	cmp	ip, r3
 8008a6e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a72:	d8f9      	bhi.n	8008a68 <__lshift+0xc0>
 8008a74:	e7ea      	b.n	8008a4c <__lshift+0xa4>
 8008a76:	bf00      	nop
 8008a78:	0800bc27 	.word	0x0800bc27
 8008a7c:	0800bc38 	.word	0x0800bc38

08008a80 <__mcmp>:
 8008a80:	4603      	mov	r3, r0
 8008a82:	690a      	ldr	r2, [r1, #16]
 8008a84:	6900      	ldr	r0, [r0, #16]
 8008a86:	b530      	push	{r4, r5, lr}
 8008a88:	1a80      	subs	r0, r0, r2
 8008a8a:	d10e      	bne.n	8008aaa <__mcmp+0x2a>
 8008a8c:	3314      	adds	r3, #20
 8008a8e:	3114      	adds	r1, #20
 8008a90:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a94:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008aa0:	4295      	cmp	r5, r2
 8008aa2:	d003      	beq.n	8008aac <__mcmp+0x2c>
 8008aa4:	d205      	bcs.n	8008ab2 <__mcmp+0x32>
 8008aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008aaa:	bd30      	pop	{r4, r5, pc}
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	d3f3      	bcc.n	8008a98 <__mcmp+0x18>
 8008ab0:	e7fb      	b.n	8008aaa <__mcmp+0x2a>
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7f9      	b.n	8008aaa <__mcmp+0x2a>
	...

08008ab8 <__mdiff>:
 8008ab8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	4689      	mov	r9, r1
 8008abe:	4606      	mov	r6, r0
 8008ac0:	4611      	mov	r1, r2
 8008ac2:	4648      	mov	r0, r9
 8008ac4:	4614      	mov	r4, r2
 8008ac6:	f7ff ffdb 	bl	8008a80 <__mcmp>
 8008aca:	1e05      	subs	r5, r0, #0
 8008acc:	d112      	bne.n	8008af4 <__mdiff+0x3c>
 8008ace:	4629      	mov	r1, r5
 8008ad0:	4630      	mov	r0, r6
 8008ad2:	f7ff fd13 	bl	80084fc <_Balloc>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	b928      	cbnz	r0, 8008ae6 <__mdiff+0x2e>
 8008ada:	f240 2137 	movw	r1, #567	@ 0x237
 8008ade:	4b3e      	ldr	r3, [pc, #248]	@ (8008bd8 <__mdiff+0x120>)
 8008ae0:	483e      	ldr	r0, [pc, #248]	@ (8008bdc <__mdiff+0x124>)
 8008ae2:	f001 fa71 	bl	8009fc8 <__assert_func>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008aec:	4610      	mov	r0, r2
 8008aee:	b003      	add	sp, #12
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af4:	bfbc      	itt	lt
 8008af6:	464b      	movlt	r3, r9
 8008af8:	46a1      	movlt	r9, r4
 8008afa:	4630      	mov	r0, r6
 8008afc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b00:	bfba      	itte	lt
 8008b02:	461c      	movlt	r4, r3
 8008b04:	2501      	movlt	r5, #1
 8008b06:	2500      	movge	r5, #0
 8008b08:	f7ff fcf8 	bl	80084fc <_Balloc>
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	b918      	cbnz	r0, 8008b18 <__mdiff+0x60>
 8008b10:	f240 2145 	movw	r1, #581	@ 0x245
 8008b14:	4b30      	ldr	r3, [pc, #192]	@ (8008bd8 <__mdiff+0x120>)
 8008b16:	e7e3      	b.n	8008ae0 <__mdiff+0x28>
 8008b18:	f100 0b14 	add.w	fp, r0, #20
 8008b1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b20:	f109 0310 	add.w	r3, r9, #16
 8008b24:	60c5      	str	r5, [r0, #12]
 8008b26:	f04f 0c00 	mov.w	ip, #0
 8008b2a:	f109 0514 	add.w	r5, r9, #20
 8008b2e:	46d9      	mov	r9, fp
 8008b30:	6926      	ldr	r6, [r4, #16]
 8008b32:	f104 0e14 	add.w	lr, r4, #20
 8008b36:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b3a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b46:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b4a:	b281      	uxth	r1, r0
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	fa1f f38a 	uxth.w	r3, sl
 8008b52:	1a5b      	subs	r3, r3, r1
 8008b54:	0c00      	lsrs	r0, r0, #16
 8008b56:	4463      	add	r3, ip
 8008b58:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b5c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b66:	4576      	cmp	r6, lr
 8008b68:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b6c:	f849 3b04 	str.w	r3, [r9], #4
 8008b70:	d8e6      	bhi.n	8008b40 <__mdiff+0x88>
 8008b72:	1b33      	subs	r3, r6, r4
 8008b74:	3b15      	subs	r3, #21
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	3415      	adds	r4, #21
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	bf38      	it	cc
 8008b82:	2304      	movcc	r3, #4
 8008b84:	441d      	add	r5, r3
 8008b86:	445b      	add	r3, fp
 8008b88:	461e      	mov	r6, r3
 8008b8a:	462c      	mov	r4, r5
 8008b8c:	4544      	cmp	r4, r8
 8008b8e:	d30e      	bcc.n	8008bae <__mdiff+0xf6>
 8008b90:	f108 0103 	add.w	r1, r8, #3
 8008b94:	1b49      	subs	r1, r1, r5
 8008b96:	f021 0103 	bic.w	r1, r1, #3
 8008b9a:	3d03      	subs	r5, #3
 8008b9c:	45a8      	cmp	r8, r5
 8008b9e:	bf38      	it	cc
 8008ba0:	2100      	movcc	r1, #0
 8008ba2:	440b      	add	r3, r1
 8008ba4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ba8:	b199      	cbz	r1, 8008bd2 <__mdiff+0x11a>
 8008baa:	6117      	str	r7, [r2, #16]
 8008bac:	e79e      	b.n	8008aec <__mdiff+0x34>
 8008bae:	46e6      	mov	lr, ip
 8008bb0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008bb4:	fa1f fc81 	uxth.w	ip, r1
 8008bb8:	44f4      	add	ip, lr
 8008bba:	0c08      	lsrs	r0, r1, #16
 8008bbc:	4471      	add	r1, lr
 8008bbe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008bc2:	b289      	uxth	r1, r1
 8008bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bcc:	f846 1b04 	str.w	r1, [r6], #4
 8008bd0:	e7dc      	b.n	8008b8c <__mdiff+0xd4>
 8008bd2:	3f01      	subs	r7, #1
 8008bd4:	e7e6      	b.n	8008ba4 <__mdiff+0xec>
 8008bd6:	bf00      	nop
 8008bd8:	0800bc27 	.word	0x0800bc27
 8008bdc:	0800bc38 	.word	0x0800bc38

08008be0 <__ulp>:
 8008be0:	4b0e      	ldr	r3, [pc, #56]	@ (8008c1c <__ulp+0x3c>)
 8008be2:	400b      	ands	r3, r1
 8008be4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc08      	bgt.n	8008bfe <__ulp+0x1e>
 8008bec:	425b      	negs	r3, r3
 8008bee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008bf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008bf6:	da04      	bge.n	8008c02 <__ulp+0x22>
 8008bf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008bfc:	4113      	asrs	r3, r2
 8008bfe:	2200      	movs	r2, #0
 8008c00:	e008      	b.n	8008c14 <__ulp+0x34>
 8008c02:	f1a2 0314 	sub.w	r3, r2, #20
 8008c06:	2b1e      	cmp	r3, #30
 8008c08:	bfd6      	itet	le
 8008c0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c0e:	2201      	movgt	r2, #1
 8008c10:	40da      	lsrle	r2, r3
 8008c12:	2300      	movs	r3, #0
 8008c14:	4619      	mov	r1, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	7ff00000 	.word	0x7ff00000

08008c20 <__b2d>:
 8008c20:	6902      	ldr	r2, [r0, #16]
 8008c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c24:	f100 0614 	add.w	r6, r0, #20
 8008c28:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008c2c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008c30:	4f1e      	ldr	r7, [pc, #120]	@ (8008cac <__b2d+0x8c>)
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7ff fd54 	bl	80086e0 <__hi0bits>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f1c0 0020 	rsb	r0, r0, #32
 8008c3e:	2b0a      	cmp	r3, #10
 8008c40:	f1a2 0504 	sub.w	r5, r2, #4
 8008c44:	6008      	str	r0, [r1, #0]
 8008c46:	dc12      	bgt.n	8008c6e <__b2d+0x4e>
 8008c48:	42ae      	cmp	r6, r5
 8008c4a:	bf2c      	ite	cs
 8008c4c:	2200      	movcs	r2, #0
 8008c4e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c52:	f1c3 0c0b 	rsb	ip, r3, #11
 8008c56:	3315      	adds	r3, #21
 8008c58:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008c5c:	fa04 f303 	lsl.w	r3, r4, r3
 8008c60:	fa22 f20c 	lsr.w	r2, r2, ip
 8008c64:	ea4e 0107 	orr.w	r1, lr, r7
 8008c68:	431a      	orrs	r2, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c6e:	42ae      	cmp	r6, r5
 8008c70:	bf36      	itet	cc
 8008c72:	f1a2 0508 	subcc.w	r5, r2, #8
 8008c76:	2200      	movcs	r2, #0
 8008c78:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008c7c:	3b0b      	subs	r3, #11
 8008c7e:	d012      	beq.n	8008ca6 <__b2d+0x86>
 8008c80:	f1c3 0720 	rsb	r7, r3, #32
 8008c84:	fa22 f107 	lsr.w	r1, r2, r7
 8008c88:	409c      	lsls	r4, r3
 8008c8a:	430c      	orrs	r4, r1
 8008c8c:	42b5      	cmp	r5, r6
 8008c8e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008c92:	bf94      	ite	ls
 8008c94:	2400      	movls	r4, #0
 8008c96:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008c9a:	409a      	lsls	r2, r3
 8008c9c:	40fc      	lsrs	r4, r7
 8008c9e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008ca2:	4322      	orrs	r2, r4
 8008ca4:	e7e1      	b.n	8008c6a <__b2d+0x4a>
 8008ca6:	ea44 0107 	orr.w	r1, r4, r7
 8008caa:	e7de      	b.n	8008c6a <__b2d+0x4a>
 8008cac:	3ff00000 	.word	0x3ff00000

08008cb0 <__d2b>:
 8008cb0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	4690      	mov	r8, r2
 8008cb8:	4699      	mov	r9, r3
 8008cba:	9e08      	ldr	r6, [sp, #32]
 8008cbc:	f7ff fc1e 	bl	80084fc <_Balloc>
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	b930      	cbnz	r0, 8008cd2 <__d2b+0x22>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	f240 310f 	movw	r1, #783	@ 0x30f
 8008cca:	4b23      	ldr	r3, [pc, #140]	@ (8008d58 <__d2b+0xa8>)
 8008ccc:	4823      	ldr	r0, [pc, #140]	@ (8008d5c <__d2b+0xac>)
 8008cce:	f001 f97b 	bl	8009fc8 <__assert_func>
 8008cd2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008cd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cda:	b10d      	cbz	r5, 8008ce0 <__d2b+0x30>
 8008cdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ce0:	9301      	str	r3, [sp, #4]
 8008ce2:	f1b8 0300 	subs.w	r3, r8, #0
 8008ce6:	d024      	beq.n	8008d32 <__d2b+0x82>
 8008ce8:	4668      	mov	r0, sp
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	f7ff fd17 	bl	800871e <__lo0bits>
 8008cf0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008cf4:	b1d8      	cbz	r0, 8008d2e <__d2b+0x7e>
 8008cf6:	f1c0 0320 	rsb	r3, r0, #32
 8008cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfe:	430b      	orrs	r3, r1
 8008d00:	40c2      	lsrs	r2, r0
 8008d02:	6163      	str	r3, [r4, #20]
 8008d04:	9201      	str	r2, [sp, #4]
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2201      	moveq	r2, #1
 8008d0e:	2202      	movne	r2, #2
 8008d10:	61a3      	str	r3, [r4, #24]
 8008d12:	6122      	str	r2, [r4, #16]
 8008d14:	b1ad      	cbz	r5, 8008d42 <__d2b+0x92>
 8008d16:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d1a:	4405      	add	r5, r0
 8008d1c:	6035      	str	r5, [r6, #0]
 8008d1e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d24:	6018      	str	r0, [r3, #0]
 8008d26:	4620      	mov	r0, r4
 8008d28:	b002      	add	sp, #8
 8008d2a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008d2e:	6161      	str	r1, [r4, #20]
 8008d30:	e7e9      	b.n	8008d06 <__d2b+0x56>
 8008d32:	a801      	add	r0, sp, #4
 8008d34:	f7ff fcf3 	bl	800871e <__lo0bits>
 8008d38:	9b01      	ldr	r3, [sp, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	6163      	str	r3, [r4, #20]
 8008d3e:	3020      	adds	r0, #32
 8008d40:	e7e7      	b.n	8008d12 <__d2b+0x62>
 8008d42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008d46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d4a:	6030      	str	r0, [r6, #0]
 8008d4c:	6918      	ldr	r0, [r3, #16]
 8008d4e:	f7ff fcc7 	bl	80086e0 <__hi0bits>
 8008d52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d56:	e7e4      	b.n	8008d22 <__d2b+0x72>
 8008d58:	0800bc27 	.word	0x0800bc27
 8008d5c:	0800bc38 	.word	0x0800bc38

08008d60 <__ratio>:
 8008d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	b085      	sub	sp, #20
 8008d66:	e9cd 1000 	strd	r1, r0, [sp]
 8008d6a:	a902      	add	r1, sp, #8
 8008d6c:	f7ff ff58 	bl	8008c20 <__b2d>
 8008d70:	468b      	mov	fp, r1
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	9800      	ldr	r0, [sp, #0]
 8008d78:	a903      	add	r1, sp, #12
 8008d7a:	f7ff ff51 	bl	8008c20 <__b2d>
 8008d7e:	460d      	mov	r5, r1
 8008d80:	9b01      	ldr	r3, [sp, #4]
 8008d82:	4689      	mov	r9, r1
 8008d84:	6919      	ldr	r1, [r3, #16]
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	4604      	mov	r4, r0
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	4630      	mov	r0, r6
 8008d8e:	1ac9      	subs	r1, r1, r3
 8008d90:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bfcd      	iteet	gt
 8008d9e:	463a      	movgt	r2, r7
 8008da0:	462a      	movle	r2, r5
 8008da2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008da6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008daa:	bfd8      	it	le
 8008dac:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008db0:	464b      	mov	r3, r9
 8008db2:	4622      	mov	r2, r4
 8008db4:	4659      	mov	r1, fp
 8008db6:	f7f7 fcb9 	bl	800072c <__aeabi_ddiv>
 8008dba:	b005      	add	sp, #20
 8008dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dc0 <__copybits>:
 8008dc0:	3901      	subs	r1, #1
 8008dc2:	b570      	push	{r4, r5, r6, lr}
 8008dc4:	1149      	asrs	r1, r1, #5
 8008dc6:	6914      	ldr	r4, [r2, #16]
 8008dc8:	3101      	adds	r1, #1
 8008dca:	f102 0314 	add.w	r3, r2, #20
 8008dce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dd6:	1f05      	subs	r5, r0, #4
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	d30c      	bcc.n	8008df6 <__copybits+0x36>
 8008ddc:	1aa3      	subs	r3, r4, r2
 8008dde:	3b11      	subs	r3, #17
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	3211      	adds	r2, #17
 8008de6:	42a2      	cmp	r2, r4
 8008de8:	bf88      	it	hi
 8008dea:	2300      	movhi	r3, #0
 8008dec:	4418      	add	r0, r3
 8008dee:	2300      	movs	r3, #0
 8008df0:	4288      	cmp	r0, r1
 8008df2:	d305      	bcc.n	8008e00 <__copybits+0x40>
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	f853 6b04 	ldr.w	r6, [r3], #4
 8008dfa:	f845 6f04 	str.w	r6, [r5, #4]!
 8008dfe:	e7eb      	b.n	8008dd8 <__copybits+0x18>
 8008e00:	f840 3b04 	str.w	r3, [r0], #4
 8008e04:	e7f4      	b.n	8008df0 <__copybits+0x30>

08008e06 <__any_on>:
 8008e06:	f100 0214 	add.w	r2, r0, #20
 8008e0a:	6900      	ldr	r0, [r0, #16]
 8008e0c:	114b      	asrs	r3, r1, #5
 8008e0e:	4298      	cmp	r0, r3
 8008e10:	b510      	push	{r4, lr}
 8008e12:	db11      	blt.n	8008e38 <__any_on+0x32>
 8008e14:	dd0a      	ble.n	8008e2c <__any_on+0x26>
 8008e16:	f011 011f 	ands.w	r1, r1, #31
 8008e1a:	d007      	beq.n	8008e2c <__any_on+0x26>
 8008e1c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e20:	fa24 f001 	lsr.w	r0, r4, r1
 8008e24:	fa00 f101 	lsl.w	r1, r0, r1
 8008e28:	428c      	cmp	r4, r1
 8008e2a:	d10b      	bne.n	8008e44 <__any_on+0x3e>
 8008e2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d803      	bhi.n	8008e3c <__any_on+0x36>
 8008e34:	2000      	movs	r0, #0
 8008e36:	bd10      	pop	{r4, pc}
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e7f7      	b.n	8008e2c <__any_on+0x26>
 8008e3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e40:	2900      	cmp	r1, #0
 8008e42:	d0f5      	beq.n	8008e30 <__any_on+0x2a>
 8008e44:	2001      	movs	r0, #1
 8008e46:	e7f6      	b.n	8008e36 <__any_on+0x30>

08008e48 <sulp>:
 8008e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	4690      	mov	r8, r2
 8008e50:	f7ff fec6 	bl	8008be0 <__ulp>
 8008e54:	4604      	mov	r4, r0
 8008e56:	460d      	mov	r5, r1
 8008e58:	f1b8 0f00 	cmp.w	r8, #0
 8008e5c:	d011      	beq.n	8008e82 <sulp+0x3a>
 8008e5e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008e62:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	dd0b      	ble.n	8008e82 <sulp+0x3a>
 8008e6a:	2400      	movs	r4, #0
 8008e6c:	051b      	lsls	r3, r3, #20
 8008e6e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008e72:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008e76:	4622      	mov	r2, r4
 8008e78:	462b      	mov	r3, r5
 8008e7a:	f7f7 fb2d 	bl	80004d8 <__aeabi_dmul>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	460d      	mov	r5, r1
 8008e82:	4620      	mov	r0, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e8a:	0000      	movs	r0, r0
 8008e8c:	0000      	movs	r0, r0
	...

08008e90 <_strtod_l>:
 8008e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	b09f      	sub	sp, #124	@ 0x7c
 8008e96:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008e98:	2200      	movs	r2, #0
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008e9e:	f04f 0a00 	mov.w	sl, #0
 8008ea2:	f04f 0b00 	mov.w	fp, #0
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	9005      	str	r0, [sp, #20]
 8008eaa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eac:	7811      	ldrb	r1, [r2, #0]
 8008eae:	292b      	cmp	r1, #43	@ 0x2b
 8008eb0:	d048      	beq.n	8008f44 <_strtod_l+0xb4>
 8008eb2:	d836      	bhi.n	8008f22 <_strtod_l+0x92>
 8008eb4:	290d      	cmp	r1, #13
 8008eb6:	d830      	bhi.n	8008f1a <_strtod_l+0x8a>
 8008eb8:	2908      	cmp	r1, #8
 8008eba:	d830      	bhi.n	8008f1e <_strtod_l+0x8e>
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	d039      	beq.n	8008f34 <_strtod_l+0xa4>
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008ec4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008ec6:	782a      	ldrb	r2, [r5, #0]
 8008ec8:	2a30      	cmp	r2, #48	@ 0x30
 8008eca:	f040 80b1 	bne.w	8009030 <_strtod_l+0x1a0>
 8008ece:	786a      	ldrb	r2, [r5, #1]
 8008ed0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008ed4:	2a58      	cmp	r2, #88	@ 0x58
 8008ed6:	d16c      	bne.n	8008fb2 <_strtod_l+0x122>
 8008ed8:	9302      	str	r3, [sp, #8]
 8008eda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008edc:	4a8e      	ldr	r2, [pc, #568]	@ (8009118 <_strtod_l+0x288>)
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	ab1a      	add	r3, sp, #104	@ 0x68
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	9805      	ldr	r0, [sp, #20]
 8008ee6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008ee8:	a919      	add	r1, sp, #100	@ 0x64
 8008eea:	f001 f907 	bl	800a0fc <__gethex>
 8008eee:	f010 060f 	ands.w	r6, r0, #15
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	d005      	beq.n	8008f02 <_strtod_l+0x72>
 8008ef6:	2e06      	cmp	r6, #6
 8008ef8:	d126      	bne.n	8008f48 <_strtod_l+0xb8>
 8008efa:	2300      	movs	r3, #0
 8008efc:	3501      	adds	r5, #1
 8008efe:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f040 8584 	bne.w	8009a12 <_strtod_l+0xb82>
 8008f0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f0c:	b1bb      	cbz	r3, 8008f3e <_strtod_l+0xae>
 8008f0e:	4650      	mov	r0, sl
 8008f10:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008f14:	b01f      	add	sp, #124	@ 0x7c
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	2920      	cmp	r1, #32
 8008f1c:	d1d0      	bne.n	8008ec0 <_strtod_l+0x30>
 8008f1e:	3201      	adds	r2, #1
 8008f20:	e7c3      	b.n	8008eaa <_strtod_l+0x1a>
 8008f22:	292d      	cmp	r1, #45	@ 0x2d
 8008f24:	d1cc      	bne.n	8008ec0 <_strtod_l+0x30>
 8008f26:	2101      	movs	r1, #1
 8008f28:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f2a:	1c51      	adds	r1, r2, #1
 8008f2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f2e:	7852      	ldrb	r2, [r2, #1]
 8008f30:	2a00      	cmp	r2, #0
 8008f32:	d1c7      	bne.n	8008ec4 <_strtod_l+0x34>
 8008f34:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f36:	9419      	str	r4, [sp, #100]	@ 0x64
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f040 8568 	bne.w	8009a0e <_strtod_l+0xb7e>
 8008f3e:	4650      	mov	r0, sl
 8008f40:	4659      	mov	r1, fp
 8008f42:	e7e7      	b.n	8008f14 <_strtod_l+0x84>
 8008f44:	2100      	movs	r1, #0
 8008f46:	e7ef      	b.n	8008f28 <_strtod_l+0x98>
 8008f48:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008f4a:	b13a      	cbz	r2, 8008f5c <_strtod_l+0xcc>
 8008f4c:	2135      	movs	r1, #53	@ 0x35
 8008f4e:	a81c      	add	r0, sp, #112	@ 0x70
 8008f50:	f7ff ff36 	bl	8008dc0 <__copybits>
 8008f54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f56:	9805      	ldr	r0, [sp, #20]
 8008f58:	f7ff fb10 	bl	800857c <_Bfree>
 8008f5c:	3e01      	subs	r6, #1
 8008f5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008f60:	2e04      	cmp	r6, #4
 8008f62:	d806      	bhi.n	8008f72 <_strtod_l+0xe2>
 8008f64:	e8df f006 	tbb	[pc, r6]
 8008f68:	201d0314 	.word	0x201d0314
 8008f6c:	14          	.byte	0x14
 8008f6d:	00          	.byte	0x00
 8008f6e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008f72:	05e1      	lsls	r1, r4, #23
 8008f74:	bf48      	it	mi
 8008f76:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008f7a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008f7e:	0d1b      	lsrs	r3, r3, #20
 8008f80:	051b      	lsls	r3, r3, #20
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1bd      	bne.n	8008f02 <_strtod_l+0x72>
 8008f86:	f7fe fb1d 	bl	80075c4 <__errno>
 8008f8a:	2322      	movs	r3, #34	@ 0x22
 8008f8c:	6003      	str	r3, [r0, #0]
 8008f8e:	e7b8      	b.n	8008f02 <_strtod_l+0x72>
 8008f90:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008f94:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008f98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008f9c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008fa0:	e7e7      	b.n	8008f72 <_strtod_l+0xe2>
 8008fa2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800911c <_strtod_l+0x28c>
 8008fa6:	e7e4      	b.n	8008f72 <_strtod_l+0xe2>
 8008fa8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008fac:	f04f 3aff 	mov.w	sl, #4294967295
 8008fb0:	e7df      	b.n	8008f72 <_strtod_l+0xe2>
 8008fb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	2b30      	cmp	r3, #48	@ 0x30
 8008fbc:	d0f9      	beq.n	8008fb2 <_strtod_l+0x122>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d09f      	beq.n	8008f02 <_strtod_l+0x72>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fc8:	220a      	movs	r2, #10
 8008fca:	930c      	str	r3, [sp, #48]	@ 0x30
 8008fcc:	2300      	movs	r3, #0
 8008fce:	461f      	mov	r7, r3
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fd4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008fd6:	7805      	ldrb	r5, [r0, #0]
 8008fd8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008fdc:	b2d9      	uxtb	r1, r3
 8008fde:	2909      	cmp	r1, #9
 8008fe0:	d928      	bls.n	8009034 <_strtod_l+0x1a4>
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	494e      	ldr	r1, [pc, #312]	@ (8009120 <_strtod_l+0x290>)
 8008fe6:	f000 ffc7 	bl	8009f78 <strncmp>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	d032      	beq.n	8009054 <_strtod_l+0x1c4>
 8008fee:	2000      	movs	r0, #0
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	4681      	mov	r9, r0
 8008ff4:	463d      	mov	r5, r7
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2a65      	cmp	r2, #101	@ 0x65
 8008ffa:	d001      	beq.n	8009000 <_strtod_l+0x170>
 8008ffc:	2a45      	cmp	r2, #69	@ 0x45
 8008ffe:	d114      	bne.n	800902a <_strtod_l+0x19a>
 8009000:	b91d      	cbnz	r5, 800900a <_strtod_l+0x17a>
 8009002:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009004:	4302      	orrs	r2, r0
 8009006:	d095      	beq.n	8008f34 <_strtod_l+0xa4>
 8009008:	2500      	movs	r5, #0
 800900a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800900c:	1c62      	adds	r2, r4, #1
 800900e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009010:	7862      	ldrb	r2, [r4, #1]
 8009012:	2a2b      	cmp	r2, #43	@ 0x2b
 8009014:	d077      	beq.n	8009106 <_strtod_l+0x276>
 8009016:	2a2d      	cmp	r2, #45	@ 0x2d
 8009018:	d07b      	beq.n	8009112 <_strtod_l+0x282>
 800901a:	f04f 0c00 	mov.w	ip, #0
 800901e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009022:	2909      	cmp	r1, #9
 8009024:	f240 8082 	bls.w	800912c <_strtod_l+0x29c>
 8009028:	9419      	str	r4, [sp, #100]	@ 0x64
 800902a:	f04f 0800 	mov.w	r8, #0
 800902e:	e0a2      	b.n	8009176 <_strtod_l+0x2e6>
 8009030:	2300      	movs	r3, #0
 8009032:	e7c7      	b.n	8008fc4 <_strtod_l+0x134>
 8009034:	2f08      	cmp	r7, #8
 8009036:	bfd5      	itete	le
 8009038:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800903a:	9908      	ldrgt	r1, [sp, #32]
 800903c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009040:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009044:	f100 0001 	add.w	r0, r0, #1
 8009048:	bfd4      	ite	le
 800904a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800904c:	9308      	strgt	r3, [sp, #32]
 800904e:	3701      	adds	r7, #1
 8009050:	9019      	str	r0, [sp, #100]	@ 0x64
 8009052:	e7bf      	b.n	8008fd4 <_strtod_l+0x144>
 8009054:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	9219      	str	r2, [sp, #100]	@ 0x64
 800905a:	785a      	ldrb	r2, [r3, #1]
 800905c:	b37f      	cbz	r7, 80090be <_strtod_l+0x22e>
 800905e:	4681      	mov	r9, r0
 8009060:	463d      	mov	r5, r7
 8009062:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009066:	2b09      	cmp	r3, #9
 8009068:	d912      	bls.n	8009090 <_strtod_l+0x200>
 800906a:	2301      	movs	r3, #1
 800906c:	e7c4      	b.n	8008ff8 <_strtod_l+0x168>
 800906e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009070:	3001      	adds	r0, #1
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	9219      	str	r2, [sp, #100]	@ 0x64
 8009076:	785a      	ldrb	r2, [r3, #1]
 8009078:	2a30      	cmp	r2, #48	@ 0x30
 800907a:	d0f8      	beq.n	800906e <_strtod_l+0x1de>
 800907c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009080:	2b08      	cmp	r3, #8
 8009082:	f200 84cb 	bhi.w	8009a1c <_strtod_l+0xb8c>
 8009086:	4681      	mov	r9, r0
 8009088:	2000      	movs	r0, #0
 800908a:	4605      	mov	r5, r0
 800908c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800908e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009090:	3a30      	subs	r2, #48	@ 0x30
 8009092:	f100 0301 	add.w	r3, r0, #1
 8009096:	d02a      	beq.n	80090ee <_strtod_l+0x25e>
 8009098:	4499      	add	r9, r3
 800909a:	210a      	movs	r1, #10
 800909c:	462b      	mov	r3, r5
 800909e:	eb00 0c05 	add.w	ip, r0, r5
 80090a2:	4563      	cmp	r3, ip
 80090a4:	d10d      	bne.n	80090c2 <_strtod_l+0x232>
 80090a6:	1c69      	adds	r1, r5, #1
 80090a8:	4401      	add	r1, r0
 80090aa:	4428      	add	r0, r5
 80090ac:	2808      	cmp	r0, #8
 80090ae:	dc16      	bgt.n	80090de <_strtod_l+0x24e>
 80090b0:	230a      	movs	r3, #10
 80090b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80090b4:	fb03 2300 	mla	r3, r3, r0, r2
 80090b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80090ba:	2300      	movs	r3, #0
 80090bc:	e018      	b.n	80090f0 <_strtod_l+0x260>
 80090be:	4638      	mov	r0, r7
 80090c0:	e7da      	b.n	8009078 <_strtod_l+0x1e8>
 80090c2:	2b08      	cmp	r3, #8
 80090c4:	f103 0301 	add.w	r3, r3, #1
 80090c8:	dc03      	bgt.n	80090d2 <_strtod_l+0x242>
 80090ca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80090cc:	434e      	muls	r6, r1
 80090ce:	960a      	str	r6, [sp, #40]	@ 0x28
 80090d0:	e7e7      	b.n	80090a2 <_strtod_l+0x212>
 80090d2:	2b10      	cmp	r3, #16
 80090d4:	bfde      	ittt	le
 80090d6:	9e08      	ldrle	r6, [sp, #32]
 80090d8:	434e      	mulle	r6, r1
 80090da:	9608      	strle	r6, [sp, #32]
 80090dc:	e7e1      	b.n	80090a2 <_strtod_l+0x212>
 80090de:	280f      	cmp	r0, #15
 80090e0:	dceb      	bgt.n	80090ba <_strtod_l+0x22a>
 80090e2:	230a      	movs	r3, #10
 80090e4:	9808      	ldr	r0, [sp, #32]
 80090e6:	fb03 2300 	mla	r3, r3, r0, r2
 80090ea:	9308      	str	r3, [sp, #32]
 80090ec:	e7e5      	b.n	80090ba <_strtod_l+0x22a>
 80090ee:	4629      	mov	r1, r5
 80090f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80090f2:	460d      	mov	r5, r1
 80090f4:	1c50      	adds	r0, r2, #1
 80090f6:	9019      	str	r0, [sp, #100]	@ 0x64
 80090f8:	7852      	ldrb	r2, [r2, #1]
 80090fa:	4618      	mov	r0, r3
 80090fc:	e7b1      	b.n	8009062 <_strtod_l+0x1d2>
 80090fe:	f04f 0900 	mov.w	r9, #0
 8009102:	2301      	movs	r3, #1
 8009104:	e77d      	b.n	8009002 <_strtod_l+0x172>
 8009106:	f04f 0c00 	mov.w	ip, #0
 800910a:	1ca2      	adds	r2, r4, #2
 800910c:	9219      	str	r2, [sp, #100]	@ 0x64
 800910e:	78a2      	ldrb	r2, [r4, #2]
 8009110:	e785      	b.n	800901e <_strtod_l+0x18e>
 8009112:	f04f 0c01 	mov.w	ip, #1
 8009116:	e7f8      	b.n	800910a <_strtod_l+0x27a>
 8009118:	0800bda8 	.word	0x0800bda8
 800911c:	7ff00000 	.word	0x7ff00000
 8009120:	0800bd90 	.word	0x0800bd90
 8009124:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009126:	1c51      	adds	r1, r2, #1
 8009128:	9119      	str	r1, [sp, #100]	@ 0x64
 800912a:	7852      	ldrb	r2, [r2, #1]
 800912c:	2a30      	cmp	r2, #48	@ 0x30
 800912e:	d0f9      	beq.n	8009124 <_strtod_l+0x294>
 8009130:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009134:	2908      	cmp	r1, #8
 8009136:	f63f af78 	bhi.w	800902a <_strtod_l+0x19a>
 800913a:	f04f 080a 	mov.w	r8, #10
 800913e:	3a30      	subs	r2, #48	@ 0x30
 8009140:	920e      	str	r2, [sp, #56]	@ 0x38
 8009142:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009144:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009146:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009148:	1c56      	adds	r6, r2, #1
 800914a:	9619      	str	r6, [sp, #100]	@ 0x64
 800914c:	7852      	ldrb	r2, [r2, #1]
 800914e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009152:	f1be 0f09 	cmp.w	lr, #9
 8009156:	d939      	bls.n	80091cc <_strtod_l+0x33c>
 8009158:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800915a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800915e:	1a76      	subs	r6, r6, r1
 8009160:	2e08      	cmp	r6, #8
 8009162:	dc03      	bgt.n	800916c <_strtod_l+0x2dc>
 8009164:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009166:	4588      	cmp	r8, r1
 8009168:	bfa8      	it	ge
 800916a:	4688      	movge	r8, r1
 800916c:	f1bc 0f00 	cmp.w	ip, #0
 8009170:	d001      	beq.n	8009176 <_strtod_l+0x2e6>
 8009172:	f1c8 0800 	rsb	r8, r8, #0
 8009176:	2d00      	cmp	r5, #0
 8009178:	d14e      	bne.n	8009218 <_strtod_l+0x388>
 800917a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800917c:	4308      	orrs	r0, r1
 800917e:	f47f aec0 	bne.w	8008f02 <_strtod_l+0x72>
 8009182:	2b00      	cmp	r3, #0
 8009184:	f47f aed6 	bne.w	8008f34 <_strtod_l+0xa4>
 8009188:	2a69      	cmp	r2, #105	@ 0x69
 800918a:	d028      	beq.n	80091de <_strtod_l+0x34e>
 800918c:	dc25      	bgt.n	80091da <_strtod_l+0x34a>
 800918e:	2a49      	cmp	r2, #73	@ 0x49
 8009190:	d025      	beq.n	80091de <_strtod_l+0x34e>
 8009192:	2a4e      	cmp	r2, #78	@ 0x4e
 8009194:	f47f aece 	bne.w	8008f34 <_strtod_l+0xa4>
 8009198:	499a      	ldr	r1, [pc, #616]	@ (8009404 <_strtod_l+0x574>)
 800919a:	a819      	add	r0, sp, #100	@ 0x64
 800919c:	f001 f9d0 	bl	800a540 <__match>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	f43f aec7 	beq.w	8008f34 <_strtod_l+0xa4>
 80091a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b28      	cmp	r3, #40	@ 0x28
 80091ac:	d12e      	bne.n	800920c <_strtod_l+0x37c>
 80091ae:	4996      	ldr	r1, [pc, #600]	@ (8009408 <_strtod_l+0x578>)
 80091b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80091b2:	a819      	add	r0, sp, #100	@ 0x64
 80091b4:	f001 f9d8 	bl	800a568 <__hexnan>
 80091b8:	2805      	cmp	r0, #5
 80091ba:	d127      	bne.n	800920c <_strtod_l+0x37c>
 80091bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80091be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80091c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80091c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80091ca:	e69a      	b.n	8008f02 <_strtod_l+0x72>
 80091cc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091ce:	fb08 2101 	mla	r1, r8, r1, r2
 80091d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80091d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80091d8:	e7b5      	b.n	8009146 <_strtod_l+0x2b6>
 80091da:	2a6e      	cmp	r2, #110	@ 0x6e
 80091dc:	e7da      	b.n	8009194 <_strtod_l+0x304>
 80091de:	498b      	ldr	r1, [pc, #556]	@ (800940c <_strtod_l+0x57c>)
 80091e0:	a819      	add	r0, sp, #100	@ 0x64
 80091e2:	f001 f9ad 	bl	800a540 <__match>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	f43f aea4 	beq.w	8008f34 <_strtod_l+0xa4>
 80091ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ee:	4988      	ldr	r1, [pc, #544]	@ (8009410 <_strtod_l+0x580>)
 80091f0:	3b01      	subs	r3, #1
 80091f2:	a819      	add	r0, sp, #100	@ 0x64
 80091f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80091f6:	f001 f9a3 	bl	800a540 <__match>
 80091fa:	b910      	cbnz	r0, 8009202 <_strtod_l+0x372>
 80091fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091fe:	3301      	adds	r3, #1
 8009200:	9319      	str	r3, [sp, #100]	@ 0x64
 8009202:	f04f 0a00 	mov.w	sl, #0
 8009206:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8009414 <_strtod_l+0x584>
 800920a:	e67a      	b.n	8008f02 <_strtod_l+0x72>
 800920c:	4882      	ldr	r0, [pc, #520]	@ (8009418 <_strtod_l+0x588>)
 800920e:	f000 fed5 	bl	8009fbc <nan>
 8009212:	4682      	mov	sl, r0
 8009214:	468b      	mov	fp, r1
 8009216:	e674      	b.n	8008f02 <_strtod_l+0x72>
 8009218:	eba8 0309 	sub.w	r3, r8, r9
 800921c:	2f00      	cmp	r7, #0
 800921e:	bf08      	it	eq
 8009220:	462f      	moveq	r7, r5
 8009222:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009224:	2d10      	cmp	r5, #16
 8009226:	462c      	mov	r4, r5
 8009228:	9309      	str	r3, [sp, #36]	@ 0x24
 800922a:	bfa8      	it	ge
 800922c:	2410      	movge	r4, #16
 800922e:	f7f7 f8d9 	bl	80003e4 <__aeabi_ui2d>
 8009232:	2d09      	cmp	r5, #9
 8009234:	4682      	mov	sl, r0
 8009236:	468b      	mov	fp, r1
 8009238:	dc11      	bgt.n	800925e <_strtod_l+0x3ce>
 800923a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923c:	2b00      	cmp	r3, #0
 800923e:	f43f ae60 	beq.w	8008f02 <_strtod_l+0x72>
 8009242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009244:	dd76      	ble.n	8009334 <_strtod_l+0x4a4>
 8009246:	2b16      	cmp	r3, #22
 8009248:	dc5d      	bgt.n	8009306 <_strtod_l+0x476>
 800924a:	4974      	ldr	r1, [pc, #464]	@ (800941c <_strtod_l+0x58c>)
 800924c:	4652      	mov	r2, sl
 800924e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009252:	465b      	mov	r3, fp
 8009254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009258:	f7f7 f93e 	bl	80004d8 <__aeabi_dmul>
 800925c:	e7d9      	b.n	8009212 <_strtod_l+0x382>
 800925e:	4b6f      	ldr	r3, [pc, #444]	@ (800941c <_strtod_l+0x58c>)
 8009260:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009264:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009268:	f7f7 f936 	bl	80004d8 <__aeabi_dmul>
 800926c:	4682      	mov	sl, r0
 800926e:	9808      	ldr	r0, [sp, #32]
 8009270:	468b      	mov	fp, r1
 8009272:	f7f7 f8b7 	bl	80003e4 <__aeabi_ui2d>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4650      	mov	r0, sl
 800927c:	4659      	mov	r1, fp
 800927e:	f7f6 ff75 	bl	800016c <__adddf3>
 8009282:	2d0f      	cmp	r5, #15
 8009284:	4682      	mov	sl, r0
 8009286:	468b      	mov	fp, r1
 8009288:	ddd7      	ble.n	800923a <_strtod_l+0x3aa>
 800928a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800928c:	1b2c      	subs	r4, r5, r4
 800928e:	441c      	add	r4, r3
 8009290:	2c00      	cmp	r4, #0
 8009292:	f340 8096 	ble.w	80093c2 <_strtod_l+0x532>
 8009296:	f014 030f 	ands.w	r3, r4, #15
 800929a:	d00a      	beq.n	80092b2 <_strtod_l+0x422>
 800929c:	495f      	ldr	r1, [pc, #380]	@ (800941c <_strtod_l+0x58c>)
 800929e:	4652      	mov	r2, sl
 80092a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092a8:	465b      	mov	r3, fp
 80092aa:	f7f7 f915 	bl	80004d8 <__aeabi_dmul>
 80092ae:	4682      	mov	sl, r0
 80092b0:	468b      	mov	fp, r1
 80092b2:	f034 040f 	bics.w	r4, r4, #15
 80092b6:	d073      	beq.n	80093a0 <_strtod_l+0x510>
 80092b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80092bc:	dd48      	ble.n	8009350 <_strtod_l+0x4c0>
 80092be:	2400      	movs	r4, #0
 80092c0:	46a0      	mov	r8, r4
 80092c2:	46a1      	mov	r9, r4
 80092c4:	940a      	str	r4, [sp, #40]	@ 0x28
 80092c6:	2322      	movs	r3, #34	@ 0x22
 80092c8:	f04f 0a00 	mov.w	sl, #0
 80092cc:	9a05      	ldr	r2, [sp, #20]
 80092ce:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8009414 <_strtod_l+0x584>
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f43f ae13 	beq.w	8008f02 <_strtod_l+0x72>
 80092dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092de:	9805      	ldr	r0, [sp, #20]
 80092e0:	f7ff f94c 	bl	800857c <_Bfree>
 80092e4:	4649      	mov	r1, r9
 80092e6:	9805      	ldr	r0, [sp, #20]
 80092e8:	f7ff f948 	bl	800857c <_Bfree>
 80092ec:	4641      	mov	r1, r8
 80092ee:	9805      	ldr	r0, [sp, #20]
 80092f0:	f7ff f944 	bl	800857c <_Bfree>
 80092f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092f6:	9805      	ldr	r0, [sp, #20]
 80092f8:	f7ff f940 	bl	800857c <_Bfree>
 80092fc:	4621      	mov	r1, r4
 80092fe:	9805      	ldr	r0, [sp, #20]
 8009300:	f7ff f93c 	bl	800857c <_Bfree>
 8009304:	e5fd      	b.n	8008f02 <_strtod_l+0x72>
 8009306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009308:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800930c:	4293      	cmp	r3, r2
 800930e:	dbbc      	blt.n	800928a <_strtod_l+0x3fa>
 8009310:	4c42      	ldr	r4, [pc, #264]	@ (800941c <_strtod_l+0x58c>)
 8009312:	f1c5 050f 	rsb	r5, r5, #15
 8009316:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800931a:	4652      	mov	r2, sl
 800931c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009320:	465b      	mov	r3, fp
 8009322:	f7f7 f8d9 	bl	80004d8 <__aeabi_dmul>
 8009326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009328:	1b5d      	subs	r5, r3, r5
 800932a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800932e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009332:	e791      	b.n	8009258 <_strtod_l+0x3c8>
 8009334:	3316      	adds	r3, #22
 8009336:	dba8      	blt.n	800928a <_strtod_l+0x3fa>
 8009338:	4b38      	ldr	r3, [pc, #224]	@ (800941c <_strtod_l+0x58c>)
 800933a:	eba9 0808 	sub.w	r8, r9, r8
 800933e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009342:	4650      	mov	r0, sl
 8009344:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009348:	4659      	mov	r1, fp
 800934a:	f7f7 f9ef 	bl	800072c <__aeabi_ddiv>
 800934e:	e760      	b.n	8009212 <_strtod_l+0x382>
 8009350:	4b33      	ldr	r3, [pc, #204]	@ (8009420 <_strtod_l+0x590>)
 8009352:	4650      	mov	r0, sl
 8009354:	9308      	str	r3, [sp, #32]
 8009356:	2300      	movs	r3, #0
 8009358:	4659      	mov	r1, fp
 800935a:	461e      	mov	r6, r3
 800935c:	1124      	asrs	r4, r4, #4
 800935e:	2c01      	cmp	r4, #1
 8009360:	dc21      	bgt.n	80093a6 <_strtod_l+0x516>
 8009362:	b10b      	cbz	r3, 8009368 <_strtod_l+0x4d8>
 8009364:	4682      	mov	sl, r0
 8009366:	468b      	mov	fp, r1
 8009368:	492d      	ldr	r1, [pc, #180]	@ (8009420 <_strtod_l+0x590>)
 800936a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800936e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009372:	4652      	mov	r2, sl
 8009374:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009378:	465b      	mov	r3, fp
 800937a:	f7f7 f8ad 	bl	80004d8 <__aeabi_dmul>
 800937e:	4b25      	ldr	r3, [pc, #148]	@ (8009414 <_strtod_l+0x584>)
 8009380:	460a      	mov	r2, r1
 8009382:	400b      	ands	r3, r1
 8009384:	4927      	ldr	r1, [pc, #156]	@ (8009424 <_strtod_l+0x594>)
 8009386:	4682      	mov	sl, r0
 8009388:	428b      	cmp	r3, r1
 800938a:	d898      	bhi.n	80092be <_strtod_l+0x42e>
 800938c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009390:	428b      	cmp	r3, r1
 8009392:	bf86      	itte	hi
 8009394:	f04f 3aff 	movhi.w	sl, #4294967295
 8009398:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009428 <_strtod_l+0x598>
 800939c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80093a0:	2300      	movs	r3, #0
 80093a2:	9308      	str	r3, [sp, #32]
 80093a4:	e07a      	b.n	800949c <_strtod_l+0x60c>
 80093a6:	07e2      	lsls	r2, r4, #31
 80093a8:	d505      	bpl.n	80093b6 <_strtod_l+0x526>
 80093aa:	9b08      	ldr	r3, [sp, #32]
 80093ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b0:	f7f7 f892 	bl	80004d8 <__aeabi_dmul>
 80093b4:	2301      	movs	r3, #1
 80093b6:	9a08      	ldr	r2, [sp, #32]
 80093b8:	3601      	adds	r6, #1
 80093ba:	3208      	adds	r2, #8
 80093bc:	1064      	asrs	r4, r4, #1
 80093be:	9208      	str	r2, [sp, #32]
 80093c0:	e7cd      	b.n	800935e <_strtod_l+0x4ce>
 80093c2:	d0ed      	beq.n	80093a0 <_strtod_l+0x510>
 80093c4:	4264      	negs	r4, r4
 80093c6:	f014 020f 	ands.w	r2, r4, #15
 80093ca:	d00a      	beq.n	80093e2 <_strtod_l+0x552>
 80093cc:	4b13      	ldr	r3, [pc, #76]	@ (800941c <_strtod_l+0x58c>)
 80093ce:	4650      	mov	r0, sl
 80093d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093d4:	4659      	mov	r1, fp
 80093d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093da:	f7f7 f9a7 	bl	800072c <__aeabi_ddiv>
 80093de:	4682      	mov	sl, r0
 80093e0:	468b      	mov	fp, r1
 80093e2:	1124      	asrs	r4, r4, #4
 80093e4:	d0dc      	beq.n	80093a0 <_strtod_l+0x510>
 80093e6:	2c1f      	cmp	r4, #31
 80093e8:	dd20      	ble.n	800942c <_strtod_l+0x59c>
 80093ea:	2400      	movs	r4, #0
 80093ec:	46a0      	mov	r8, r4
 80093ee:	46a1      	mov	r9, r4
 80093f0:	940a      	str	r4, [sp, #40]	@ 0x28
 80093f2:	2322      	movs	r3, #34	@ 0x22
 80093f4:	9a05      	ldr	r2, [sp, #20]
 80093f6:	f04f 0a00 	mov.w	sl, #0
 80093fa:	f04f 0b00 	mov.w	fp, #0
 80093fe:	6013      	str	r3, [r2, #0]
 8009400:	e768      	b.n	80092d4 <_strtod_l+0x444>
 8009402:	bf00      	nop
 8009404:	0800bb7f 	.word	0x0800bb7f
 8009408:	0800bd94 	.word	0x0800bd94
 800940c:	0800bb77 	.word	0x0800bb77
 8009410:	0800bbae 	.word	0x0800bbae
 8009414:	7ff00000 	.word	0x7ff00000
 8009418:	0800bf3d 	.word	0x0800bf3d
 800941c:	0800bcc8 	.word	0x0800bcc8
 8009420:	0800bca0 	.word	0x0800bca0
 8009424:	7ca00000 	.word	0x7ca00000
 8009428:	7fefffff 	.word	0x7fefffff
 800942c:	f014 0310 	ands.w	r3, r4, #16
 8009430:	bf18      	it	ne
 8009432:	236a      	movne	r3, #106	@ 0x6a
 8009434:	4650      	mov	r0, sl
 8009436:	9308      	str	r3, [sp, #32]
 8009438:	4659      	mov	r1, fp
 800943a:	2300      	movs	r3, #0
 800943c:	4ea9      	ldr	r6, [pc, #676]	@ (80096e4 <_strtod_l+0x854>)
 800943e:	07e2      	lsls	r2, r4, #31
 8009440:	d504      	bpl.n	800944c <_strtod_l+0x5bc>
 8009442:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009446:	f7f7 f847 	bl	80004d8 <__aeabi_dmul>
 800944a:	2301      	movs	r3, #1
 800944c:	1064      	asrs	r4, r4, #1
 800944e:	f106 0608 	add.w	r6, r6, #8
 8009452:	d1f4      	bne.n	800943e <_strtod_l+0x5ae>
 8009454:	b10b      	cbz	r3, 800945a <_strtod_l+0x5ca>
 8009456:	4682      	mov	sl, r0
 8009458:	468b      	mov	fp, r1
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	b1b3      	cbz	r3, 800948c <_strtod_l+0x5fc>
 800945e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009462:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009466:	2b00      	cmp	r3, #0
 8009468:	4659      	mov	r1, fp
 800946a:	dd0f      	ble.n	800948c <_strtod_l+0x5fc>
 800946c:	2b1f      	cmp	r3, #31
 800946e:	dd57      	ble.n	8009520 <_strtod_l+0x690>
 8009470:	2b34      	cmp	r3, #52	@ 0x34
 8009472:	bfd8      	it	le
 8009474:	f04f 33ff 	movle.w	r3, #4294967295
 8009478:	f04f 0a00 	mov.w	sl, #0
 800947c:	bfcf      	iteee	gt
 800947e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009482:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009486:	4093      	lslle	r3, r2
 8009488:	ea03 0b01 	andle.w	fp, r3, r1
 800948c:	2200      	movs	r2, #0
 800948e:	2300      	movs	r3, #0
 8009490:	4650      	mov	r0, sl
 8009492:	4659      	mov	r1, fp
 8009494:	f7f7 fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8009498:	2800      	cmp	r0, #0
 800949a:	d1a6      	bne.n	80093ea <_strtod_l+0x55a>
 800949c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800949e:	463a      	mov	r2, r7
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80094a4:	462b      	mov	r3, r5
 80094a6:	9805      	ldr	r0, [sp, #20]
 80094a8:	f7ff f8d0 	bl	800864c <__s2b>
 80094ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f43f af05 	beq.w	80092be <_strtod_l+0x42e>
 80094b4:	2400      	movs	r4, #0
 80094b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094b8:	eba9 0308 	sub.w	r3, r9, r8
 80094bc:	2a00      	cmp	r2, #0
 80094be:	bfa8      	it	ge
 80094c0:	2300      	movge	r3, #0
 80094c2:	46a0      	mov	r8, r4
 80094c4:	9312      	str	r3, [sp, #72]	@ 0x48
 80094c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80094ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80094cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ce:	9805      	ldr	r0, [sp, #20]
 80094d0:	6859      	ldr	r1, [r3, #4]
 80094d2:	f7ff f813 	bl	80084fc <_Balloc>
 80094d6:	4681      	mov	r9, r0
 80094d8:	2800      	cmp	r0, #0
 80094da:	f43f aef4 	beq.w	80092c6 <_strtod_l+0x436>
 80094de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094e0:	300c      	adds	r0, #12
 80094e2:	691a      	ldr	r2, [r3, #16]
 80094e4:	f103 010c 	add.w	r1, r3, #12
 80094e8:	3202      	adds	r2, #2
 80094ea:	0092      	lsls	r2, r2, #2
 80094ec:	f7fe f8a5 	bl	800763a <memcpy>
 80094f0:	ab1c      	add	r3, sp, #112	@ 0x70
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	4652      	mov	r2, sl
 80094fa:	465b      	mov	r3, fp
 80094fc:	9805      	ldr	r0, [sp, #20]
 80094fe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009502:	f7ff fbd5 	bl	8008cb0 <__d2b>
 8009506:	901a      	str	r0, [sp, #104]	@ 0x68
 8009508:	2800      	cmp	r0, #0
 800950a:	f43f aedc 	beq.w	80092c6 <_strtod_l+0x436>
 800950e:	2101      	movs	r1, #1
 8009510:	9805      	ldr	r0, [sp, #20]
 8009512:	f7ff f931 	bl	8008778 <__i2b>
 8009516:	4680      	mov	r8, r0
 8009518:	b948      	cbnz	r0, 800952e <_strtod_l+0x69e>
 800951a:	f04f 0800 	mov.w	r8, #0
 800951e:	e6d2      	b.n	80092c6 <_strtod_l+0x436>
 8009520:	f04f 32ff 	mov.w	r2, #4294967295
 8009524:	fa02 f303 	lsl.w	r3, r2, r3
 8009528:	ea03 0a0a 	and.w	sl, r3, sl
 800952c:	e7ae      	b.n	800948c <_strtod_l+0x5fc>
 800952e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009530:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009532:	2d00      	cmp	r5, #0
 8009534:	bfab      	itete	ge
 8009536:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009538:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800953a:	18ef      	addge	r7, r5, r3
 800953c:	1b5e      	sublt	r6, r3, r5
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	bfa8      	it	ge
 8009542:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009544:	eba5 0503 	sub.w	r5, r5, r3
 8009548:	4415      	add	r5, r2
 800954a:	4b67      	ldr	r3, [pc, #412]	@ (80096e8 <_strtod_l+0x858>)
 800954c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009550:	bfb8      	it	lt
 8009552:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009554:	429d      	cmp	r5, r3
 8009556:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800955a:	da50      	bge.n	80095fe <_strtod_l+0x76e>
 800955c:	1b5b      	subs	r3, r3, r5
 800955e:	2b1f      	cmp	r3, #31
 8009560:	f04f 0101 	mov.w	r1, #1
 8009564:	eba2 0203 	sub.w	r2, r2, r3
 8009568:	dc3d      	bgt.n	80095e6 <_strtod_l+0x756>
 800956a:	fa01 f303 	lsl.w	r3, r1, r3
 800956e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009570:	2300      	movs	r3, #0
 8009572:	9310      	str	r3, [sp, #64]	@ 0x40
 8009574:	18bd      	adds	r5, r7, r2
 8009576:	9b08      	ldr	r3, [sp, #32]
 8009578:	42af      	cmp	r7, r5
 800957a:	4416      	add	r6, r2
 800957c:	441e      	add	r6, r3
 800957e:	463b      	mov	r3, r7
 8009580:	bfa8      	it	ge
 8009582:	462b      	movge	r3, r5
 8009584:	42b3      	cmp	r3, r6
 8009586:	bfa8      	it	ge
 8009588:	4633      	movge	r3, r6
 800958a:	2b00      	cmp	r3, #0
 800958c:	bfc2      	ittt	gt
 800958e:	1aed      	subgt	r5, r5, r3
 8009590:	1af6      	subgt	r6, r6, r3
 8009592:	1aff      	subgt	r7, r7, r3
 8009594:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009596:	2b00      	cmp	r3, #0
 8009598:	dd16      	ble.n	80095c8 <_strtod_l+0x738>
 800959a:	4641      	mov	r1, r8
 800959c:	461a      	mov	r2, r3
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f7ff f9a8 	bl	80088f4 <__pow5mult>
 80095a4:	4680      	mov	r8, r0
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d0b7      	beq.n	800951a <_strtod_l+0x68a>
 80095aa:	4601      	mov	r1, r0
 80095ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095ae:	9805      	ldr	r0, [sp, #20]
 80095b0:	f7ff f8f8 	bl	80087a4 <__multiply>
 80095b4:	900e      	str	r0, [sp, #56]	@ 0x38
 80095b6:	2800      	cmp	r0, #0
 80095b8:	f43f ae85 	beq.w	80092c6 <_strtod_l+0x436>
 80095bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095be:	9805      	ldr	r0, [sp, #20]
 80095c0:	f7fe ffdc 	bl	800857c <_Bfree>
 80095c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80095c8:	2d00      	cmp	r5, #0
 80095ca:	dc1d      	bgt.n	8009608 <_strtod_l+0x778>
 80095cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	dd23      	ble.n	800961a <_strtod_l+0x78a>
 80095d2:	4649      	mov	r1, r9
 80095d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80095d6:	9805      	ldr	r0, [sp, #20]
 80095d8:	f7ff f98c 	bl	80088f4 <__pow5mult>
 80095dc:	4681      	mov	r9, r0
 80095de:	b9e0      	cbnz	r0, 800961a <_strtod_l+0x78a>
 80095e0:	f04f 0900 	mov.w	r9, #0
 80095e4:	e66f      	b.n	80092c6 <_strtod_l+0x436>
 80095e6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80095ea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80095ee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80095f2:	35e2      	adds	r5, #226	@ 0xe2
 80095f4:	fa01 f305 	lsl.w	r3, r1, r5
 80095f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80095fa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80095fc:	e7ba      	b.n	8009574 <_strtod_l+0x6e4>
 80095fe:	2300      	movs	r3, #0
 8009600:	9310      	str	r3, [sp, #64]	@ 0x40
 8009602:	2301      	movs	r3, #1
 8009604:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009606:	e7b5      	b.n	8009574 <_strtod_l+0x6e4>
 8009608:	462a      	mov	r2, r5
 800960a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800960c:	9805      	ldr	r0, [sp, #20]
 800960e:	f7ff f9cb 	bl	80089a8 <__lshift>
 8009612:	901a      	str	r0, [sp, #104]	@ 0x68
 8009614:	2800      	cmp	r0, #0
 8009616:	d1d9      	bne.n	80095cc <_strtod_l+0x73c>
 8009618:	e655      	b.n	80092c6 <_strtod_l+0x436>
 800961a:	2e00      	cmp	r6, #0
 800961c:	dd07      	ble.n	800962e <_strtod_l+0x79e>
 800961e:	4649      	mov	r1, r9
 8009620:	4632      	mov	r2, r6
 8009622:	9805      	ldr	r0, [sp, #20]
 8009624:	f7ff f9c0 	bl	80089a8 <__lshift>
 8009628:	4681      	mov	r9, r0
 800962a:	2800      	cmp	r0, #0
 800962c:	d0d8      	beq.n	80095e0 <_strtod_l+0x750>
 800962e:	2f00      	cmp	r7, #0
 8009630:	dd08      	ble.n	8009644 <_strtod_l+0x7b4>
 8009632:	4641      	mov	r1, r8
 8009634:	463a      	mov	r2, r7
 8009636:	9805      	ldr	r0, [sp, #20]
 8009638:	f7ff f9b6 	bl	80089a8 <__lshift>
 800963c:	4680      	mov	r8, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	f43f ae41 	beq.w	80092c6 <_strtod_l+0x436>
 8009644:	464a      	mov	r2, r9
 8009646:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009648:	9805      	ldr	r0, [sp, #20]
 800964a:	f7ff fa35 	bl	8008ab8 <__mdiff>
 800964e:	4604      	mov	r4, r0
 8009650:	2800      	cmp	r0, #0
 8009652:	f43f ae38 	beq.w	80092c6 <_strtod_l+0x436>
 8009656:	68c3      	ldr	r3, [r0, #12]
 8009658:	4641      	mov	r1, r8
 800965a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800965c:	2300      	movs	r3, #0
 800965e:	60c3      	str	r3, [r0, #12]
 8009660:	f7ff fa0e 	bl	8008a80 <__mcmp>
 8009664:	2800      	cmp	r0, #0
 8009666:	da45      	bge.n	80096f4 <_strtod_l+0x864>
 8009668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966a:	ea53 030a 	orrs.w	r3, r3, sl
 800966e:	d16b      	bne.n	8009748 <_strtod_l+0x8b8>
 8009670:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009674:	2b00      	cmp	r3, #0
 8009676:	d167      	bne.n	8009748 <_strtod_l+0x8b8>
 8009678:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800967c:	0d1b      	lsrs	r3, r3, #20
 800967e:	051b      	lsls	r3, r3, #20
 8009680:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009684:	d960      	bls.n	8009748 <_strtod_l+0x8b8>
 8009686:	6963      	ldr	r3, [r4, #20]
 8009688:	b913      	cbnz	r3, 8009690 <_strtod_l+0x800>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	2b01      	cmp	r3, #1
 800968e:	dd5b      	ble.n	8009748 <_strtod_l+0x8b8>
 8009690:	4621      	mov	r1, r4
 8009692:	2201      	movs	r2, #1
 8009694:	9805      	ldr	r0, [sp, #20]
 8009696:	f7ff f987 	bl	80089a8 <__lshift>
 800969a:	4641      	mov	r1, r8
 800969c:	4604      	mov	r4, r0
 800969e:	f7ff f9ef 	bl	8008a80 <__mcmp>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	dd50      	ble.n	8009748 <_strtod_l+0x8b8>
 80096a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096aa:	9a08      	ldr	r2, [sp, #32]
 80096ac:	0d1b      	lsrs	r3, r3, #20
 80096ae:	051b      	lsls	r3, r3, #20
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	d06a      	beq.n	800978a <_strtod_l+0x8fa>
 80096b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096b8:	d867      	bhi.n	800978a <_strtod_l+0x8fa>
 80096ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80096be:	f67f ae98 	bls.w	80093f2 <_strtod_l+0x562>
 80096c2:	4650      	mov	r0, sl
 80096c4:	4659      	mov	r1, fp
 80096c6:	4b09      	ldr	r3, [pc, #36]	@ (80096ec <_strtod_l+0x85c>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	f7f6 ff05 	bl	80004d8 <__aeabi_dmul>
 80096ce:	4b08      	ldr	r3, [pc, #32]	@ (80096f0 <_strtod_l+0x860>)
 80096d0:	4682      	mov	sl, r0
 80096d2:	400b      	ands	r3, r1
 80096d4:	468b      	mov	fp, r1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f47f ae00 	bne.w	80092dc <_strtod_l+0x44c>
 80096dc:	2322      	movs	r3, #34	@ 0x22
 80096de:	9a05      	ldr	r2, [sp, #20]
 80096e0:	6013      	str	r3, [r2, #0]
 80096e2:	e5fb      	b.n	80092dc <_strtod_l+0x44c>
 80096e4:	0800bdc0 	.word	0x0800bdc0
 80096e8:	fffffc02 	.word	0xfffffc02
 80096ec:	39500000 	.word	0x39500000
 80096f0:	7ff00000 	.word	0x7ff00000
 80096f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80096f8:	d165      	bne.n	80097c6 <_strtod_l+0x936>
 80096fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009700:	b35a      	cbz	r2, 800975a <_strtod_l+0x8ca>
 8009702:	4a99      	ldr	r2, [pc, #612]	@ (8009968 <_strtod_l+0xad8>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d12b      	bne.n	8009760 <_strtod_l+0x8d0>
 8009708:	9b08      	ldr	r3, [sp, #32]
 800970a:	4651      	mov	r1, sl
 800970c:	b303      	cbz	r3, 8009750 <_strtod_l+0x8c0>
 800970e:	465a      	mov	r2, fp
 8009710:	4b96      	ldr	r3, [pc, #600]	@ (800996c <_strtod_l+0xadc>)
 8009712:	4013      	ands	r3, r2
 8009714:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009718:	f04f 32ff 	mov.w	r2, #4294967295
 800971c:	d81b      	bhi.n	8009756 <_strtod_l+0x8c6>
 800971e:	0d1b      	lsrs	r3, r3, #20
 8009720:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009724:	fa02 f303 	lsl.w	r3, r2, r3
 8009728:	4299      	cmp	r1, r3
 800972a:	d119      	bne.n	8009760 <_strtod_l+0x8d0>
 800972c:	4b90      	ldr	r3, [pc, #576]	@ (8009970 <_strtod_l+0xae0>)
 800972e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009730:	429a      	cmp	r2, r3
 8009732:	d102      	bne.n	800973a <_strtod_l+0x8aa>
 8009734:	3101      	adds	r1, #1
 8009736:	f43f adc6 	beq.w	80092c6 <_strtod_l+0x436>
 800973a:	f04f 0a00 	mov.w	sl, #0
 800973e:	4b8b      	ldr	r3, [pc, #556]	@ (800996c <_strtod_l+0xadc>)
 8009740:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009742:	401a      	ands	r2, r3
 8009744:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009748:	9b08      	ldr	r3, [sp, #32]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1b9      	bne.n	80096c2 <_strtod_l+0x832>
 800974e:	e5c5      	b.n	80092dc <_strtod_l+0x44c>
 8009750:	f04f 33ff 	mov.w	r3, #4294967295
 8009754:	e7e8      	b.n	8009728 <_strtod_l+0x898>
 8009756:	4613      	mov	r3, r2
 8009758:	e7e6      	b.n	8009728 <_strtod_l+0x898>
 800975a:	ea53 030a 	orrs.w	r3, r3, sl
 800975e:	d0a2      	beq.n	80096a6 <_strtod_l+0x816>
 8009760:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009762:	b1db      	cbz	r3, 800979c <_strtod_l+0x90c>
 8009764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009766:	4213      	tst	r3, r2
 8009768:	d0ee      	beq.n	8009748 <_strtod_l+0x8b8>
 800976a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976c:	4650      	mov	r0, sl
 800976e:	4659      	mov	r1, fp
 8009770:	9a08      	ldr	r2, [sp, #32]
 8009772:	b1bb      	cbz	r3, 80097a4 <_strtod_l+0x914>
 8009774:	f7ff fb68 	bl	8008e48 <sulp>
 8009778:	4602      	mov	r2, r0
 800977a:	460b      	mov	r3, r1
 800977c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009780:	f7f6 fcf4 	bl	800016c <__adddf3>
 8009784:	4682      	mov	sl, r0
 8009786:	468b      	mov	fp, r1
 8009788:	e7de      	b.n	8009748 <_strtod_l+0x8b8>
 800978a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800978e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009792:	f04f 3aff 	mov.w	sl, #4294967295
 8009796:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800979a:	e7d5      	b.n	8009748 <_strtod_l+0x8b8>
 800979c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800979e:	ea13 0f0a 	tst.w	r3, sl
 80097a2:	e7e1      	b.n	8009768 <_strtod_l+0x8d8>
 80097a4:	f7ff fb50 	bl	8008e48 <sulp>
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097b0:	f7f6 fcda 	bl	8000168 <__aeabi_dsub>
 80097b4:	2200      	movs	r2, #0
 80097b6:	2300      	movs	r3, #0
 80097b8:	4682      	mov	sl, r0
 80097ba:	468b      	mov	fp, r1
 80097bc:	f7f7 f8f4 	bl	80009a8 <__aeabi_dcmpeq>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d0c1      	beq.n	8009748 <_strtod_l+0x8b8>
 80097c4:	e615      	b.n	80093f2 <_strtod_l+0x562>
 80097c6:	4641      	mov	r1, r8
 80097c8:	4620      	mov	r0, r4
 80097ca:	f7ff fac9 	bl	8008d60 <__ratio>
 80097ce:	2200      	movs	r2, #0
 80097d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80097d4:	4606      	mov	r6, r0
 80097d6:	460f      	mov	r7, r1
 80097d8:	f7f7 f8fa 	bl	80009d0 <__aeabi_dcmple>
 80097dc:	2800      	cmp	r0, #0
 80097de:	d06d      	beq.n	80098bc <_strtod_l+0xa2c>
 80097e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d178      	bne.n	80098d8 <_strtod_l+0xa48>
 80097e6:	f1ba 0f00 	cmp.w	sl, #0
 80097ea:	d156      	bne.n	800989a <_strtod_l+0xa0a>
 80097ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d158      	bne.n	80098a8 <_strtod_l+0xa18>
 80097f6:	2200      	movs	r2, #0
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	4b5d      	ldr	r3, [pc, #372]	@ (8009974 <_strtod_l+0xae4>)
 80097fe:	f7f7 f8dd 	bl	80009bc <__aeabi_dcmplt>
 8009802:	2800      	cmp	r0, #0
 8009804:	d157      	bne.n	80098b6 <_strtod_l+0xa26>
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	2200      	movs	r2, #0
 800980c:	4b5a      	ldr	r3, [pc, #360]	@ (8009978 <_strtod_l+0xae8>)
 800980e:	f7f6 fe63 	bl	80004d8 <__aeabi_dmul>
 8009812:	4606      	mov	r6, r0
 8009814:	460f      	mov	r7, r1
 8009816:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800981a:	9606      	str	r6, [sp, #24]
 800981c:	9307      	str	r3, [sp, #28]
 800981e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009822:	4d52      	ldr	r5, [pc, #328]	@ (800996c <_strtod_l+0xadc>)
 8009824:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800982a:	401d      	ands	r5, r3
 800982c:	4b53      	ldr	r3, [pc, #332]	@ (800997c <_strtod_l+0xaec>)
 800982e:	429d      	cmp	r5, r3
 8009830:	f040 80aa 	bne.w	8009988 <_strtod_l+0xaf8>
 8009834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009836:	4650      	mov	r0, sl
 8009838:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800983c:	4659      	mov	r1, fp
 800983e:	f7ff f9cf 	bl	8008be0 <__ulp>
 8009842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009846:	f7f6 fe47 	bl	80004d8 <__aeabi_dmul>
 800984a:	4652      	mov	r2, sl
 800984c:	465b      	mov	r3, fp
 800984e:	f7f6 fc8d 	bl	800016c <__adddf3>
 8009852:	460b      	mov	r3, r1
 8009854:	4945      	ldr	r1, [pc, #276]	@ (800996c <_strtod_l+0xadc>)
 8009856:	4a4a      	ldr	r2, [pc, #296]	@ (8009980 <_strtod_l+0xaf0>)
 8009858:	4019      	ands	r1, r3
 800985a:	4291      	cmp	r1, r2
 800985c:	4682      	mov	sl, r0
 800985e:	d942      	bls.n	80098e6 <_strtod_l+0xa56>
 8009860:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009862:	4b43      	ldr	r3, [pc, #268]	@ (8009970 <_strtod_l+0xae0>)
 8009864:	429a      	cmp	r2, r3
 8009866:	d103      	bne.n	8009870 <_strtod_l+0x9e0>
 8009868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800986a:	3301      	adds	r3, #1
 800986c:	f43f ad2b 	beq.w	80092c6 <_strtod_l+0x436>
 8009870:	f04f 3aff 	mov.w	sl, #4294967295
 8009874:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009970 <_strtod_l+0xae0>
 8009878:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800987a:	9805      	ldr	r0, [sp, #20]
 800987c:	f7fe fe7e 	bl	800857c <_Bfree>
 8009880:	4649      	mov	r1, r9
 8009882:	9805      	ldr	r0, [sp, #20]
 8009884:	f7fe fe7a 	bl	800857c <_Bfree>
 8009888:	4641      	mov	r1, r8
 800988a:	9805      	ldr	r0, [sp, #20]
 800988c:	f7fe fe76 	bl	800857c <_Bfree>
 8009890:	4621      	mov	r1, r4
 8009892:	9805      	ldr	r0, [sp, #20]
 8009894:	f7fe fe72 	bl	800857c <_Bfree>
 8009898:	e618      	b.n	80094cc <_strtod_l+0x63c>
 800989a:	f1ba 0f01 	cmp.w	sl, #1
 800989e:	d103      	bne.n	80098a8 <_strtod_l+0xa18>
 80098a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f43f ada5 	beq.w	80093f2 <_strtod_l+0x562>
 80098a8:	2200      	movs	r2, #0
 80098aa:	4b36      	ldr	r3, [pc, #216]	@ (8009984 <_strtod_l+0xaf4>)
 80098ac:	2600      	movs	r6, #0
 80098ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098b2:	4f30      	ldr	r7, [pc, #192]	@ (8009974 <_strtod_l+0xae4>)
 80098b4:	e7b3      	b.n	800981e <_strtod_l+0x98e>
 80098b6:	2600      	movs	r6, #0
 80098b8:	4f2f      	ldr	r7, [pc, #188]	@ (8009978 <_strtod_l+0xae8>)
 80098ba:	e7ac      	b.n	8009816 <_strtod_l+0x986>
 80098bc:	4630      	mov	r0, r6
 80098be:	4639      	mov	r1, r7
 80098c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009978 <_strtod_l+0xae8>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	f7f6 fe08 	bl	80004d8 <__aeabi_dmul>
 80098c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ca:	4606      	mov	r6, r0
 80098cc:	460f      	mov	r7, r1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0a1      	beq.n	8009816 <_strtod_l+0x986>
 80098d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80098d6:	e7a2      	b.n	800981e <_strtod_l+0x98e>
 80098d8:	2200      	movs	r2, #0
 80098da:	4b26      	ldr	r3, [pc, #152]	@ (8009974 <_strtod_l+0xae4>)
 80098dc:	4616      	mov	r6, r2
 80098de:	461f      	mov	r7, r3
 80098e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098e4:	e79b      	b.n	800981e <_strtod_l+0x98e>
 80098e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80098ea:	9b08      	ldr	r3, [sp, #32]
 80098ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1c1      	bne.n	8009878 <_strtod_l+0x9e8>
 80098f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80098f8:	0d1b      	lsrs	r3, r3, #20
 80098fa:	051b      	lsls	r3, r3, #20
 80098fc:	429d      	cmp	r5, r3
 80098fe:	d1bb      	bne.n	8009878 <_strtod_l+0x9e8>
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f7 fc04 	bl	8001110 <__aeabi_d2lz>
 8009908:	f7f6 fdb8 	bl	800047c <__aeabi_l2d>
 800990c:	4602      	mov	r2, r0
 800990e:	460b      	mov	r3, r1
 8009910:	4630      	mov	r0, r6
 8009912:	4639      	mov	r1, r7
 8009914:	f7f6 fc28 	bl	8000168 <__aeabi_dsub>
 8009918:	460b      	mov	r3, r1
 800991a:	4602      	mov	r2, r0
 800991c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009920:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009926:	ea46 060a 	orr.w	r6, r6, sl
 800992a:	431e      	orrs	r6, r3
 800992c:	d069      	beq.n	8009a02 <_strtod_l+0xb72>
 800992e:	a30a      	add	r3, pc, #40	@ (adr r3, 8009958 <_strtod_l+0xac8>)
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f7 f842 	bl	80009bc <__aeabi_dcmplt>
 8009938:	2800      	cmp	r0, #0
 800993a:	f47f accf 	bne.w	80092dc <_strtod_l+0x44c>
 800993e:	a308      	add	r3, pc, #32	@ (adr r3, 8009960 <_strtod_l+0xad0>)
 8009940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009944:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009948:	f7f7 f856 	bl	80009f8 <__aeabi_dcmpgt>
 800994c:	2800      	cmp	r0, #0
 800994e:	d093      	beq.n	8009878 <_strtod_l+0x9e8>
 8009950:	e4c4      	b.n	80092dc <_strtod_l+0x44c>
 8009952:	bf00      	nop
 8009954:	f3af 8000 	nop.w
 8009958:	94a03595 	.word	0x94a03595
 800995c:	3fdfffff 	.word	0x3fdfffff
 8009960:	35afe535 	.word	0x35afe535
 8009964:	3fe00000 	.word	0x3fe00000
 8009968:	000fffff 	.word	0x000fffff
 800996c:	7ff00000 	.word	0x7ff00000
 8009970:	7fefffff 	.word	0x7fefffff
 8009974:	3ff00000 	.word	0x3ff00000
 8009978:	3fe00000 	.word	0x3fe00000
 800997c:	7fe00000 	.word	0x7fe00000
 8009980:	7c9fffff 	.word	0x7c9fffff
 8009984:	bff00000 	.word	0xbff00000
 8009988:	9b08      	ldr	r3, [sp, #32]
 800998a:	b323      	cbz	r3, 80099d6 <_strtod_l+0xb46>
 800998c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009990:	d821      	bhi.n	80099d6 <_strtod_l+0xb46>
 8009992:	a327      	add	r3, pc, #156	@ (adr r3, 8009a30 <_strtod_l+0xba0>)
 8009994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009998:	4630      	mov	r0, r6
 800999a:	4639      	mov	r1, r7
 800999c:	f7f7 f818 	bl	80009d0 <__aeabi_dcmple>
 80099a0:	b1a0      	cbz	r0, 80099cc <_strtod_l+0xb3c>
 80099a2:	4639      	mov	r1, r7
 80099a4:	4630      	mov	r0, r6
 80099a6:	f7f7 f86f 	bl	8000a88 <__aeabi_d2uiz>
 80099aa:	2801      	cmp	r0, #1
 80099ac:	bf38      	it	cc
 80099ae:	2001      	movcc	r0, #1
 80099b0:	f7f6 fd18 	bl	80003e4 <__aeabi_ui2d>
 80099b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099b6:	4606      	mov	r6, r0
 80099b8:	460f      	mov	r7, r1
 80099ba:	b9fb      	cbnz	r3, 80099fc <_strtod_l+0xb6c>
 80099bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80099c0:	9014      	str	r0, [sp, #80]	@ 0x50
 80099c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80099c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80099c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80099cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80099d2:	1b5b      	subs	r3, r3, r5
 80099d4:	9311      	str	r3, [sp, #68]	@ 0x44
 80099d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80099de:	f7ff f8ff 	bl	8008be0 <__ulp>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4650      	mov	r0, sl
 80099e8:	4659      	mov	r1, fp
 80099ea:	f7f6 fd75 	bl	80004d8 <__aeabi_dmul>
 80099ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099f2:	f7f6 fbbb 	bl	800016c <__adddf3>
 80099f6:	4682      	mov	sl, r0
 80099f8:	468b      	mov	fp, r1
 80099fa:	e776      	b.n	80098ea <_strtod_l+0xa5a>
 80099fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a00:	e7e0      	b.n	80099c4 <_strtod_l+0xb34>
 8009a02:	a30d      	add	r3, pc, #52	@ (adr r3, 8009a38 <_strtod_l+0xba8>)
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f7f6 ffd8 	bl	80009bc <__aeabi_dcmplt>
 8009a0c:	e79e      	b.n	800994c <_strtod_l+0xabc>
 8009a0e:	2300      	movs	r3, #0
 8009a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a14:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	f7ff ba77 	b.w	8008f0a <_strtod_l+0x7a>
 8009a1c:	2a65      	cmp	r2, #101	@ 0x65
 8009a1e:	f43f ab6e 	beq.w	80090fe <_strtod_l+0x26e>
 8009a22:	2a45      	cmp	r2, #69	@ 0x45
 8009a24:	f43f ab6b 	beq.w	80090fe <_strtod_l+0x26e>
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f7ff bba6 	b.w	800917a <_strtod_l+0x2ea>
 8009a2e:	bf00      	nop
 8009a30:	ffc00000 	.word	0xffc00000
 8009a34:	41dfffff 	.word	0x41dfffff
 8009a38:	94a03595 	.word	0x94a03595
 8009a3c:	3fcfffff 	.word	0x3fcfffff

08009a40 <_strtod_r>:
 8009a40:	4b01      	ldr	r3, [pc, #4]	@ (8009a48 <_strtod_r+0x8>)
 8009a42:	f7ff ba25 	b.w	8008e90 <_strtod_l>
 8009a46:	bf00      	nop
 8009a48:	2000040c 	.word	0x2000040c

08009a4c <_strtol_l.constprop.0>:
 8009a4c:	2b24      	cmp	r3, #36	@ 0x24
 8009a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a52:	4686      	mov	lr, r0
 8009a54:	4690      	mov	r8, r2
 8009a56:	d801      	bhi.n	8009a5c <_strtol_l.constprop.0+0x10>
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d106      	bne.n	8009a6a <_strtol_l.constprop.0+0x1e>
 8009a5c:	f7fd fdb2 	bl	80075c4 <__errno>
 8009a60:	2316      	movs	r3, #22
 8009a62:	6003      	str	r3, [r0, #0]
 8009a64:	2000      	movs	r0, #0
 8009a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a6a:	460d      	mov	r5, r1
 8009a6c:	4833      	ldr	r0, [pc, #204]	@ (8009b3c <_strtol_l.constprop.0+0xf0>)
 8009a6e:	462a      	mov	r2, r5
 8009a70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a74:	5d06      	ldrb	r6, [r0, r4]
 8009a76:	f016 0608 	ands.w	r6, r6, #8
 8009a7a:	d1f8      	bne.n	8009a6e <_strtol_l.constprop.0+0x22>
 8009a7c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a7e:	d12d      	bne.n	8009adc <_strtol_l.constprop.0+0x90>
 8009a80:	2601      	movs	r6, #1
 8009a82:	782c      	ldrb	r4, [r5, #0]
 8009a84:	1c95      	adds	r5, r2, #2
 8009a86:	f033 0210 	bics.w	r2, r3, #16
 8009a8a:	d109      	bne.n	8009aa0 <_strtol_l.constprop.0+0x54>
 8009a8c:	2c30      	cmp	r4, #48	@ 0x30
 8009a8e:	d12a      	bne.n	8009ae6 <_strtol_l.constprop.0+0x9a>
 8009a90:	782a      	ldrb	r2, [r5, #0]
 8009a92:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a96:	2a58      	cmp	r2, #88	@ 0x58
 8009a98:	d125      	bne.n	8009ae6 <_strtol_l.constprop.0+0x9a>
 8009a9a:	2310      	movs	r3, #16
 8009a9c:	786c      	ldrb	r4, [r5, #1]
 8009a9e:	3502      	adds	r5, #2
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009aa6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009aaa:	fbbc f9f3 	udiv	r9, ip, r3
 8009aae:	4610      	mov	r0, r2
 8009ab0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ab4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009ab8:	2f09      	cmp	r7, #9
 8009aba:	d81b      	bhi.n	8009af4 <_strtol_l.constprop.0+0xa8>
 8009abc:	463c      	mov	r4, r7
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	dd27      	ble.n	8009b12 <_strtol_l.constprop.0+0xc6>
 8009ac2:	1c57      	adds	r7, r2, #1
 8009ac4:	d007      	beq.n	8009ad6 <_strtol_l.constprop.0+0x8a>
 8009ac6:	4581      	cmp	r9, r0
 8009ac8:	d320      	bcc.n	8009b0c <_strtol_l.constprop.0+0xc0>
 8009aca:	d101      	bne.n	8009ad0 <_strtol_l.constprop.0+0x84>
 8009acc:	45a2      	cmp	sl, r4
 8009ace:	db1d      	blt.n	8009b0c <_strtol_l.constprop.0+0xc0>
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	fb00 4003 	mla	r0, r0, r3, r4
 8009ad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009ada:	e7eb      	b.n	8009ab4 <_strtol_l.constprop.0+0x68>
 8009adc:	2c2b      	cmp	r4, #43	@ 0x2b
 8009ade:	bf04      	itt	eq
 8009ae0:	782c      	ldrbeq	r4, [r5, #0]
 8009ae2:	1c95      	addeq	r5, r2, #2
 8009ae4:	e7cf      	b.n	8009a86 <_strtol_l.constprop.0+0x3a>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1da      	bne.n	8009aa0 <_strtol_l.constprop.0+0x54>
 8009aea:	2c30      	cmp	r4, #48	@ 0x30
 8009aec:	bf0c      	ite	eq
 8009aee:	2308      	moveq	r3, #8
 8009af0:	230a      	movne	r3, #10
 8009af2:	e7d5      	b.n	8009aa0 <_strtol_l.constprop.0+0x54>
 8009af4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009af8:	2f19      	cmp	r7, #25
 8009afa:	d801      	bhi.n	8009b00 <_strtol_l.constprop.0+0xb4>
 8009afc:	3c37      	subs	r4, #55	@ 0x37
 8009afe:	e7de      	b.n	8009abe <_strtol_l.constprop.0+0x72>
 8009b00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b04:	2f19      	cmp	r7, #25
 8009b06:	d804      	bhi.n	8009b12 <_strtol_l.constprop.0+0xc6>
 8009b08:	3c57      	subs	r4, #87	@ 0x57
 8009b0a:	e7d8      	b.n	8009abe <_strtol_l.constprop.0+0x72>
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b10:	e7e1      	b.n	8009ad6 <_strtol_l.constprop.0+0x8a>
 8009b12:	1c53      	adds	r3, r2, #1
 8009b14:	d108      	bne.n	8009b28 <_strtol_l.constprop.0+0xdc>
 8009b16:	2322      	movs	r3, #34	@ 0x22
 8009b18:	4660      	mov	r0, ip
 8009b1a:	f8ce 3000 	str.w	r3, [lr]
 8009b1e:	f1b8 0f00 	cmp.w	r8, #0
 8009b22:	d0a0      	beq.n	8009a66 <_strtol_l.constprop.0+0x1a>
 8009b24:	1e69      	subs	r1, r5, #1
 8009b26:	e006      	b.n	8009b36 <_strtol_l.constprop.0+0xea>
 8009b28:	b106      	cbz	r6, 8009b2c <_strtol_l.constprop.0+0xe0>
 8009b2a:	4240      	negs	r0, r0
 8009b2c:	f1b8 0f00 	cmp.w	r8, #0
 8009b30:	d099      	beq.n	8009a66 <_strtol_l.constprop.0+0x1a>
 8009b32:	2a00      	cmp	r2, #0
 8009b34:	d1f6      	bne.n	8009b24 <_strtol_l.constprop.0+0xd8>
 8009b36:	f8c8 1000 	str.w	r1, [r8]
 8009b3a:	e794      	b.n	8009a66 <_strtol_l.constprop.0+0x1a>
 8009b3c:	0800bde9 	.word	0x0800bde9

08009b40 <_strtol_r>:
 8009b40:	f7ff bf84 	b.w	8009a4c <_strtol_l.constprop.0>

08009b44 <__ssputs_r>:
 8009b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b48:	461f      	mov	r7, r3
 8009b4a:	688e      	ldr	r6, [r1, #8]
 8009b4c:	4682      	mov	sl, r0
 8009b4e:	42be      	cmp	r6, r7
 8009b50:	460c      	mov	r4, r1
 8009b52:	4690      	mov	r8, r2
 8009b54:	680b      	ldr	r3, [r1, #0]
 8009b56:	d82d      	bhi.n	8009bb4 <__ssputs_r+0x70>
 8009b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009b60:	d026      	beq.n	8009bb0 <__ssputs_r+0x6c>
 8009b62:	6965      	ldr	r5, [r4, #20]
 8009b64:	6909      	ldr	r1, [r1, #16]
 8009b66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b6a:	eba3 0901 	sub.w	r9, r3, r1
 8009b6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b72:	1c7b      	adds	r3, r7, #1
 8009b74:	444b      	add	r3, r9
 8009b76:	106d      	asrs	r5, r5, #1
 8009b78:	429d      	cmp	r5, r3
 8009b7a:	bf38      	it	cc
 8009b7c:	461d      	movcc	r5, r3
 8009b7e:	0553      	lsls	r3, r2, #21
 8009b80:	d527      	bpl.n	8009bd2 <__ssputs_r+0x8e>
 8009b82:	4629      	mov	r1, r5
 8009b84:	f7fe fc2e 	bl	80083e4 <_malloc_r>
 8009b88:	4606      	mov	r6, r0
 8009b8a:	b360      	cbz	r0, 8009be6 <__ssputs_r+0xa2>
 8009b8c:	464a      	mov	r2, r9
 8009b8e:	6921      	ldr	r1, [r4, #16]
 8009b90:	f7fd fd53 	bl	800763a <memcpy>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	6126      	str	r6, [r4, #16]
 8009ba2:	444e      	add	r6, r9
 8009ba4:	6026      	str	r6, [r4, #0]
 8009ba6:	463e      	mov	r6, r7
 8009ba8:	6165      	str	r5, [r4, #20]
 8009baa:	eba5 0509 	sub.w	r5, r5, r9
 8009bae:	60a5      	str	r5, [r4, #8]
 8009bb0:	42be      	cmp	r6, r7
 8009bb2:	d900      	bls.n	8009bb6 <__ssputs_r+0x72>
 8009bb4:	463e      	mov	r6, r7
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	4641      	mov	r1, r8
 8009bba:	6820      	ldr	r0, [r4, #0]
 8009bbc:	f000 f9c2 	bl	8009f44 <memmove>
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	68a3      	ldr	r3, [r4, #8]
 8009bc4:	1b9b      	subs	r3, r3, r6
 8009bc6:	60a3      	str	r3, [r4, #8]
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	4433      	add	r3, r6
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd2:	462a      	mov	r2, r5
 8009bd4:	f000 fd75 	bl	800a6c2 <_realloc_r>
 8009bd8:	4606      	mov	r6, r0
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d1e0      	bne.n	8009ba0 <__ssputs_r+0x5c>
 8009bde:	4650      	mov	r0, sl
 8009be0:	6921      	ldr	r1, [r4, #16]
 8009be2:	f7fe fb8d 	bl	8008300 <_free_r>
 8009be6:	230c      	movs	r3, #12
 8009be8:	f8ca 3000 	str.w	r3, [sl]
 8009bec:	89a3      	ldrh	r3, [r4, #12]
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	e7e9      	b.n	8009bce <__ssputs_r+0x8a>
	...

08009bfc <_svfiprintf_r>:
 8009bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c00:	4698      	mov	r8, r3
 8009c02:	898b      	ldrh	r3, [r1, #12]
 8009c04:	4607      	mov	r7, r0
 8009c06:	061b      	lsls	r3, r3, #24
 8009c08:	460d      	mov	r5, r1
 8009c0a:	4614      	mov	r4, r2
 8009c0c:	b09d      	sub	sp, #116	@ 0x74
 8009c0e:	d510      	bpl.n	8009c32 <_svfiprintf_r+0x36>
 8009c10:	690b      	ldr	r3, [r1, #16]
 8009c12:	b973      	cbnz	r3, 8009c32 <_svfiprintf_r+0x36>
 8009c14:	2140      	movs	r1, #64	@ 0x40
 8009c16:	f7fe fbe5 	bl	80083e4 <_malloc_r>
 8009c1a:	6028      	str	r0, [r5, #0]
 8009c1c:	6128      	str	r0, [r5, #16]
 8009c1e:	b930      	cbnz	r0, 8009c2e <_svfiprintf_r+0x32>
 8009c20:	230c      	movs	r3, #12
 8009c22:	603b      	str	r3, [r7, #0]
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	b01d      	add	sp, #116	@ 0x74
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2e:	2340      	movs	r3, #64	@ 0x40
 8009c30:	616b      	str	r3, [r5, #20]
 8009c32:	2300      	movs	r3, #0
 8009c34:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c36:	2320      	movs	r3, #32
 8009c38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c3c:	2330      	movs	r3, #48	@ 0x30
 8009c3e:	f04f 0901 	mov.w	r9, #1
 8009c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c46:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009de0 <_svfiprintf_r+0x1e4>
 8009c4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009c4e:	4623      	mov	r3, r4
 8009c50:	469a      	mov	sl, r3
 8009c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c56:	b10a      	cbz	r2, 8009c5c <_svfiprintf_r+0x60>
 8009c58:	2a25      	cmp	r2, #37	@ 0x25
 8009c5a:	d1f9      	bne.n	8009c50 <_svfiprintf_r+0x54>
 8009c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8009c60:	d00b      	beq.n	8009c7a <_svfiprintf_r+0x7e>
 8009c62:	465b      	mov	r3, fp
 8009c64:	4622      	mov	r2, r4
 8009c66:	4629      	mov	r1, r5
 8009c68:	4638      	mov	r0, r7
 8009c6a:	f7ff ff6b 	bl	8009b44 <__ssputs_r>
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f000 80a7 	beq.w	8009dc2 <_svfiprintf_r+0x1c6>
 8009c74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c76:	445a      	add	r2, fp
 8009c78:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 809f 	beq.w	8009dc2 <_svfiprintf_r+0x1c6>
 8009c84:	2300      	movs	r3, #0
 8009c86:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c8e:	f10a 0a01 	add.w	sl, sl, #1
 8009c92:	9304      	str	r3, [sp, #16]
 8009c94:	9307      	str	r3, [sp, #28]
 8009c96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c9a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c9c:	4654      	mov	r4, sl
 8009c9e:	2205      	movs	r2, #5
 8009ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ca4:	484e      	ldr	r0, [pc, #312]	@ (8009de0 <_svfiprintf_r+0x1e4>)
 8009ca6:	f7fd fcba 	bl	800761e <memchr>
 8009caa:	9a04      	ldr	r2, [sp, #16]
 8009cac:	b9d8      	cbnz	r0, 8009ce6 <_svfiprintf_r+0xea>
 8009cae:	06d0      	lsls	r0, r2, #27
 8009cb0:	bf44      	itt	mi
 8009cb2:	2320      	movmi	r3, #32
 8009cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cb8:	0711      	lsls	r1, r2, #28
 8009cba:	bf44      	itt	mi
 8009cbc:	232b      	movmi	r3, #43	@ 0x2b
 8009cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cc8:	d015      	beq.n	8009cf6 <_svfiprintf_r+0xfa>
 8009cca:	4654      	mov	r4, sl
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f04f 0c0a 	mov.w	ip, #10
 8009cd2:	9a07      	ldr	r2, [sp, #28]
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cda:	3b30      	subs	r3, #48	@ 0x30
 8009cdc:	2b09      	cmp	r3, #9
 8009cde:	d94b      	bls.n	8009d78 <_svfiprintf_r+0x17c>
 8009ce0:	b1b0      	cbz	r0, 8009d10 <_svfiprintf_r+0x114>
 8009ce2:	9207      	str	r2, [sp, #28]
 8009ce4:	e014      	b.n	8009d10 <_svfiprintf_r+0x114>
 8009ce6:	eba0 0308 	sub.w	r3, r0, r8
 8009cea:	fa09 f303 	lsl.w	r3, r9, r3
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	46a2      	mov	sl, r4
 8009cf2:	9304      	str	r3, [sp, #16]
 8009cf4:	e7d2      	b.n	8009c9c <_svfiprintf_r+0xa0>
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	1d19      	adds	r1, r3, #4
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	9103      	str	r1, [sp, #12]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	bfbb      	ittet	lt
 8009d02:	425b      	neglt	r3, r3
 8009d04:	f042 0202 	orrlt.w	r2, r2, #2
 8009d08:	9307      	strge	r3, [sp, #28]
 8009d0a:	9307      	strlt	r3, [sp, #28]
 8009d0c:	bfb8      	it	lt
 8009d0e:	9204      	strlt	r2, [sp, #16]
 8009d10:	7823      	ldrb	r3, [r4, #0]
 8009d12:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d14:	d10a      	bne.n	8009d2c <_svfiprintf_r+0x130>
 8009d16:	7863      	ldrb	r3, [r4, #1]
 8009d18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d1a:	d132      	bne.n	8009d82 <_svfiprintf_r+0x186>
 8009d1c:	9b03      	ldr	r3, [sp, #12]
 8009d1e:	3402      	adds	r4, #2
 8009d20:	1d1a      	adds	r2, r3, #4
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	9203      	str	r2, [sp, #12]
 8009d26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d2a:	9305      	str	r3, [sp, #20]
 8009d2c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009de4 <_svfiprintf_r+0x1e8>
 8009d30:	2203      	movs	r2, #3
 8009d32:	4650      	mov	r0, sl
 8009d34:	7821      	ldrb	r1, [r4, #0]
 8009d36:	f7fd fc72 	bl	800761e <memchr>
 8009d3a:	b138      	cbz	r0, 8009d4c <_svfiprintf_r+0x150>
 8009d3c:	2240      	movs	r2, #64	@ 0x40
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	eba0 000a 	sub.w	r0, r0, sl
 8009d44:	4082      	lsls	r2, r0
 8009d46:	4313      	orrs	r3, r2
 8009d48:	3401      	adds	r4, #1
 8009d4a:	9304      	str	r3, [sp, #16]
 8009d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d50:	2206      	movs	r2, #6
 8009d52:	4825      	ldr	r0, [pc, #148]	@ (8009de8 <_svfiprintf_r+0x1ec>)
 8009d54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009d58:	f7fd fc61 	bl	800761e <memchr>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d036      	beq.n	8009dce <_svfiprintf_r+0x1d2>
 8009d60:	4b22      	ldr	r3, [pc, #136]	@ (8009dec <_svfiprintf_r+0x1f0>)
 8009d62:	bb1b      	cbnz	r3, 8009dac <_svfiprintf_r+0x1b0>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	3307      	adds	r3, #7
 8009d68:	f023 0307 	bic.w	r3, r3, #7
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	9303      	str	r3, [sp, #12]
 8009d70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d72:	4433      	add	r3, r6
 8009d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d76:	e76a      	b.n	8009c4e <_svfiprintf_r+0x52>
 8009d78:	460c      	mov	r4, r1
 8009d7a:	2001      	movs	r0, #1
 8009d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d80:	e7a8      	b.n	8009cd4 <_svfiprintf_r+0xd8>
 8009d82:	2300      	movs	r3, #0
 8009d84:	f04f 0c0a 	mov.w	ip, #10
 8009d88:	4619      	mov	r1, r3
 8009d8a:	3401      	adds	r4, #1
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d94:	3a30      	subs	r2, #48	@ 0x30
 8009d96:	2a09      	cmp	r2, #9
 8009d98:	d903      	bls.n	8009da2 <_svfiprintf_r+0x1a6>
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0c6      	beq.n	8009d2c <_svfiprintf_r+0x130>
 8009d9e:	9105      	str	r1, [sp, #20]
 8009da0:	e7c4      	b.n	8009d2c <_svfiprintf_r+0x130>
 8009da2:	4604      	mov	r4, r0
 8009da4:	2301      	movs	r3, #1
 8009da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009daa:	e7f0      	b.n	8009d8e <_svfiprintf_r+0x192>
 8009dac:	ab03      	add	r3, sp, #12
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	462a      	mov	r2, r5
 8009db2:	4638      	mov	r0, r7
 8009db4:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <_svfiprintf_r+0x1f4>)
 8009db6:	a904      	add	r1, sp, #16
 8009db8:	f7fc fcbe 	bl	8006738 <_printf_float>
 8009dbc:	1c42      	adds	r2, r0, #1
 8009dbe:	4606      	mov	r6, r0
 8009dc0:	d1d6      	bne.n	8009d70 <_svfiprintf_r+0x174>
 8009dc2:	89ab      	ldrh	r3, [r5, #12]
 8009dc4:	065b      	lsls	r3, r3, #25
 8009dc6:	f53f af2d 	bmi.w	8009c24 <_svfiprintf_r+0x28>
 8009dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009dcc:	e72c      	b.n	8009c28 <_svfiprintf_r+0x2c>
 8009dce:	ab03      	add	r3, sp, #12
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	462a      	mov	r2, r5
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	4b06      	ldr	r3, [pc, #24]	@ (8009df0 <_svfiprintf_r+0x1f4>)
 8009dd8:	a904      	add	r1, sp, #16
 8009dda:	f7fc ff4b 	bl	8006c74 <_printf_i>
 8009dde:	e7ed      	b.n	8009dbc <_svfiprintf_r+0x1c0>
 8009de0:	0800bee9 	.word	0x0800bee9
 8009de4:	0800beef 	.word	0x0800beef
 8009de8:	0800bef3 	.word	0x0800bef3
 8009dec:	08006739 	.word	0x08006739
 8009df0:	08009b45 	.word	0x08009b45

08009df4 <__sflush_r>:
 8009df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	0716      	lsls	r6, r2, #28
 8009dfc:	4605      	mov	r5, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	d454      	bmi.n	8009eac <__sflush_r+0xb8>
 8009e02:	684b      	ldr	r3, [r1, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	dc02      	bgt.n	8009e0e <__sflush_r+0x1a>
 8009e08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dd48      	ble.n	8009ea0 <__sflush_r+0xac>
 8009e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e10:	2e00      	cmp	r6, #0
 8009e12:	d045      	beq.n	8009ea0 <__sflush_r+0xac>
 8009e14:	2300      	movs	r3, #0
 8009e16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e1a:	682f      	ldr	r7, [r5, #0]
 8009e1c:	6a21      	ldr	r1, [r4, #32]
 8009e1e:	602b      	str	r3, [r5, #0]
 8009e20:	d030      	beq.n	8009e84 <__sflush_r+0x90>
 8009e22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	0759      	lsls	r1, r3, #29
 8009e28:	d505      	bpl.n	8009e36 <__sflush_r+0x42>
 8009e2a:	6863      	ldr	r3, [r4, #4]
 8009e2c:	1ad2      	subs	r2, r2, r3
 8009e2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e30:	b10b      	cbz	r3, 8009e36 <__sflush_r+0x42>
 8009e32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	2300      	movs	r3, #0
 8009e38:	4628      	mov	r0, r5
 8009e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e3c:	6a21      	ldr	r1, [r4, #32]
 8009e3e:	47b0      	blx	r6
 8009e40:	1c43      	adds	r3, r0, #1
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	d106      	bne.n	8009e54 <__sflush_r+0x60>
 8009e46:	6829      	ldr	r1, [r5, #0]
 8009e48:	291d      	cmp	r1, #29
 8009e4a:	d82b      	bhi.n	8009ea4 <__sflush_r+0xb0>
 8009e4c:	4a28      	ldr	r2, [pc, #160]	@ (8009ef0 <__sflush_r+0xfc>)
 8009e4e:	410a      	asrs	r2, r1
 8009e50:	07d6      	lsls	r6, r2, #31
 8009e52:	d427      	bmi.n	8009ea4 <__sflush_r+0xb0>
 8009e54:	2200      	movs	r2, #0
 8009e56:	6062      	str	r2, [r4, #4]
 8009e58:	6922      	ldr	r2, [r4, #16]
 8009e5a:	04d9      	lsls	r1, r3, #19
 8009e5c:	6022      	str	r2, [r4, #0]
 8009e5e:	d504      	bpl.n	8009e6a <__sflush_r+0x76>
 8009e60:	1c42      	adds	r2, r0, #1
 8009e62:	d101      	bne.n	8009e68 <__sflush_r+0x74>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b903      	cbnz	r3, 8009e6a <__sflush_r+0x76>
 8009e68:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e6c:	602f      	str	r7, [r5, #0]
 8009e6e:	b1b9      	cbz	r1, 8009ea0 <__sflush_r+0xac>
 8009e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e74:	4299      	cmp	r1, r3
 8009e76:	d002      	beq.n	8009e7e <__sflush_r+0x8a>
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f7fe fa41 	bl	8008300 <_free_r>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e82:	e00d      	b.n	8009ea0 <__sflush_r+0xac>
 8009e84:	2301      	movs	r3, #1
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b0      	blx	r6
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	1c50      	adds	r0, r2, #1
 8009e8e:	d1c9      	bne.n	8009e24 <__sflush_r+0x30>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0c6      	beq.n	8009e24 <__sflush_r+0x30>
 8009e96:	2b1d      	cmp	r3, #29
 8009e98:	d001      	beq.n	8009e9e <__sflush_r+0xaa>
 8009e9a:	2b16      	cmp	r3, #22
 8009e9c:	d11d      	bne.n	8009eda <__sflush_r+0xe6>
 8009e9e:	602f      	str	r7, [r5, #0]
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e021      	b.n	8009ee8 <__sflush_r+0xf4>
 8009ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea8:	b21b      	sxth	r3, r3
 8009eaa:	e01a      	b.n	8009ee2 <__sflush_r+0xee>
 8009eac:	690f      	ldr	r7, [r1, #16]
 8009eae:	2f00      	cmp	r7, #0
 8009eb0:	d0f6      	beq.n	8009ea0 <__sflush_r+0xac>
 8009eb2:	0793      	lsls	r3, r2, #30
 8009eb4:	bf18      	it	ne
 8009eb6:	2300      	movne	r3, #0
 8009eb8:	680e      	ldr	r6, [r1, #0]
 8009eba:	bf08      	it	eq
 8009ebc:	694b      	ldreq	r3, [r1, #20]
 8009ebe:	1bf6      	subs	r6, r6, r7
 8009ec0:	600f      	str	r7, [r1, #0]
 8009ec2:	608b      	str	r3, [r1, #8]
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	ddeb      	ble.n	8009ea0 <__sflush_r+0xac>
 8009ec8:	4633      	mov	r3, r6
 8009eca:	463a      	mov	r2, r7
 8009ecc:	4628      	mov	r0, r5
 8009ece:	6a21      	ldr	r1, [r4, #32]
 8009ed0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009ed4:	47e0      	blx	ip
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	dc07      	bgt.n	8009eea <__sflush_r+0xf6>
 8009eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee6:	81a3      	strh	r3, [r4, #12]
 8009ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eea:	4407      	add	r7, r0
 8009eec:	1a36      	subs	r6, r6, r0
 8009eee:	e7e9      	b.n	8009ec4 <__sflush_r+0xd0>
 8009ef0:	dfbffffe 	.word	0xdfbffffe

08009ef4 <_fflush_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	690b      	ldr	r3, [r1, #16]
 8009ef8:	4605      	mov	r5, r0
 8009efa:	460c      	mov	r4, r1
 8009efc:	b913      	cbnz	r3, 8009f04 <_fflush_r+0x10>
 8009efe:	2500      	movs	r5, #0
 8009f00:	4628      	mov	r0, r5
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	b118      	cbz	r0, 8009f0e <_fflush_r+0x1a>
 8009f06:	6a03      	ldr	r3, [r0, #32]
 8009f08:	b90b      	cbnz	r3, 8009f0e <_fflush_r+0x1a>
 8009f0a:	f7fd fa6f 	bl	80073ec <__sinit>
 8009f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0f3      	beq.n	8009efe <_fflush_r+0xa>
 8009f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f18:	07d0      	lsls	r0, r2, #31
 8009f1a:	d404      	bmi.n	8009f26 <_fflush_r+0x32>
 8009f1c:	0599      	lsls	r1, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <_fflush_r+0x32>
 8009f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f22:	f7fd fb7a 	bl	800761a <__retarget_lock_acquire_recursive>
 8009f26:	4628      	mov	r0, r5
 8009f28:	4621      	mov	r1, r4
 8009f2a:	f7ff ff63 	bl	8009df4 <__sflush_r>
 8009f2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f30:	4605      	mov	r5, r0
 8009f32:	07da      	lsls	r2, r3, #31
 8009f34:	d4e4      	bmi.n	8009f00 <_fflush_r+0xc>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	059b      	lsls	r3, r3, #22
 8009f3a:	d4e1      	bmi.n	8009f00 <_fflush_r+0xc>
 8009f3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f3e:	f7fd fb6d 	bl	800761c <__retarget_lock_release_recursive>
 8009f42:	e7dd      	b.n	8009f00 <_fflush_r+0xc>

08009f44 <memmove>:
 8009f44:	4288      	cmp	r0, r1
 8009f46:	b510      	push	{r4, lr}
 8009f48:	eb01 0402 	add.w	r4, r1, r2
 8009f4c:	d902      	bls.n	8009f54 <memmove+0x10>
 8009f4e:	4284      	cmp	r4, r0
 8009f50:	4623      	mov	r3, r4
 8009f52:	d807      	bhi.n	8009f64 <memmove+0x20>
 8009f54:	1e43      	subs	r3, r0, #1
 8009f56:	42a1      	cmp	r1, r4
 8009f58:	d008      	beq.n	8009f6c <memmove+0x28>
 8009f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f62:	e7f8      	b.n	8009f56 <memmove+0x12>
 8009f64:	4601      	mov	r1, r0
 8009f66:	4402      	add	r2, r0
 8009f68:	428a      	cmp	r2, r1
 8009f6a:	d100      	bne.n	8009f6e <memmove+0x2a>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f76:	e7f7      	b.n	8009f68 <memmove+0x24>

08009f78 <strncmp>:
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	b16a      	cbz	r2, 8009f98 <strncmp+0x20>
 8009f7c:	3901      	subs	r1, #1
 8009f7e:	1884      	adds	r4, r0, r2
 8009f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d103      	bne.n	8009f94 <strncmp+0x1c>
 8009f8c:	42a0      	cmp	r0, r4
 8009f8e:	d001      	beq.n	8009f94 <strncmp+0x1c>
 8009f90:	2a00      	cmp	r2, #0
 8009f92:	d1f5      	bne.n	8009f80 <strncmp+0x8>
 8009f94:	1ad0      	subs	r0, r2, r3
 8009f96:	bd10      	pop	{r4, pc}
 8009f98:	4610      	mov	r0, r2
 8009f9a:	e7fc      	b.n	8009f96 <strncmp+0x1e>

08009f9c <_sbrk_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4d05      	ldr	r5, [pc, #20]	@ (8009fb8 <_sbrk_r+0x1c>)
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	f7f9 f8d8 	bl	800315c <_sbrk>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_sbrk_r+0x1a>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_sbrk_r+0x1a>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	200008d4 	.word	0x200008d4

08009fbc <nan>:
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	4901      	ldr	r1, [pc, #4]	@ (8009fc4 <nan+0x8>)
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	7ff80000 	.word	0x7ff80000

08009fc8 <__assert_func>:
 8009fc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fca:	4614      	mov	r4, r2
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4b09      	ldr	r3, [pc, #36]	@ (8009ff4 <__assert_func+0x2c>)
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68d8      	ldr	r0, [r3, #12]
 8009fd6:	b954      	cbnz	r4, 8009fee <__assert_func+0x26>
 8009fd8:	4b07      	ldr	r3, [pc, #28]	@ (8009ff8 <__assert_func+0x30>)
 8009fda:	461c      	mov	r4, r3
 8009fdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fe0:	9100      	str	r1, [sp, #0]
 8009fe2:	462b      	mov	r3, r5
 8009fe4:	4905      	ldr	r1, [pc, #20]	@ (8009ffc <__assert_func+0x34>)
 8009fe6:	f000 fba7 	bl	800a738 <fiprintf>
 8009fea:	f000 fbb7 	bl	800a75c <abort>
 8009fee:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <__assert_func+0x38>)
 8009ff0:	e7f4      	b.n	8009fdc <__assert_func+0x14>
 8009ff2:	bf00      	nop
 8009ff4:	200003bc 	.word	0x200003bc
 8009ff8:	0800bf3d 	.word	0x0800bf3d
 8009ffc:	0800bf0f 	.word	0x0800bf0f
 800a000:	0800bf02 	.word	0x0800bf02

0800a004 <_calloc_r>:
 800a004:	b570      	push	{r4, r5, r6, lr}
 800a006:	fba1 5402 	umull	r5, r4, r1, r2
 800a00a:	b93c      	cbnz	r4, 800a01c <_calloc_r+0x18>
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7fe f9e9 	bl	80083e4 <_malloc_r>
 800a012:	4606      	mov	r6, r0
 800a014:	b928      	cbnz	r0, 800a022 <_calloc_r+0x1e>
 800a016:	2600      	movs	r6, #0
 800a018:	4630      	mov	r0, r6
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	220c      	movs	r2, #12
 800a01e:	6002      	str	r2, [r0, #0]
 800a020:	e7f9      	b.n	800a016 <_calloc_r+0x12>
 800a022:	462a      	mov	r2, r5
 800a024:	4621      	mov	r1, r4
 800a026:	f7fd fa7a 	bl	800751e <memset>
 800a02a:	e7f5      	b.n	800a018 <_calloc_r+0x14>

0800a02c <rshift>:
 800a02c:	6903      	ldr	r3, [r0, #16]
 800a02e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a032:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a036:	f100 0414 	add.w	r4, r0, #20
 800a03a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a03e:	dd46      	ble.n	800a0ce <rshift+0xa2>
 800a040:	f011 011f 	ands.w	r1, r1, #31
 800a044:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a048:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a04c:	d10c      	bne.n	800a068 <rshift+0x3c>
 800a04e:	4629      	mov	r1, r5
 800a050:	f100 0710 	add.w	r7, r0, #16
 800a054:	42b1      	cmp	r1, r6
 800a056:	d335      	bcc.n	800a0c4 <rshift+0x98>
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	1eea      	subs	r2, r5, #3
 800a05e:	4296      	cmp	r6, r2
 800a060:	bf38      	it	cc
 800a062:	2300      	movcc	r3, #0
 800a064:	4423      	add	r3, r4
 800a066:	e015      	b.n	800a094 <rshift+0x68>
 800a068:	46a1      	mov	r9, r4
 800a06a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a06e:	f1c1 0820 	rsb	r8, r1, #32
 800a072:	40cf      	lsrs	r7, r1
 800a074:	f105 0e04 	add.w	lr, r5, #4
 800a078:	4576      	cmp	r6, lr
 800a07a:	46f4      	mov	ip, lr
 800a07c:	d816      	bhi.n	800a0ac <rshift+0x80>
 800a07e:	1a9a      	subs	r2, r3, r2
 800a080:	0092      	lsls	r2, r2, #2
 800a082:	3a04      	subs	r2, #4
 800a084:	3501      	adds	r5, #1
 800a086:	42ae      	cmp	r6, r5
 800a088:	bf38      	it	cc
 800a08a:	2200      	movcc	r2, #0
 800a08c:	18a3      	adds	r3, r4, r2
 800a08e:	50a7      	str	r7, [r4, r2]
 800a090:	b107      	cbz	r7, 800a094 <rshift+0x68>
 800a092:	3304      	adds	r3, #4
 800a094:	42a3      	cmp	r3, r4
 800a096:	eba3 0204 	sub.w	r2, r3, r4
 800a09a:	bf08      	it	eq
 800a09c:	2300      	moveq	r3, #0
 800a09e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0a2:	6102      	str	r2, [r0, #16]
 800a0a4:	bf08      	it	eq
 800a0a6:	6143      	streq	r3, [r0, #20]
 800a0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ac:	f8dc c000 	ldr.w	ip, [ip]
 800a0b0:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0b4:	ea4c 0707 	orr.w	r7, ip, r7
 800a0b8:	f849 7b04 	str.w	r7, [r9], #4
 800a0bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0c0:	40cf      	lsrs	r7, r1
 800a0c2:	e7d9      	b.n	800a078 <rshift+0x4c>
 800a0c4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0c8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0cc:	e7c2      	b.n	800a054 <rshift+0x28>
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	e7e0      	b.n	800a094 <rshift+0x68>

0800a0d2 <__hexdig_fun>:
 800a0d2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a0d6:	2b09      	cmp	r3, #9
 800a0d8:	d802      	bhi.n	800a0e0 <__hexdig_fun+0xe>
 800a0da:	3820      	subs	r0, #32
 800a0dc:	b2c0      	uxtb	r0, r0
 800a0de:	4770      	bx	lr
 800a0e0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a0e4:	2b05      	cmp	r3, #5
 800a0e6:	d801      	bhi.n	800a0ec <__hexdig_fun+0x1a>
 800a0e8:	3847      	subs	r0, #71	@ 0x47
 800a0ea:	e7f7      	b.n	800a0dc <__hexdig_fun+0xa>
 800a0ec:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a0f0:	2b05      	cmp	r3, #5
 800a0f2:	d801      	bhi.n	800a0f8 <__hexdig_fun+0x26>
 800a0f4:	3827      	subs	r0, #39	@ 0x27
 800a0f6:	e7f1      	b.n	800a0dc <__hexdig_fun+0xa>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4770      	bx	lr

0800a0fc <__gethex>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	468a      	mov	sl, r1
 800a102:	4690      	mov	r8, r2
 800a104:	b085      	sub	sp, #20
 800a106:	9302      	str	r3, [sp, #8]
 800a108:	680b      	ldr	r3, [r1, #0]
 800a10a:	9001      	str	r0, [sp, #4]
 800a10c:	1c9c      	adds	r4, r3, #2
 800a10e:	46a1      	mov	r9, r4
 800a110:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a114:	2830      	cmp	r0, #48	@ 0x30
 800a116:	d0fa      	beq.n	800a10e <__gethex+0x12>
 800a118:	eba9 0303 	sub.w	r3, r9, r3
 800a11c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a120:	f7ff ffd7 	bl	800a0d2 <__hexdig_fun>
 800a124:	4605      	mov	r5, r0
 800a126:	2800      	cmp	r0, #0
 800a128:	d168      	bne.n	800a1fc <__gethex+0x100>
 800a12a:	2201      	movs	r2, #1
 800a12c:	4648      	mov	r0, r9
 800a12e:	499f      	ldr	r1, [pc, #636]	@ (800a3ac <__gethex+0x2b0>)
 800a130:	f7ff ff22 	bl	8009f78 <strncmp>
 800a134:	4607      	mov	r7, r0
 800a136:	2800      	cmp	r0, #0
 800a138:	d167      	bne.n	800a20a <__gethex+0x10e>
 800a13a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a13e:	4626      	mov	r6, r4
 800a140:	f7ff ffc7 	bl	800a0d2 <__hexdig_fun>
 800a144:	2800      	cmp	r0, #0
 800a146:	d062      	beq.n	800a20e <__gethex+0x112>
 800a148:	4623      	mov	r3, r4
 800a14a:	7818      	ldrb	r0, [r3, #0]
 800a14c:	4699      	mov	r9, r3
 800a14e:	2830      	cmp	r0, #48	@ 0x30
 800a150:	f103 0301 	add.w	r3, r3, #1
 800a154:	d0f9      	beq.n	800a14a <__gethex+0x4e>
 800a156:	f7ff ffbc 	bl	800a0d2 <__hexdig_fun>
 800a15a:	fab0 f580 	clz	r5, r0
 800a15e:	f04f 0b01 	mov.w	fp, #1
 800a162:	096d      	lsrs	r5, r5, #5
 800a164:	464a      	mov	r2, r9
 800a166:	4616      	mov	r6, r2
 800a168:	7830      	ldrb	r0, [r6, #0]
 800a16a:	3201      	adds	r2, #1
 800a16c:	f7ff ffb1 	bl	800a0d2 <__hexdig_fun>
 800a170:	2800      	cmp	r0, #0
 800a172:	d1f8      	bne.n	800a166 <__gethex+0x6a>
 800a174:	2201      	movs	r2, #1
 800a176:	4630      	mov	r0, r6
 800a178:	498c      	ldr	r1, [pc, #560]	@ (800a3ac <__gethex+0x2b0>)
 800a17a:	f7ff fefd 	bl	8009f78 <strncmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d13f      	bne.n	800a202 <__gethex+0x106>
 800a182:	b944      	cbnz	r4, 800a196 <__gethex+0x9a>
 800a184:	1c74      	adds	r4, r6, #1
 800a186:	4622      	mov	r2, r4
 800a188:	4616      	mov	r6, r2
 800a18a:	7830      	ldrb	r0, [r6, #0]
 800a18c:	3201      	adds	r2, #1
 800a18e:	f7ff ffa0 	bl	800a0d2 <__hexdig_fun>
 800a192:	2800      	cmp	r0, #0
 800a194:	d1f8      	bne.n	800a188 <__gethex+0x8c>
 800a196:	1ba4      	subs	r4, r4, r6
 800a198:	00a7      	lsls	r7, r4, #2
 800a19a:	7833      	ldrb	r3, [r6, #0]
 800a19c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a1a0:	2b50      	cmp	r3, #80	@ 0x50
 800a1a2:	d13e      	bne.n	800a222 <__gethex+0x126>
 800a1a4:	7873      	ldrb	r3, [r6, #1]
 800a1a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1a8:	d033      	beq.n	800a212 <__gethex+0x116>
 800a1aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1ac:	d034      	beq.n	800a218 <__gethex+0x11c>
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	1c71      	adds	r1, r6, #1
 800a1b2:	7808      	ldrb	r0, [r1, #0]
 800a1b4:	f7ff ff8d 	bl	800a0d2 <__hexdig_fun>
 800a1b8:	1e43      	subs	r3, r0, #1
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b18      	cmp	r3, #24
 800a1be:	d830      	bhi.n	800a222 <__gethex+0x126>
 800a1c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a1c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1c8:	f7ff ff83 	bl	800a0d2 <__hexdig_fun>
 800a1cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a1d0:	fa5f fc8c 	uxtb.w	ip, ip
 800a1d4:	f1bc 0f18 	cmp.w	ip, #24
 800a1d8:	f04f 030a 	mov.w	r3, #10
 800a1dc:	d91e      	bls.n	800a21c <__gethex+0x120>
 800a1de:	b104      	cbz	r4, 800a1e2 <__gethex+0xe6>
 800a1e0:	4252      	negs	r2, r2
 800a1e2:	4417      	add	r7, r2
 800a1e4:	f8ca 1000 	str.w	r1, [sl]
 800a1e8:	b1ed      	cbz	r5, 800a226 <__gethex+0x12a>
 800a1ea:	f1bb 0f00 	cmp.w	fp, #0
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2506      	moveq	r5, #6
 800a1f2:	2500      	movne	r5, #0
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	b005      	add	sp, #20
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	2500      	movs	r5, #0
 800a1fe:	462c      	mov	r4, r5
 800a200:	e7b0      	b.n	800a164 <__gethex+0x68>
 800a202:	2c00      	cmp	r4, #0
 800a204:	d1c7      	bne.n	800a196 <__gethex+0x9a>
 800a206:	4627      	mov	r7, r4
 800a208:	e7c7      	b.n	800a19a <__gethex+0x9e>
 800a20a:	464e      	mov	r6, r9
 800a20c:	462f      	mov	r7, r5
 800a20e:	2501      	movs	r5, #1
 800a210:	e7c3      	b.n	800a19a <__gethex+0x9e>
 800a212:	2400      	movs	r4, #0
 800a214:	1cb1      	adds	r1, r6, #2
 800a216:	e7cc      	b.n	800a1b2 <__gethex+0xb6>
 800a218:	2401      	movs	r4, #1
 800a21a:	e7fb      	b.n	800a214 <__gethex+0x118>
 800a21c:	fb03 0002 	mla	r0, r3, r2, r0
 800a220:	e7ce      	b.n	800a1c0 <__gethex+0xc4>
 800a222:	4631      	mov	r1, r6
 800a224:	e7de      	b.n	800a1e4 <__gethex+0xe8>
 800a226:	4629      	mov	r1, r5
 800a228:	eba6 0309 	sub.w	r3, r6, r9
 800a22c:	3b01      	subs	r3, #1
 800a22e:	2b07      	cmp	r3, #7
 800a230:	dc0a      	bgt.n	800a248 <__gethex+0x14c>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	f7fe f962 	bl	80084fc <_Balloc>
 800a238:	4604      	mov	r4, r0
 800a23a:	b940      	cbnz	r0, 800a24e <__gethex+0x152>
 800a23c:	4602      	mov	r2, r0
 800a23e:	21e4      	movs	r1, #228	@ 0xe4
 800a240:	4b5b      	ldr	r3, [pc, #364]	@ (800a3b0 <__gethex+0x2b4>)
 800a242:	485c      	ldr	r0, [pc, #368]	@ (800a3b4 <__gethex+0x2b8>)
 800a244:	f7ff fec0 	bl	8009fc8 <__assert_func>
 800a248:	3101      	adds	r1, #1
 800a24a:	105b      	asrs	r3, r3, #1
 800a24c:	e7ef      	b.n	800a22e <__gethex+0x132>
 800a24e:	2300      	movs	r3, #0
 800a250:	f100 0a14 	add.w	sl, r0, #20
 800a254:	4655      	mov	r5, sl
 800a256:	469b      	mov	fp, r3
 800a258:	45b1      	cmp	r9, r6
 800a25a:	d337      	bcc.n	800a2cc <__gethex+0x1d0>
 800a25c:	f845 bb04 	str.w	fp, [r5], #4
 800a260:	eba5 050a 	sub.w	r5, r5, sl
 800a264:	10ad      	asrs	r5, r5, #2
 800a266:	6125      	str	r5, [r4, #16]
 800a268:	4658      	mov	r0, fp
 800a26a:	f7fe fa39 	bl	80086e0 <__hi0bits>
 800a26e:	016d      	lsls	r5, r5, #5
 800a270:	f8d8 6000 	ldr.w	r6, [r8]
 800a274:	1a2d      	subs	r5, r5, r0
 800a276:	42b5      	cmp	r5, r6
 800a278:	dd54      	ble.n	800a324 <__gethex+0x228>
 800a27a:	1bad      	subs	r5, r5, r6
 800a27c:	4629      	mov	r1, r5
 800a27e:	4620      	mov	r0, r4
 800a280:	f7fe fdc1 	bl	8008e06 <__any_on>
 800a284:	4681      	mov	r9, r0
 800a286:	b178      	cbz	r0, 800a2a8 <__gethex+0x1ac>
 800a288:	f04f 0901 	mov.w	r9, #1
 800a28c:	1e6b      	subs	r3, r5, #1
 800a28e:	1159      	asrs	r1, r3, #5
 800a290:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a294:	f003 021f 	and.w	r2, r3, #31
 800a298:	fa09 f202 	lsl.w	r2, r9, r2
 800a29c:	420a      	tst	r2, r1
 800a29e:	d003      	beq.n	800a2a8 <__gethex+0x1ac>
 800a2a0:	454b      	cmp	r3, r9
 800a2a2:	dc36      	bgt.n	800a312 <__gethex+0x216>
 800a2a4:	f04f 0902 	mov.w	r9, #2
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7ff febe 	bl	800a02c <rshift>
 800a2b0:	442f      	add	r7, r5
 800a2b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2b6:	42bb      	cmp	r3, r7
 800a2b8:	da42      	bge.n	800a340 <__gethex+0x244>
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	9801      	ldr	r0, [sp, #4]
 800a2be:	f7fe f95d 	bl	800857c <_Bfree>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c6:	25a3      	movs	r5, #163	@ 0xa3
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	e793      	b.n	800a1f4 <__gethex+0xf8>
 800a2cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a2d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a2d2:	d012      	beq.n	800a2fa <__gethex+0x1fe>
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d104      	bne.n	800a2e2 <__gethex+0x1e6>
 800a2d8:	f845 bb04 	str.w	fp, [r5], #4
 800a2dc:	f04f 0b00 	mov.w	fp, #0
 800a2e0:	465b      	mov	r3, fp
 800a2e2:	7830      	ldrb	r0, [r6, #0]
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	f7ff fef4 	bl	800a0d2 <__hexdig_fun>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	f000 000f 	and.w	r0, r0, #15
 800a2f0:	4098      	lsls	r0, r3
 800a2f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	e7ae      	b.n	800a258 <__gethex+0x15c>
 800a2fa:	45b1      	cmp	r9, r6
 800a2fc:	d8ea      	bhi.n	800a2d4 <__gethex+0x1d8>
 800a2fe:	2201      	movs	r2, #1
 800a300:	4630      	mov	r0, r6
 800a302:	492a      	ldr	r1, [pc, #168]	@ (800a3ac <__gethex+0x2b0>)
 800a304:	9303      	str	r3, [sp, #12]
 800a306:	f7ff fe37 	bl	8009f78 <strncmp>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1e1      	bne.n	800a2d4 <__gethex+0x1d8>
 800a310:	e7a2      	b.n	800a258 <__gethex+0x15c>
 800a312:	4620      	mov	r0, r4
 800a314:	1ea9      	subs	r1, r5, #2
 800a316:	f7fe fd76 	bl	8008e06 <__any_on>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d0c2      	beq.n	800a2a4 <__gethex+0x1a8>
 800a31e:	f04f 0903 	mov.w	r9, #3
 800a322:	e7c1      	b.n	800a2a8 <__gethex+0x1ac>
 800a324:	da09      	bge.n	800a33a <__gethex+0x23e>
 800a326:	1b75      	subs	r5, r6, r5
 800a328:	4621      	mov	r1, r4
 800a32a:	462a      	mov	r2, r5
 800a32c:	9801      	ldr	r0, [sp, #4]
 800a32e:	f7fe fb3b 	bl	80089a8 <__lshift>
 800a332:	4604      	mov	r4, r0
 800a334:	1b7f      	subs	r7, r7, r5
 800a336:	f100 0a14 	add.w	sl, r0, #20
 800a33a:	f04f 0900 	mov.w	r9, #0
 800a33e:	e7b8      	b.n	800a2b2 <__gethex+0x1b6>
 800a340:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a344:	42bd      	cmp	r5, r7
 800a346:	dd6f      	ble.n	800a428 <__gethex+0x32c>
 800a348:	1bed      	subs	r5, r5, r7
 800a34a:	42ae      	cmp	r6, r5
 800a34c:	dc34      	bgt.n	800a3b8 <__gethex+0x2bc>
 800a34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d022      	beq.n	800a39c <__gethex+0x2a0>
 800a356:	2b03      	cmp	r3, #3
 800a358:	d024      	beq.n	800a3a4 <__gethex+0x2a8>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d115      	bne.n	800a38a <__gethex+0x28e>
 800a35e:	42ae      	cmp	r6, r5
 800a360:	d113      	bne.n	800a38a <__gethex+0x28e>
 800a362:	2e01      	cmp	r6, #1
 800a364:	d10b      	bne.n	800a37e <__gethex+0x282>
 800a366:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a36a:	9a02      	ldr	r2, [sp, #8]
 800a36c:	2562      	movs	r5, #98	@ 0x62
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	2301      	movs	r3, #1
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	f8ca 3000 	str.w	r3, [sl]
 800a378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a37a:	601c      	str	r4, [r3, #0]
 800a37c:	e73a      	b.n	800a1f4 <__gethex+0xf8>
 800a37e:	4620      	mov	r0, r4
 800a380:	1e71      	subs	r1, r6, #1
 800a382:	f7fe fd40 	bl	8008e06 <__any_on>
 800a386:	2800      	cmp	r0, #0
 800a388:	d1ed      	bne.n	800a366 <__gethex+0x26a>
 800a38a:	4621      	mov	r1, r4
 800a38c:	9801      	ldr	r0, [sp, #4]
 800a38e:	f7fe f8f5 	bl	800857c <_Bfree>
 800a392:	2300      	movs	r3, #0
 800a394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a396:	2550      	movs	r5, #80	@ 0x50
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	e72b      	b.n	800a1f4 <__gethex+0xf8>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f3      	bne.n	800a38a <__gethex+0x28e>
 800a3a2:	e7e0      	b.n	800a366 <__gethex+0x26a>
 800a3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1dd      	bne.n	800a366 <__gethex+0x26a>
 800a3aa:	e7ee      	b.n	800a38a <__gethex+0x28e>
 800a3ac:	0800bd90 	.word	0x0800bd90
 800a3b0:	0800bc27 	.word	0x0800bc27
 800a3b4:	0800bf3e 	.word	0x0800bf3e
 800a3b8:	1e6f      	subs	r7, r5, #1
 800a3ba:	f1b9 0f00 	cmp.w	r9, #0
 800a3be:	d130      	bne.n	800a422 <__gethex+0x326>
 800a3c0:	b127      	cbz	r7, 800a3cc <__gethex+0x2d0>
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f7fe fd1e 	bl	8008e06 <__any_on>
 800a3ca:	4681      	mov	r9, r0
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4629      	mov	r1, r5
 800a3d0:	1b76      	subs	r6, r6, r5
 800a3d2:	2502      	movs	r5, #2
 800a3d4:	117a      	asrs	r2, r7, #5
 800a3d6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a3da:	f007 071f 	and.w	r7, r7, #31
 800a3de:	40bb      	lsls	r3, r7
 800a3e0:	4213      	tst	r3, r2
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	bf18      	it	ne
 800a3e6:	f049 0902 	orrne.w	r9, r9, #2
 800a3ea:	f7ff fe1f 	bl	800a02c <rshift>
 800a3ee:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	d047      	beq.n	800a488 <__gethex+0x38c>
 800a3f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d015      	beq.n	800a42c <__gethex+0x330>
 800a400:	2b03      	cmp	r3, #3
 800a402:	d017      	beq.n	800a434 <__gethex+0x338>
 800a404:	2b01      	cmp	r3, #1
 800a406:	d109      	bne.n	800a41c <__gethex+0x320>
 800a408:	f019 0f02 	tst.w	r9, #2
 800a40c:	d006      	beq.n	800a41c <__gethex+0x320>
 800a40e:	f8da 3000 	ldr.w	r3, [sl]
 800a412:	ea49 0903 	orr.w	r9, r9, r3
 800a416:	f019 0f01 	tst.w	r9, #1
 800a41a:	d10e      	bne.n	800a43a <__gethex+0x33e>
 800a41c:	f045 0510 	orr.w	r5, r5, #16
 800a420:	e032      	b.n	800a488 <__gethex+0x38c>
 800a422:	f04f 0901 	mov.w	r9, #1
 800a426:	e7d1      	b.n	800a3cc <__gethex+0x2d0>
 800a428:	2501      	movs	r5, #1
 800a42a:	e7e2      	b.n	800a3f2 <__gethex+0x2f6>
 800a42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42e:	f1c3 0301 	rsb	r3, r3, #1
 800a432:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0f0      	beq.n	800a41c <__gethex+0x320>
 800a43a:	f04f 0c00 	mov.w	ip, #0
 800a43e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a442:	f104 0314 	add.w	r3, r4, #20
 800a446:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a44a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a458:	d01b      	beq.n	800a492 <__gethex+0x396>
 800a45a:	3201      	adds	r2, #1
 800a45c:	6002      	str	r2, [r0, #0]
 800a45e:	2d02      	cmp	r5, #2
 800a460:	f104 0314 	add.w	r3, r4, #20
 800a464:	d13c      	bne.n	800a4e0 <__gethex+0x3e4>
 800a466:	f8d8 2000 	ldr.w	r2, [r8]
 800a46a:	3a01      	subs	r2, #1
 800a46c:	42b2      	cmp	r2, r6
 800a46e:	d109      	bne.n	800a484 <__gethex+0x388>
 800a470:	2201      	movs	r2, #1
 800a472:	1171      	asrs	r1, r6, #5
 800a474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a478:	f006 061f 	and.w	r6, r6, #31
 800a47c:	fa02 f606 	lsl.w	r6, r2, r6
 800a480:	421e      	tst	r6, r3
 800a482:	d13a      	bne.n	800a4fa <__gethex+0x3fe>
 800a484:	f045 0520 	orr.w	r5, r5, #32
 800a488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a48a:	601c      	str	r4, [r3, #0]
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	601f      	str	r7, [r3, #0]
 800a490:	e6b0      	b.n	800a1f4 <__gethex+0xf8>
 800a492:	4299      	cmp	r1, r3
 800a494:	f843 cc04 	str.w	ip, [r3, #-4]
 800a498:	d8d9      	bhi.n	800a44e <__gethex+0x352>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	459b      	cmp	fp, r3
 800a49e:	db17      	blt.n	800a4d0 <__gethex+0x3d4>
 800a4a0:	6861      	ldr	r1, [r4, #4]
 800a4a2:	9801      	ldr	r0, [sp, #4]
 800a4a4:	3101      	adds	r1, #1
 800a4a6:	f7fe f829 	bl	80084fc <_Balloc>
 800a4aa:	4681      	mov	r9, r0
 800a4ac:	b918      	cbnz	r0, 800a4b6 <__gethex+0x3ba>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	2184      	movs	r1, #132	@ 0x84
 800a4b2:	4b19      	ldr	r3, [pc, #100]	@ (800a518 <__gethex+0x41c>)
 800a4b4:	e6c5      	b.n	800a242 <__gethex+0x146>
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	f104 010c 	add.w	r1, r4, #12
 800a4bc:	3202      	adds	r2, #2
 800a4be:	0092      	lsls	r2, r2, #2
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f7fd f8ba 	bl	800763a <memcpy>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	9801      	ldr	r0, [sp, #4]
 800a4ca:	f7fe f857 	bl	800857c <_Bfree>
 800a4ce:	464c      	mov	r4, r9
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	6122      	str	r2, [r4, #16]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4dc:	615a      	str	r2, [r3, #20]
 800a4de:	e7be      	b.n	800a45e <__gethex+0x362>
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	455a      	cmp	r2, fp
 800a4e4:	dd0b      	ble.n	800a4fe <__gethex+0x402>
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff fd9f 	bl	800a02c <rshift>
 800a4ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4f2:	3701      	adds	r7, #1
 800a4f4:	42bb      	cmp	r3, r7
 800a4f6:	f6ff aee0 	blt.w	800a2ba <__gethex+0x1be>
 800a4fa:	2501      	movs	r5, #1
 800a4fc:	e7c2      	b.n	800a484 <__gethex+0x388>
 800a4fe:	f016 061f 	ands.w	r6, r6, #31
 800a502:	d0fa      	beq.n	800a4fa <__gethex+0x3fe>
 800a504:	4453      	add	r3, sl
 800a506:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a50a:	f7fe f8e9 	bl	80086e0 <__hi0bits>
 800a50e:	f1c6 0620 	rsb	r6, r6, #32
 800a512:	42b0      	cmp	r0, r6
 800a514:	dbe7      	blt.n	800a4e6 <__gethex+0x3ea>
 800a516:	e7f0      	b.n	800a4fa <__gethex+0x3fe>
 800a518:	0800bc27 	.word	0x0800bc27

0800a51c <L_shift>:
 800a51c:	f1c2 0208 	rsb	r2, r2, #8
 800a520:	0092      	lsls	r2, r2, #2
 800a522:	b570      	push	{r4, r5, r6, lr}
 800a524:	f1c2 0620 	rsb	r6, r2, #32
 800a528:	6843      	ldr	r3, [r0, #4]
 800a52a:	6804      	ldr	r4, [r0, #0]
 800a52c:	fa03 f506 	lsl.w	r5, r3, r6
 800a530:	432c      	orrs	r4, r5
 800a532:	40d3      	lsrs	r3, r2
 800a534:	6004      	str	r4, [r0, #0]
 800a536:	f840 3f04 	str.w	r3, [r0, #4]!
 800a53a:	4288      	cmp	r0, r1
 800a53c:	d3f4      	bcc.n	800a528 <L_shift+0xc>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}

0800a540 <__match>:
 800a540:	b530      	push	{r4, r5, lr}
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a54a:	b914      	cbnz	r4, 800a552 <__match+0x12>
 800a54c:	6003      	str	r3, [r0, #0]
 800a54e:	2001      	movs	r0, #1
 800a550:	bd30      	pop	{r4, r5, pc}
 800a552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a556:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a55a:	2d19      	cmp	r5, #25
 800a55c:	bf98      	it	ls
 800a55e:	3220      	addls	r2, #32
 800a560:	42a2      	cmp	r2, r4
 800a562:	d0f0      	beq.n	800a546 <__match+0x6>
 800a564:	2000      	movs	r0, #0
 800a566:	e7f3      	b.n	800a550 <__match+0x10>

0800a568 <__hexnan>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	2500      	movs	r5, #0
 800a56e:	680b      	ldr	r3, [r1, #0]
 800a570:	4682      	mov	sl, r0
 800a572:	115e      	asrs	r6, r3, #5
 800a574:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a578:	f013 031f 	ands.w	r3, r3, #31
 800a57c:	bf18      	it	ne
 800a57e:	3604      	addne	r6, #4
 800a580:	1f37      	subs	r7, r6, #4
 800a582:	4690      	mov	r8, r2
 800a584:	46b9      	mov	r9, r7
 800a586:	463c      	mov	r4, r7
 800a588:	46ab      	mov	fp, r5
 800a58a:	b087      	sub	sp, #28
 800a58c:	6801      	ldr	r1, [r0, #0]
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	f846 5c04 	str.w	r5, [r6, #-4]
 800a594:	9502      	str	r5, [sp, #8]
 800a596:	784a      	ldrb	r2, [r1, #1]
 800a598:	1c4b      	adds	r3, r1, #1
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	b342      	cbz	r2, 800a5f0 <__hexnan+0x88>
 800a59e:	4610      	mov	r0, r2
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	9204      	str	r2, [sp, #16]
 800a5a4:	f7ff fd95 	bl	800a0d2 <__hexdig_fun>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d151      	bne.n	800a650 <__hexnan+0xe8>
 800a5ac:	9a04      	ldr	r2, [sp, #16]
 800a5ae:	9905      	ldr	r1, [sp, #20]
 800a5b0:	2a20      	cmp	r2, #32
 800a5b2:	d818      	bhi.n	800a5e6 <__hexnan+0x7e>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	459b      	cmp	fp, r3
 800a5b8:	dd13      	ble.n	800a5e2 <__hexnan+0x7a>
 800a5ba:	454c      	cmp	r4, r9
 800a5bc:	d206      	bcs.n	800a5cc <__hexnan+0x64>
 800a5be:	2d07      	cmp	r5, #7
 800a5c0:	dc04      	bgt.n	800a5cc <__hexnan+0x64>
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f7ff ffa8 	bl	800a51c <L_shift>
 800a5cc:	4544      	cmp	r4, r8
 800a5ce:	d952      	bls.n	800a676 <__hexnan+0x10e>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5da:	461d      	mov	r5, r3
 800a5dc:	464c      	mov	r4, r9
 800a5de:	f8cd b008 	str.w	fp, [sp, #8]
 800a5e2:	9903      	ldr	r1, [sp, #12]
 800a5e4:	e7d7      	b.n	800a596 <__hexnan+0x2e>
 800a5e6:	2a29      	cmp	r2, #41	@ 0x29
 800a5e8:	d157      	bne.n	800a69a <__hexnan+0x132>
 800a5ea:	3102      	adds	r1, #2
 800a5ec:	f8ca 1000 	str.w	r1, [sl]
 800a5f0:	f1bb 0f00 	cmp.w	fp, #0
 800a5f4:	d051      	beq.n	800a69a <__hexnan+0x132>
 800a5f6:	454c      	cmp	r4, r9
 800a5f8:	d206      	bcs.n	800a608 <__hexnan+0xa0>
 800a5fa:	2d07      	cmp	r5, #7
 800a5fc:	dc04      	bgt.n	800a608 <__hexnan+0xa0>
 800a5fe:	462a      	mov	r2, r5
 800a600:	4649      	mov	r1, r9
 800a602:	4620      	mov	r0, r4
 800a604:	f7ff ff8a 	bl	800a51c <L_shift>
 800a608:	4544      	cmp	r4, r8
 800a60a:	d936      	bls.n	800a67a <__hexnan+0x112>
 800a60c:	4623      	mov	r3, r4
 800a60e:	f1a8 0204 	sub.w	r2, r8, #4
 800a612:	f853 1b04 	ldr.w	r1, [r3], #4
 800a616:	429f      	cmp	r7, r3
 800a618:	f842 1f04 	str.w	r1, [r2, #4]!
 800a61c:	d2f9      	bcs.n	800a612 <__hexnan+0xaa>
 800a61e:	1b3b      	subs	r3, r7, r4
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	3401      	adds	r4, #1
 800a628:	3e03      	subs	r6, #3
 800a62a:	42b4      	cmp	r4, r6
 800a62c:	bf88      	it	hi
 800a62e:	2304      	movhi	r3, #4
 800a630:	2200      	movs	r2, #0
 800a632:	4443      	add	r3, r8
 800a634:	f843 2b04 	str.w	r2, [r3], #4
 800a638:	429f      	cmp	r7, r3
 800a63a:	d2fb      	bcs.n	800a634 <__hexnan+0xcc>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	b91b      	cbnz	r3, 800a648 <__hexnan+0xe0>
 800a640:	4547      	cmp	r7, r8
 800a642:	d128      	bne.n	800a696 <__hexnan+0x12e>
 800a644:	2301      	movs	r3, #1
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	2005      	movs	r0, #5
 800a64a:	b007      	add	sp, #28
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	3501      	adds	r5, #1
 800a652:	2d08      	cmp	r5, #8
 800a654:	f10b 0b01 	add.w	fp, fp, #1
 800a658:	dd06      	ble.n	800a668 <__hexnan+0x100>
 800a65a:	4544      	cmp	r4, r8
 800a65c:	d9c1      	bls.n	800a5e2 <__hexnan+0x7a>
 800a65e:	2300      	movs	r3, #0
 800a660:	2501      	movs	r5, #1
 800a662:	f844 3c04 	str.w	r3, [r4, #-4]
 800a666:	3c04      	subs	r4, #4
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	f000 000f 	and.w	r0, r0, #15
 800a66e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a672:	6020      	str	r0, [r4, #0]
 800a674:	e7b5      	b.n	800a5e2 <__hexnan+0x7a>
 800a676:	2508      	movs	r5, #8
 800a678:	e7b3      	b.n	800a5e2 <__hexnan+0x7a>
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0dd      	beq.n	800a63c <__hexnan+0xd4>
 800a680:	f04f 32ff 	mov.w	r2, #4294967295
 800a684:	f1c3 0320 	rsb	r3, r3, #32
 800a688:	40da      	lsrs	r2, r3
 800a68a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a68e:	4013      	ands	r3, r2
 800a690:	f846 3c04 	str.w	r3, [r6, #-4]
 800a694:	e7d2      	b.n	800a63c <__hexnan+0xd4>
 800a696:	3f04      	subs	r7, #4
 800a698:	e7d0      	b.n	800a63c <__hexnan+0xd4>
 800a69a:	2004      	movs	r0, #4
 800a69c:	e7d5      	b.n	800a64a <__hexnan+0xe2>

0800a69e <__ascii_mbtowc>:
 800a69e:	b082      	sub	sp, #8
 800a6a0:	b901      	cbnz	r1, 800a6a4 <__ascii_mbtowc+0x6>
 800a6a2:	a901      	add	r1, sp, #4
 800a6a4:	b142      	cbz	r2, 800a6b8 <__ascii_mbtowc+0x1a>
 800a6a6:	b14b      	cbz	r3, 800a6bc <__ascii_mbtowc+0x1e>
 800a6a8:	7813      	ldrb	r3, [r2, #0]
 800a6aa:	600b      	str	r3, [r1, #0]
 800a6ac:	7812      	ldrb	r2, [r2, #0]
 800a6ae:	1e10      	subs	r0, r2, #0
 800a6b0:	bf18      	it	ne
 800a6b2:	2001      	movne	r0, #1
 800a6b4:	b002      	add	sp, #8
 800a6b6:	4770      	bx	lr
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	e7fb      	b.n	800a6b4 <__ascii_mbtowc+0x16>
 800a6bc:	f06f 0001 	mvn.w	r0, #1
 800a6c0:	e7f8      	b.n	800a6b4 <__ascii_mbtowc+0x16>

0800a6c2 <_realloc_r>:
 800a6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	4615      	mov	r5, r2
 800a6ca:	460c      	mov	r4, r1
 800a6cc:	b921      	cbnz	r1, 800a6d8 <_realloc_r+0x16>
 800a6ce:	4611      	mov	r1, r2
 800a6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6d4:	f7fd be86 	b.w	80083e4 <_malloc_r>
 800a6d8:	b92a      	cbnz	r2, 800a6e6 <_realloc_r+0x24>
 800a6da:	f7fd fe11 	bl	8008300 <_free_r>
 800a6de:	2400      	movs	r4, #0
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6e6:	f000 f840 	bl	800a76a <_malloc_usable_size_r>
 800a6ea:	4285      	cmp	r5, r0
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	d802      	bhi.n	800a6f6 <_realloc_r+0x34>
 800a6f0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a6f4:	d8f4      	bhi.n	800a6e0 <_realloc_r+0x1e>
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	4640      	mov	r0, r8
 800a6fa:	f7fd fe73 	bl	80083e4 <_malloc_r>
 800a6fe:	4607      	mov	r7, r0
 800a700:	2800      	cmp	r0, #0
 800a702:	d0ec      	beq.n	800a6de <_realloc_r+0x1c>
 800a704:	42b5      	cmp	r5, r6
 800a706:	462a      	mov	r2, r5
 800a708:	4621      	mov	r1, r4
 800a70a:	bf28      	it	cs
 800a70c:	4632      	movcs	r2, r6
 800a70e:	f7fc ff94 	bl	800763a <memcpy>
 800a712:	4621      	mov	r1, r4
 800a714:	4640      	mov	r0, r8
 800a716:	f7fd fdf3 	bl	8008300 <_free_r>
 800a71a:	463c      	mov	r4, r7
 800a71c:	e7e0      	b.n	800a6e0 <_realloc_r+0x1e>

0800a71e <__ascii_wctomb>:
 800a71e:	4603      	mov	r3, r0
 800a720:	4608      	mov	r0, r1
 800a722:	b141      	cbz	r1, 800a736 <__ascii_wctomb+0x18>
 800a724:	2aff      	cmp	r2, #255	@ 0xff
 800a726:	d904      	bls.n	800a732 <__ascii_wctomb+0x14>
 800a728:	228a      	movs	r2, #138	@ 0x8a
 800a72a:	f04f 30ff 	mov.w	r0, #4294967295
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	4770      	bx	lr
 800a732:	2001      	movs	r0, #1
 800a734:	700a      	strb	r2, [r1, #0]
 800a736:	4770      	bx	lr

0800a738 <fiprintf>:
 800a738:	b40e      	push	{r1, r2, r3}
 800a73a:	b503      	push	{r0, r1, lr}
 800a73c:	4601      	mov	r1, r0
 800a73e:	ab03      	add	r3, sp, #12
 800a740:	4805      	ldr	r0, [pc, #20]	@ (800a758 <fiprintf+0x20>)
 800a742:	f853 2b04 	ldr.w	r2, [r3], #4
 800a746:	6800      	ldr	r0, [r0, #0]
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	f000 f83d 	bl	800a7c8 <_vfiprintf_r>
 800a74e:	b002      	add	sp, #8
 800a750:	f85d eb04 	ldr.w	lr, [sp], #4
 800a754:	b003      	add	sp, #12
 800a756:	4770      	bx	lr
 800a758:	200003bc 	.word	0x200003bc

0800a75c <abort>:
 800a75c:	2006      	movs	r0, #6
 800a75e:	b508      	push	{r3, lr}
 800a760:	f000 fa06 	bl	800ab70 <raise>
 800a764:	2001      	movs	r0, #1
 800a766:	f7f8 fc84 	bl	8003072 <_exit>

0800a76a <_malloc_usable_size_r>:
 800a76a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a76e:	1f18      	subs	r0, r3, #4
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfbc      	itt	lt
 800a774:	580b      	ldrlt	r3, [r1, r0]
 800a776:	18c0      	addlt	r0, r0, r3
 800a778:	4770      	bx	lr

0800a77a <__sfputc_r>:
 800a77a:	6893      	ldr	r3, [r2, #8]
 800a77c:	b410      	push	{r4}
 800a77e:	3b01      	subs	r3, #1
 800a780:	2b00      	cmp	r3, #0
 800a782:	6093      	str	r3, [r2, #8]
 800a784:	da07      	bge.n	800a796 <__sfputc_r+0x1c>
 800a786:	6994      	ldr	r4, [r2, #24]
 800a788:	42a3      	cmp	r3, r4
 800a78a:	db01      	blt.n	800a790 <__sfputc_r+0x16>
 800a78c:	290a      	cmp	r1, #10
 800a78e:	d102      	bne.n	800a796 <__sfputc_r+0x1c>
 800a790:	bc10      	pop	{r4}
 800a792:	f000 b931 	b.w	800a9f8 <__swbuf_r>
 800a796:	6813      	ldr	r3, [r2, #0]
 800a798:	1c58      	adds	r0, r3, #1
 800a79a:	6010      	str	r0, [r2, #0]
 800a79c:	7019      	strb	r1, [r3, #0]
 800a79e:	4608      	mov	r0, r1
 800a7a0:	bc10      	pop	{r4}
 800a7a2:	4770      	bx	lr

0800a7a4 <__sfputs_r>:
 800a7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a6:	4606      	mov	r6, r0
 800a7a8:	460f      	mov	r7, r1
 800a7aa:	4614      	mov	r4, r2
 800a7ac:	18d5      	adds	r5, r2, r3
 800a7ae:	42ac      	cmp	r4, r5
 800a7b0:	d101      	bne.n	800a7b6 <__sfputs_r+0x12>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e007      	b.n	800a7c6 <__sfputs_r+0x22>
 800a7b6:	463a      	mov	r2, r7
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7be:	f7ff ffdc 	bl	800a77a <__sfputc_r>
 800a7c2:	1c43      	adds	r3, r0, #1
 800a7c4:	d1f3      	bne.n	800a7ae <__sfputs_r+0xa>
 800a7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7c8 <_vfiprintf_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	4698      	mov	r8, r3
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	b09d      	sub	sp, #116	@ 0x74
 800a7d6:	b118      	cbz	r0, 800a7e0 <_vfiprintf_r+0x18>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x18>
 800a7dc:	f7fc fe06 	bl	80073ec <__sinit>
 800a7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d405      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ee:	f7fc ff14 	bl	800761a <__retarget_lock_acquire_recursive>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <_vfiprintf_r+0x34>
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	b99b      	cbnz	r3, 800a824 <_vfiprintf_r+0x5c>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 f938 	bl	800aa74 <__swsetup_r>
 800a804:	b170      	cbz	r0, 800a824 <_vfiprintf_r+0x5c>
 800a806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a808:	07dc      	lsls	r4, r3, #31
 800a80a:	d504      	bpl.n	800a816 <_vfiprintf_r+0x4e>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295
 800a810:	b01d      	add	sp, #116	@ 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4f7      	bmi.n	800a80c <_vfiprintf_r+0x44>
 800a81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a81e:	f7fc fefd 	bl	800761c <__retarget_lock_release_recursive>
 800a822:	e7f3      	b.n	800a80c <_vfiprintf_r+0x44>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	@ 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a82e:	2330      	movs	r3, #48	@ 0x30
 800a830:	f04f 0901 	mov.w	r9, #1
 800a834:	f8cd 800c 	str.w	r8, [sp, #12]
 800a838:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a9e4 <_vfiprintf_r+0x21c>
 800a83c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0x86>
 800a84a:	2a25      	cmp	r2, #37	@ 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x7a>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xa4>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ffa2 	bl	800a7a4 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80a7 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 809f 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a88c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4853      	ldr	r0, [pc, #332]	@ (800a9e4 <_vfiprintf_r+0x21c>)
 800a898:	f7fc fec1 	bl	800761e <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x110>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	@ 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x120>
 800a8bc:	4654      	mov	r4, sl
 800a8be:	2000      	movs	r0, #0
 800a8c0:	f04f 0c0a 	mov.w	ip, #10
 800a8c4:	9a07      	ldr	r2, [sp, #28]
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	@ 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94b      	bls.n	800a96a <_vfiprintf_r+0x1a2>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x13a>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x13a>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	46a2      	mov	sl, r4
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xc6>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	@ 0x2e
 800a906:	d10a      	bne.n	800a91e <_vfiprintf_r+0x156>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90c:	d132      	bne.n	800a974 <_vfiprintf_r+0x1ac>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	3402      	adds	r4, #2
 800a912:	1d1a      	adds	r2, r3, #4
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	9203      	str	r2, [sp, #12]
 800a918:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a9e8 <_vfiprintf_r+0x220>
 800a922:	2203      	movs	r2, #3
 800a924:	4650      	mov	r0, sl
 800a926:	7821      	ldrb	r1, [r4, #0]
 800a928:	f7fc fe79 	bl	800761e <memchr>
 800a92c:	b138      	cbz	r0, 800a93e <_vfiprintf_r+0x176>
 800a92e:	2240      	movs	r2, #64	@ 0x40
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	eba0 000a 	sub.w	r0, r0, sl
 800a936:	4082      	lsls	r2, r0
 800a938:	4313      	orrs	r3, r2
 800a93a:	3401      	adds	r4, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	2206      	movs	r2, #6
 800a944:	4829      	ldr	r0, [pc, #164]	@ (800a9ec <_vfiprintf_r+0x224>)
 800a946:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a94a:	f7fc fe68 	bl	800761e <memchr>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d03f      	beq.n	800a9d2 <_vfiprintf_r+0x20a>
 800a952:	4b27      	ldr	r3, [pc, #156]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a954:	bb1b      	cbnz	r3, 800a99e <_vfiprintf_r+0x1d6>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	3308      	adds	r3, #8
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a964:	443b      	add	r3, r7
 800a966:	9309      	str	r3, [sp, #36]	@ 0x24
 800a968:	e76a      	b.n	800a840 <_vfiprintf_r+0x78>
 800a96a:	460c      	mov	r4, r1
 800a96c:	2001      	movs	r0, #1
 800a96e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a972:	e7a8      	b.n	800a8c6 <_vfiprintf_r+0xfe>
 800a974:	2300      	movs	r3, #0
 800a976:	f04f 0c0a 	mov.w	ip, #10
 800a97a:	4619      	mov	r1, r3
 800a97c:	3401      	adds	r4, #1
 800a97e:	9305      	str	r3, [sp, #20]
 800a980:	4620      	mov	r0, r4
 800a982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a986:	3a30      	subs	r2, #48	@ 0x30
 800a988:	2a09      	cmp	r2, #9
 800a98a:	d903      	bls.n	800a994 <_vfiprintf_r+0x1cc>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0c6      	beq.n	800a91e <_vfiprintf_r+0x156>
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	e7c4      	b.n	800a91e <_vfiprintf_r+0x156>
 800a994:	4604      	mov	r4, r0
 800a996:	2301      	movs	r3, #1
 800a998:	fb0c 2101 	mla	r1, ip, r1, r2
 800a99c:	e7f0      	b.n	800a980 <_vfiprintf_r+0x1b8>
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4b13      	ldr	r3, [pc, #76]	@ (800a9f4 <_vfiprintf_r+0x22c>)
 800a9a8:	a904      	add	r1, sp, #16
 800a9aa:	f7fb fec5 	bl	8006738 <_printf_float>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	1c78      	adds	r0, r7, #1
 800a9b2:	d1d6      	bne.n	800a962 <_vfiprintf_r+0x19a>
 800a9b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9b6:	07d9      	lsls	r1, r3, #31
 800a9b8:	d405      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9ba:	89ab      	ldrh	r3, [r5, #12]
 800a9bc:	059a      	lsls	r2, r3, #22
 800a9be:	d402      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9c2:	f7fc fe2b 	bl	800761c <__retarget_lock_release_recursive>
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	065b      	lsls	r3, r3, #25
 800a9ca:	f53f af1f 	bmi.w	800a80c <_vfiprintf_r+0x44>
 800a9ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9d0:	e71e      	b.n	800a810 <_vfiprintf_r+0x48>
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4b06      	ldr	r3, [pc, #24]	@ (800a9f4 <_vfiprintf_r+0x22c>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	f7fc f949 	bl	8006c74 <_printf_i>
 800a9e2:	e7e4      	b.n	800a9ae <_vfiprintf_r+0x1e6>
 800a9e4:	0800bee9 	.word	0x0800bee9
 800a9e8:	0800beef 	.word	0x0800beef
 800a9ec:	0800bef3 	.word	0x0800bef3
 800a9f0:	08006739 	.word	0x08006739
 800a9f4:	0800a7a5 	.word	0x0800a7a5

0800a9f8 <__swbuf_r>:
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fa:	460e      	mov	r6, r1
 800a9fc:	4614      	mov	r4, r2
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b118      	cbz	r0, 800aa0a <__swbuf_r+0x12>
 800aa02:	6a03      	ldr	r3, [r0, #32]
 800aa04:	b90b      	cbnz	r3, 800aa0a <__swbuf_r+0x12>
 800aa06:	f7fc fcf1 	bl	80073ec <__sinit>
 800aa0a:	69a3      	ldr	r3, [r4, #24]
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	071a      	lsls	r2, r3, #28
 800aa12:	d501      	bpl.n	800aa18 <__swbuf_r+0x20>
 800aa14:	6923      	ldr	r3, [r4, #16]
 800aa16:	b943      	cbnz	r3, 800aa2a <__swbuf_r+0x32>
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	f000 f82a 	bl	800aa74 <__swsetup_r>
 800aa20:	b118      	cbz	r0, 800aa2a <__swbuf_r+0x32>
 800aa22:	f04f 37ff 	mov.w	r7, #4294967295
 800aa26:	4638      	mov	r0, r7
 800aa28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa2a:	6823      	ldr	r3, [r4, #0]
 800aa2c:	6922      	ldr	r2, [r4, #16]
 800aa2e:	b2f6      	uxtb	r6, r6
 800aa30:	1a98      	subs	r0, r3, r2
 800aa32:	6963      	ldr	r3, [r4, #20]
 800aa34:	4637      	mov	r7, r6
 800aa36:	4283      	cmp	r3, r0
 800aa38:	dc05      	bgt.n	800aa46 <__swbuf_r+0x4e>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f7ff fa59 	bl	8009ef4 <_fflush_r>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d1ed      	bne.n	800aa22 <__swbuf_r+0x2a>
 800aa46:	68a3      	ldr	r3, [r4, #8]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	60a3      	str	r3, [r4, #8]
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	1c5a      	adds	r2, r3, #1
 800aa50:	6022      	str	r2, [r4, #0]
 800aa52:	701e      	strb	r6, [r3, #0]
 800aa54:	6962      	ldr	r2, [r4, #20]
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d004      	beq.n	800aa66 <__swbuf_r+0x6e>
 800aa5c:	89a3      	ldrh	r3, [r4, #12]
 800aa5e:	07db      	lsls	r3, r3, #31
 800aa60:	d5e1      	bpl.n	800aa26 <__swbuf_r+0x2e>
 800aa62:	2e0a      	cmp	r6, #10
 800aa64:	d1df      	bne.n	800aa26 <__swbuf_r+0x2e>
 800aa66:	4621      	mov	r1, r4
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f7ff fa43 	bl	8009ef4 <_fflush_r>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d0d9      	beq.n	800aa26 <__swbuf_r+0x2e>
 800aa72:	e7d6      	b.n	800aa22 <__swbuf_r+0x2a>

0800aa74 <__swsetup_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4b29      	ldr	r3, [pc, #164]	@ (800ab1c <__swsetup_r+0xa8>)
 800aa78:	4605      	mov	r5, r0
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	b118      	cbz	r0, 800aa88 <__swsetup_r+0x14>
 800aa80:	6a03      	ldr	r3, [r0, #32]
 800aa82:	b90b      	cbnz	r3, 800aa88 <__swsetup_r+0x14>
 800aa84:	f7fc fcb2 	bl	80073ec <__sinit>
 800aa88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8c:	0719      	lsls	r1, r3, #28
 800aa8e:	d422      	bmi.n	800aad6 <__swsetup_r+0x62>
 800aa90:	06da      	lsls	r2, r3, #27
 800aa92:	d407      	bmi.n	800aaa4 <__swsetup_r+0x30>
 800aa94:	2209      	movs	r2, #9
 800aa96:	602a      	str	r2, [r5, #0]
 800aa98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	81a3      	strh	r3, [r4, #12]
 800aaa2:	e033      	b.n	800ab0c <__swsetup_r+0x98>
 800aaa4:	0758      	lsls	r0, r3, #29
 800aaa6:	d512      	bpl.n	800aace <__swsetup_r+0x5a>
 800aaa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aaaa:	b141      	cbz	r1, 800aabe <__swsetup_r+0x4a>
 800aaac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aab0:	4299      	cmp	r1, r3
 800aab2:	d002      	beq.n	800aaba <__swsetup_r+0x46>
 800aab4:	4628      	mov	r0, r5
 800aab6:	f7fd fc23 	bl	8008300 <_free_r>
 800aaba:	2300      	movs	r3, #0
 800aabc:	6363      	str	r3, [r4, #52]	@ 0x34
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	2300      	movs	r3, #0
 800aac8:	6063      	str	r3, [r4, #4]
 800aaca:	6923      	ldr	r3, [r4, #16]
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f043 0308 	orr.w	r3, r3, #8
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	6923      	ldr	r3, [r4, #16]
 800aad8:	b94b      	cbnz	r3, 800aaee <__swsetup_r+0x7a>
 800aada:	89a3      	ldrh	r3, [r4, #12]
 800aadc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aae4:	d003      	beq.n	800aaee <__swsetup_r+0x7a>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f000 f882 	bl	800abf2 <__smakebuf_r>
 800aaee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf2:	f013 0201 	ands.w	r2, r3, #1
 800aaf6:	d00a      	beq.n	800ab0e <__swsetup_r+0x9a>
 800aaf8:	2200      	movs	r2, #0
 800aafa:	60a2      	str	r2, [r4, #8]
 800aafc:	6962      	ldr	r2, [r4, #20]
 800aafe:	4252      	negs	r2, r2
 800ab00:	61a2      	str	r2, [r4, #24]
 800ab02:	6922      	ldr	r2, [r4, #16]
 800ab04:	b942      	cbnz	r2, 800ab18 <__swsetup_r+0xa4>
 800ab06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab0a:	d1c5      	bne.n	800aa98 <__swsetup_r+0x24>
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	0799      	lsls	r1, r3, #30
 800ab10:	bf58      	it	pl
 800ab12:	6962      	ldrpl	r2, [r4, #20]
 800ab14:	60a2      	str	r2, [r4, #8]
 800ab16:	e7f4      	b.n	800ab02 <__swsetup_r+0x8e>
 800ab18:	2000      	movs	r0, #0
 800ab1a:	e7f7      	b.n	800ab0c <__swsetup_r+0x98>
 800ab1c:	200003bc 	.word	0x200003bc

0800ab20 <_raise_r>:
 800ab20:	291f      	cmp	r1, #31
 800ab22:	b538      	push	{r3, r4, r5, lr}
 800ab24:	4605      	mov	r5, r0
 800ab26:	460c      	mov	r4, r1
 800ab28:	d904      	bls.n	800ab34 <_raise_r+0x14>
 800ab2a:	2316      	movs	r3, #22
 800ab2c:	6003      	str	r3, [r0, #0]
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab36:	b112      	cbz	r2, 800ab3e <_raise_r+0x1e>
 800ab38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab3c:	b94b      	cbnz	r3, 800ab52 <_raise_r+0x32>
 800ab3e:	4628      	mov	r0, r5
 800ab40:	f000 f830 	bl	800aba4 <_getpid_r>
 800ab44:	4622      	mov	r2, r4
 800ab46:	4601      	mov	r1, r0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab4e:	f000 b817 	b.w	800ab80 <_kill_r>
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d00a      	beq.n	800ab6c <_raise_r+0x4c>
 800ab56:	1c59      	adds	r1, r3, #1
 800ab58:	d103      	bne.n	800ab62 <_raise_r+0x42>
 800ab5a:	2316      	movs	r3, #22
 800ab5c:	6003      	str	r3, [r0, #0]
 800ab5e:	2001      	movs	r0, #1
 800ab60:	e7e7      	b.n	800ab32 <_raise_r+0x12>
 800ab62:	2100      	movs	r1, #0
 800ab64:	4620      	mov	r0, r4
 800ab66:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab6a:	4798      	blx	r3
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	e7e0      	b.n	800ab32 <_raise_r+0x12>

0800ab70 <raise>:
 800ab70:	4b02      	ldr	r3, [pc, #8]	@ (800ab7c <raise+0xc>)
 800ab72:	4601      	mov	r1, r0
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	f7ff bfd3 	b.w	800ab20 <_raise_r>
 800ab7a:	bf00      	nop
 800ab7c:	200003bc 	.word	0x200003bc

0800ab80 <_kill_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	2300      	movs	r3, #0
 800ab84:	4d06      	ldr	r5, [pc, #24]	@ (800aba0 <_kill_r+0x20>)
 800ab86:	4604      	mov	r4, r0
 800ab88:	4608      	mov	r0, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	f7f8 fa60 	bl	8003052 <_kill>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d102      	bne.n	800ab9c <_kill_r+0x1c>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	b103      	cbz	r3, 800ab9c <_kill_r+0x1c>
 800ab9a:	6023      	str	r3, [r4, #0]
 800ab9c:	bd38      	pop	{r3, r4, r5, pc}
 800ab9e:	bf00      	nop
 800aba0:	200008d4 	.word	0x200008d4

0800aba4 <_getpid_r>:
 800aba4:	f7f8 ba4e 	b.w	8003044 <_getpid>

0800aba8 <__swhatbuf_r>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	460c      	mov	r4, r1
 800abac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abb0:	4615      	mov	r5, r2
 800abb2:	2900      	cmp	r1, #0
 800abb4:	461e      	mov	r6, r3
 800abb6:	b096      	sub	sp, #88	@ 0x58
 800abb8:	da0c      	bge.n	800abd4 <__swhatbuf_r+0x2c>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	2100      	movs	r1, #0
 800abbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abc2:	bf14      	ite	ne
 800abc4:	2340      	movne	r3, #64	@ 0x40
 800abc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abca:	2000      	movs	r0, #0
 800abcc:	6031      	str	r1, [r6, #0]
 800abce:	602b      	str	r3, [r5, #0]
 800abd0:	b016      	add	sp, #88	@ 0x58
 800abd2:	bd70      	pop	{r4, r5, r6, pc}
 800abd4:	466a      	mov	r2, sp
 800abd6:	f000 f849 	bl	800ac6c <_fstat_r>
 800abda:	2800      	cmp	r0, #0
 800abdc:	dbed      	blt.n	800abba <__swhatbuf_r+0x12>
 800abde:	9901      	ldr	r1, [sp, #4]
 800abe0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800abe4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800abe8:	4259      	negs	r1, r3
 800abea:	4159      	adcs	r1, r3
 800abec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800abf0:	e7eb      	b.n	800abca <__swhatbuf_r+0x22>

0800abf2 <__smakebuf_r>:
 800abf2:	898b      	ldrh	r3, [r1, #12]
 800abf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf6:	079d      	lsls	r5, r3, #30
 800abf8:	4606      	mov	r6, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	d507      	bpl.n	800ac0e <__smakebuf_r+0x1c>
 800abfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac02:	6023      	str	r3, [r4, #0]
 800ac04:	6123      	str	r3, [r4, #16]
 800ac06:	2301      	movs	r3, #1
 800ac08:	6163      	str	r3, [r4, #20]
 800ac0a:	b003      	add	sp, #12
 800ac0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac0e:	466a      	mov	r2, sp
 800ac10:	ab01      	add	r3, sp, #4
 800ac12:	f7ff ffc9 	bl	800aba8 <__swhatbuf_r>
 800ac16:	9f00      	ldr	r7, [sp, #0]
 800ac18:	4605      	mov	r5, r0
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7fd fbe1 	bl	80083e4 <_malloc_r>
 800ac22:	b948      	cbnz	r0, 800ac38 <__smakebuf_r+0x46>
 800ac24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac28:	059a      	lsls	r2, r3, #22
 800ac2a:	d4ee      	bmi.n	800ac0a <__smakebuf_r+0x18>
 800ac2c:	f023 0303 	bic.w	r3, r3, #3
 800ac30:	f043 0302 	orr.w	r3, r3, #2
 800ac34:	81a3      	strh	r3, [r4, #12]
 800ac36:	e7e2      	b.n	800abfe <__smakebuf_r+0xc>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	9b01      	ldr	r3, [sp, #4]
 800ac46:	6020      	str	r0, [r4, #0]
 800ac48:	b15b      	cbz	r3, 800ac62 <__smakebuf_r+0x70>
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac50:	f000 f81e 	bl	800ac90 <_isatty_r>
 800ac54:	b128      	cbz	r0, 800ac62 <__smakebuf_r+0x70>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	f043 0301 	orr.w	r3, r3, #1
 800ac60:	81a3      	strh	r3, [r4, #12]
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	431d      	orrs	r5, r3
 800ac66:	81a5      	strh	r5, [r4, #12]
 800ac68:	e7cf      	b.n	800ac0a <__smakebuf_r+0x18>
	...

0800ac6c <_fstat_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4d06      	ldr	r5, [pc, #24]	@ (800ac8c <_fstat_r+0x20>)
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	4611      	mov	r1, r2
 800ac78:	602b      	str	r3, [r5, #0]
 800ac7a:	f7f8 fa49 	bl	8003110 <_fstat>
 800ac7e:	1c43      	adds	r3, r0, #1
 800ac80:	d102      	bne.n	800ac88 <_fstat_r+0x1c>
 800ac82:	682b      	ldr	r3, [r5, #0]
 800ac84:	b103      	cbz	r3, 800ac88 <_fstat_r+0x1c>
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	bd38      	pop	{r3, r4, r5, pc}
 800ac8a:	bf00      	nop
 800ac8c:	200008d4 	.word	0x200008d4

0800ac90 <_isatty_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	2300      	movs	r3, #0
 800ac94:	4d05      	ldr	r5, [pc, #20]	@ (800acac <_isatty_r+0x1c>)
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	602b      	str	r3, [r5, #0]
 800ac9c:	f7f8 fa47 	bl	800312e <_isatty>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_isatty_r+0x1a>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_isatty_r+0x1a>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	200008d4 	.word	0x200008d4

0800acb0 <pow>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4614      	mov	r4, r2
 800acb6:	461d      	mov	r5, r3
 800acb8:	4680      	mov	r8, r0
 800acba:	4689      	mov	r9, r1
 800acbc:	f000 f960 	bl	800af80 <__ieee754_pow>
 800acc0:	4622      	mov	r2, r4
 800acc2:	4606      	mov	r6, r0
 800acc4:	460f      	mov	r7, r1
 800acc6:	462b      	mov	r3, r5
 800acc8:	4620      	mov	r0, r4
 800acca:	4629      	mov	r1, r5
 800accc:	f7f5 fe9e 	bl	8000a0c <__aeabi_dcmpun>
 800acd0:	bbc8      	cbnz	r0, 800ad46 <pow+0x96>
 800acd2:	2200      	movs	r2, #0
 800acd4:	2300      	movs	r3, #0
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 fe65 	bl	80009a8 <__aeabi_dcmpeq>
 800acde:	b1b8      	cbz	r0, 800ad10 <pow+0x60>
 800ace0:	2200      	movs	r2, #0
 800ace2:	2300      	movs	r3, #0
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 800acec:	2800      	cmp	r0, #0
 800acee:	d141      	bne.n	800ad74 <pow+0xc4>
 800acf0:	4620      	mov	r0, r4
 800acf2:	4629      	mov	r1, r5
 800acf4:	f000 f868 	bl	800adc8 <finite>
 800acf8:	b328      	cbz	r0, 800ad46 <pow+0x96>
 800acfa:	2200      	movs	r2, #0
 800acfc:	2300      	movs	r3, #0
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7f5 fe5b 	bl	80009bc <__aeabi_dcmplt>
 800ad06:	b1f0      	cbz	r0, 800ad46 <pow+0x96>
 800ad08:	f7fc fc5c 	bl	80075c4 <__errno>
 800ad0c:	2322      	movs	r3, #34	@ 0x22
 800ad0e:	e019      	b.n	800ad44 <pow+0x94>
 800ad10:	4630      	mov	r0, r6
 800ad12:	4639      	mov	r1, r7
 800ad14:	f000 f858 	bl	800adc8 <finite>
 800ad18:	b9c8      	cbnz	r0, 800ad4e <pow+0x9e>
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	f000 f853 	bl	800adc8 <finite>
 800ad22:	b1a0      	cbz	r0, 800ad4e <pow+0x9e>
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f000 f84e 	bl	800adc8 <finite>
 800ad2c:	b178      	cbz	r0, 800ad4e <pow+0x9e>
 800ad2e:	4632      	mov	r2, r6
 800ad30:	463b      	mov	r3, r7
 800ad32:	4630      	mov	r0, r6
 800ad34:	4639      	mov	r1, r7
 800ad36:	f7f5 fe69 	bl	8000a0c <__aeabi_dcmpun>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d0e4      	beq.n	800ad08 <pow+0x58>
 800ad3e:	f7fc fc41 	bl	80075c4 <__errno>
 800ad42:	2321      	movs	r3, #33	@ 0x21
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	4630      	mov	r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad4e:	2200      	movs	r2, #0
 800ad50:	2300      	movs	r3, #0
 800ad52:	4630      	mov	r0, r6
 800ad54:	4639      	mov	r1, r7
 800ad56:	f7f5 fe27 	bl	80009a8 <__aeabi_dcmpeq>
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d0f3      	beq.n	800ad46 <pow+0x96>
 800ad5e:	4640      	mov	r0, r8
 800ad60:	4649      	mov	r1, r9
 800ad62:	f000 f831 	bl	800adc8 <finite>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d0ed      	beq.n	800ad46 <pow+0x96>
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	4629      	mov	r1, r5
 800ad6e:	f000 f82b 	bl	800adc8 <finite>
 800ad72:	e7c8      	b.n	800ad06 <pow+0x56>
 800ad74:	2600      	movs	r6, #0
 800ad76:	4f01      	ldr	r7, [pc, #4]	@ (800ad7c <pow+0xcc>)
 800ad78:	e7e5      	b.n	800ad46 <pow+0x96>
 800ad7a:	bf00      	nop
 800ad7c:	3ff00000 	.word	0x3ff00000

0800ad80 <sqrt>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	4606      	mov	r6, r0
 800ad84:	460f      	mov	r7, r1
 800ad86:	f000 f825 	bl	800add4 <__ieee754_sqrt>
 800ad8a:	4632      	mov	r2, r6
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	460d      	mov	r5, r1
 800ad90:	463b      	mov	r3, r7
 800ad92:	4630      	mov	r0, r6
 800ad94:	4639      	mov	r1, r7
 800ad96:	f7f5 fe39 	bl	8000a0c <__aeabi_dcmpun>
 800ad9a:	b990      	cbnz	r0, 800adc2 <sqrt+0x42>
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	2300      	movs	r3, #0
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fe0a 	bl	80009bc <__aeabi_dcmplt>
 800ada8:	b158      	cbz	r0, 800adc2 <sqrt+0x42>
 800adaa:	f7fc fc0b 	bl	80075c4 <__errno>
 800adae:	2321      	movs	r3, #33	@ 0x21
 800adb0:	2200      	movs	r2, #0
 800adb2:	6003      	str	r3, [r0, #0]
 800adb4:	2300      	movs	r3, #0
 800adb6:	4610      	mov	r0, r2
 800adb8:	4619      	mov	r1, r3
 800adba:	f7f5 fcb7 	bl	800072c <__aeabi_ddiv>
 800adbe:	4604      	mov	r4, r0
 800adc0:	460d      	mov	r5, r1
 800adc2:	4620      	mov	r0, r4
 800adc4:	4629      	mov	r1, r5
 800adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adc8 <finite>:
 800adc8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800adcc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800add0:	0fc0      	lsrs	r0, r0, #31
 800add2:	4770      	bx	lr

0800add4 <__ieee754_sqrt>:
 800add4:	4a67      	ldr	r2, [pc, #412]	@ (800af74 <__ieee754_sqrt+0x1a0>)
 800add6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adda:	438a      	bics	r2, r1
 800addc:	4606      	mov	r6, r0
 800adde:	460f      	mov	r7, r1
 800ade0:	460b      	mov	r3, r1
 800ade2:	4604      	mov	r4, r0
 800ade4:	d10e      	bne.n	800ae04 <__ieee754_sqrt+0x30>
 800ade6:	4602      	mov	r2, r0
 800ade8:	f7f5 fb76 	bl	80004d8 <__aeabi_dmul>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 f9ba 	bl	800016c <__adddf3>
 800adf8:	4606      	mov	r6, r0
 800adfa:	460f      	mov	r7, r1
 800adfc:	4630      	mov	r0, r6
 800adfe:	4639      	mov	r1, r7
 800ae00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	2900      	cmp	r1, #0
 800ae06:	dc0c      	bgt.n	800ae22 <__ieee754_sqrt+0x4e>
 800ae08:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800ae0c:	4302      	orrs	r2, r0
 800ae0e:	d0f5      	beq.n	800adfc <__ieee754_sqrt+0x28>
 800ae10:	b189      	cbz	r1, 800ae36 <__ieee754_sqrt+0x62>
 800ae12:	4602      	mov	r2, r0
 800ae14:	f7f5 f9a8 	bl	8000168 <__aeabi_dsub>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	f7f5 fc86 	bl	800072c <__aeabi_ddiv>
 800ae20:	e7ea      	b.n	800adf8 <__ieee754_sqrt+0x24>
 800ae22:	150a      	asrs	r2, r1, #20
 800ae24:	d115      	bne.n	800ae52 <__ieee754_sqrt+0x7e>
 800ae26:	2100      	movs	r1, #0
 800ae28:	e009      	b.n	800ae3e <__ieee754_sqrt+0x6a>
 800ae2a:	0ae3      	lsrs	r3, r4, #11
 800ae2c:	3a15      	subs	r2, #21
 800ae2e:	0564      	lsls	r4, r4, #21
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d0fa      	beq.n	800ae2a <__ieee754_sqrt+0x56>
 800ae34:	e7f7      	b.n	800ae26 <__ieee754_sqrt+0x52>
 800ae36:	460a      	mov	r2, r1
 800ae38:	e7fa      	b.n	800ae30 <__ieee754_sqrt+0x5c>
 800ae3a:	005b      	lsls	r3, r3, #1
 800ae3c:	3101      	adds	r1, #1
 800ae3e:	02d8      	lsls	r0, r3, #11
 800ae40:	d5fb      	bpl.n	800ae3a <__ieee754_sqrt+0x66>
 800ae42:	1e48      	subs	r0, r1, #1
 800ae44:	1a12      	subs	r2, r2, r0
 800ae46:	f1c1 0020 	rsb	r0, r1, #32
 800ae4a:	fa24 f000 	lsr.w	r0, r4, r0
 800ae4e:	4303      	orrs	r3, r0
 800ae50:	408c      	lsls	r4, r1
 800ae52:	2600      	movs	r6, #0
 800ae54:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800ae58:	2116      	movs	r1, #22
 800ae5a:	07d2      	lsls	r2, r2, #31
 800ae5c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800ae60:	4632      	mov	r2, r6
 800ae62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ae6a:	bf5c      	itt	pl
 800ae6c:	005b      	lslpl	r3, r3, #1
 800ae6e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800ae72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae76:	bf58      	it	pl
 800ae78:	0064      	lslpl	r4, r4, #1
 800ae7a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800ae7e:	107f      	asrs	r7, r7, #1
 800ae80:	0064      	lsls	r4, r4, #1
 800ae82:	1815      	adds	r5, r2, r0
 800ae84:	429d      	cmp	r5, r3
 800ae86:	bfde      	ittt	le
 800ae88:	182a      	addle	r2, r5, r0
 800ae8a:	1b5b      	suble	r3, r3, r5
 800ae8c:	1836      	addle	r6, r6, r0
 800ae8e:	0fe5      	lsrs	r5, r4, #31
 800ae90:	3901      	subs	r1, #1
 800ae92:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ae96:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800ae9a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800ae9e:	d1f0      	bne.n	800ae82 <__ieee754_sqrt+0xae>
 800aea0:	460d      	mov	r5, r1
 800aea2:	f04f 0a20 	mov.w	sl, #32
 800aea6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	eb01 0c00 	add.w	ip, r1, r0
 800aeb0:	db02      	blt.n	800aeb8 <__ieee754_sqrt+0xe4>
 800aeb2:	d113      	bne.n	800aedc <__ieee754_sqrt+0x108>
 800aeb4:	45a4      	cmp	ip, r4
 800aeb6:	d811      	bhi.n	800aedc <__ieee754_sqrt+0x108>
 800aeb8:	f1bc 0f00 	cmp.w	ip, #0
 800aebc:	eb0c 0100 	add.w	r1, ip, r0
 800aec0:	da42      	bge.n	800af48 <__ieee754_sqrt+0x174>
 800aec2:	2900      	cmp	r1, #0
 800aec4:	db40      	blt.n	800af48 <__ieee754_sqrt+0x174>
 800aec6:	f102 0e01 	add.w	lr, r2, #1
 800aeca:	1a9b      	subs	r3, r3, r2
 800aecc:	4672      	mov	r2, lr
 800aece:	45a4      	cmp	ip, r4
 800aed0:	bf88      	it	hi
 800aed2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aed6:	eba4 040c 	sub.w	r4, r4, ip
 800aeda:	4405      	add	r5, r0
 800aedc:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800aee0:	f1ba 0a01 	subs.w	sl, sl, #1
 800aee4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800aee8:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800aeec:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800aef0:	d1db      	bne.n	800aeaa <__ieee754_sqrt+0xd6>
 800aef2:	431c      	orrs	r4, r3
 800aef4:	d01a      	beq.n	800af2c <__ieee754_sqrt+0x158>
 800aef6:	4c20      	ldr	r4, [pc, #128]	@ (800af78 <__ieee754_sqrt+0x1a4>)
 800aef8:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800af7c <__ieee754_sqrt+0x1a8>
 800aefc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800af00:	e9db 2300 	ldrd	r2, r3, [fp]
 800af04:	f7f5 f930 	bl	8000168 <__aeabi_dsub>
 800af08:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4640      	mov	r0, r8
 800af12:	4649      	mov	r1, r9
 800af14:	f7f5 fd5c 	bl	80009d0 <__aeabi_dcmple>
 800af18:	b140      	cbz	r0, 800af2c <__ieee754_sqrt+0x158>
 800af1a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800af1e:	e9db 2300 	ldrd	r2, r3, [fp]
 800af22:	f1b5 3fff 	cmp.w	r5, #4294967295
 800af26:	d111      	bne.n	800af4c <__ieee754_sqrt+0x178>
 800af28:	4655      	mov	r5, sl
 800af2a:	3601      	adds	r6, #1
 800af2c:	1072      	asrs	r2, r6, #1
 800af2e:	086b      	lsrs	r3, r5, #1
 800af30:	07f1      	lsls	r1, r6, #31
 800af32:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800af36:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800af3a:	bf48      	it	mi
 800af3c:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800af40:	4618      	mov	r0, r3
 800af42:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800af46:	e757      	b.n	800adf8 <__ieee754_sqrt+0x24>
 800af48:	4696      	mov	lr, r2
 800af4a:	e7be      	b.n	800aeca <__ieee754_sqrt+0xf6>
 800af4c:	f7f5 f90e 	bl	800016c <__adddf3>
 800af50:	e9d4 8900 	ldrd	r8, r9, [r4]
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	4640      	mov	r0, r8
 800af5a:	4649      	mov	r1, r9
 800af5c:	f7f5 fd2e 	bl	80009bc <__aeabi_dcmplt>
 800af60:	b120      	cbz	r0, 800af6c <__ieee754_sqrt+0x198>
 800af62:	1ca8      	adds	r0, r5, #2
 800af64:	bf08      	it	eq
 800af66:	3601      	addeq	r6, #1
 800af68:	3502      	adds	r5, #2
 800af6a:	e7df      	b.n	800af2c <__ieee754_sqrt+0x158>
 800af6c:	1c6b      	adds	r3, r5, #1
 800af6e:	f023 0501 	bic.w	r5, r3, #1
 800af72:	e7db      	b.n	800af2c <__ieee754_sqrt+0x158>
 800af74:	7ff00000 	.word	0x7ff00000
 800af78:	20000580 	.word	0x20000580
 800af7c:	20000578 	.word	0x20000578

0800af80 <__ieee754_pow>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	b091      	sub	sp, #68	@ 0x44
 800af86:	e9cd 2300 	strd	r2, r3, [sp]
 800af8a:	468b      	mov	fp, r1
 800af8c:	e9dd 1800 	ldrd	r1, r8, [sp]
 800af90:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800af94:	4682      	mov	sl, r0
 800af96:	ea57 0001 	orrs.w	r0, r7, r1
 800af9a:	d112      	bne.n	800afc2 <__ieee754_pow+0x42>
 800af9c:	4653      	mov	r3, sl
 800af9e:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800afa2:	18db      	adds	r3, r3, r3
 800afa4:	4152      	adcs	r2, r2
 800afa6:	4298      	cmp	r0, r3
 800afa8:	4b91      	ldr	r3, [pc, #580]	@ (800b1f0 <__ieee754_pow+0x270>)
 800afaa:	4193      	sbcs	r3, r2
 800afac:	f080 84ce 	bcs.w	800b94c <__ieee754_pow+0x9cc>
 800afb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afb4:	4650      	mov	r0, sl
 800afb6:	4659      	mov	r1, fp
 800afb8:	f7f5 f8d8 	bl	800016c <__adddf3>
 800afbc:	b011      	add	sp, #68	@ 0x44
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc2:	4b8c      	ldr	r3, [pc, #560]	@ (800b1f4 <__ieee754_pow+0x274>)
 800afc4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800afc8:	429e      	cmp	r6, r3
 800afca:	465d      	mov	r5, fp
 800afcc:	46d1      	mov	r9, sl
 800afce:	d807      	bhi.n	800afe0 <__ieee754_pow+0x60>
 800afd0:	d102      	bne.n	800afd8 <__ieee754_pow+0x58>
 800afd2:	f1ba 0f00 	cmp.w	sl, #0
 800afd6:	d1eb      	bne.n	800afb0 <__ieee754_pow+0x30>
 800afd8:	429f      	cmp	r7, r3
 800afda:	d801      	bhi.n	800afe0 <__ieee754_pow+0x60>
 800afdc:	d10f      	bne.n	800affe <__ieee754_pow+0x7e>
 800afde:	b171      	cbz	r1, 800affe <__ieee754_pow+0x7e>
 800afe0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800afe4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800afe8:	ea55 0509 	orrs.w	r5, r5, r9
 800afec:	d1e0      	bne.n	800afb0 <__ieee754_pow+0x30>
 800afee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aff2:	18db      	adds	r3, r3, r3
 800aff4:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800aff8:	4152      	adcs	r2, r2
 800affa:	429d      	cmp	r5, r3
 800affc:	e7d4      	b.n	800afa8 <__ieee754_pow+0x28>
 800affe:	2d00      	cmp	r5, #0
 800b000:	4633      	mov	r3, r6
 800b002:	da39      	bge.n	800b078 <__ieee754_pow+0xf8>
 800b004:	4a7c      	ldr	r2, [pc, #496]	@ (800b1f8 <__ieee754_pow+0x278>)
 800b006:	4297      	cmp	r7, r2
 800b008:	d84e      	bhi.n	800b0a8 <__ieee754_pow+0x128>
 800b00a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b00e:	4297      	cmp	r7, r2
 800b010:	f240 84ab 	bls.w	800b96a <__ieee754_pow+0x9ea>
 800b014:	153a      	asrs	r2, r7, #20
 800b016:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b01a:	2a14      	cmp	r2, #20
 800b01c:	dd0f      	ble.n	800b03e <__ieee754_pow+0xbe>
 800b01e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b022:	fa21 f402 	lsr.w	r4, r1, r2
 800b026:	fa04 f202 	lsl.w	r2, r4, r2
 800b02a:	428a      	cmp	r2, r1
 800b02c:	f040 849d 	bne.w	800b96a <__ieee754_pow+0x9ea>
 800b030:	f004 0401 	and.w	r4, r4, #1
 800b034:	f1c4 0402 	rsb	r4, r4, #2
 800b038:	2900      	cmp	r1, #0
 800b03a:	d15a      	bne.n	800b0f2 <__ieee754_pow+0x172>
 800b03c:	e00e      	b.n	800b05c <__ieee754_pow+0xdc>
 800b03e:	2900      	cmp	r1, #0
 800b040:	d156      	bne.n	800b0f0 <__ieee754_pow+0x170>
 800b042:	f1c2 0214 	rsb	r2, r2, #20
 800b046:	fa47 f402 	asr.w	r4, r7, r2
 800b04a:	fa04 f202 	lsl.w	r2, r4, r2
 800b04e:	42ba      	cmp	r2, r7
 800b050:	f040 8488 	bne.w	800b964 <__ieee754_pow+0x9e4>
 800b054:	f004 0401 	and.w	r4, r4, #1
 800b058:	f1c4 0402 	rsb	r4, r4, #2
 800b05c:	4a67      	ldr	r2, [pc, #412]	@ (800b1fc <__ieee754_pow+0x27c>)
 800b05e:	4297      	cmp	r7, r2
 800b060:	d130      	bne.n	800b0c4 <__ieee754_pow+0x144>
 800b062:	f1b8 0f00 	cmp.w	r8, #0
 800b066:	f280 8479 	bge.w	800b95c <__ieee754_pow+0x9dc>
 800b06a:	4652      	mov	r2, sl
 800b06c:	465b      	mov	r3, fp
 800b06e:	2000      	movs	r0, #0
 800b070:	4962      	ldr	r1, [pc, #392]	@ (800b1fc <__ieee754_pow+0x27c>)
 800b072:	f7f5 fb5b 	bl	800072c <__aeabi_ddiv>
 800b076:	e7a1      	b.n	800afbc <__ieee754_pow+0x3c>
 800b078:	2400      	movs	r4, #0
 800b07a:	2900      	cmp	r1, #0
 800b07c:	d139      	bne.n	800b0f2 <__ieee754_pow+0x172>
 800b07e:	4a5d      	ldr	r2, [pc, #372]	@ (800b1f4 <__ieee754_pow+0x274>)
 800b080:	4297      	cmp	r7, r2
 800b082:	d1eb      	bne.n	800b05c <__ieee754_pow+0xdc>
 800b084:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800b088:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800b08c:	ea53 0309 	orrs.w	r3, r3, r9
 800b090:	f000 845c 	beq.w	800b94c <__ieee754_pow+0x9cc>
 800b094:	4b5a      	ldr	r3, [pc, #360]	@ (800b200 <__ieee754_pow+0x280>)
 800b096:	429e      	cmp	r6, r3
 800b098:	d908      	bls.n	800b0ac <__ieee754_pow+0x12c>
 800b09a:	f1b8 0f00 	cmp.w	r8, #0
 800b09e:	f2c0 8459 	blt.w	800b954 <__ieee754_pow+0x9d4>
 800b0a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0a6:	e789      	b.n	800afbc <__ieee754_pow+0x3c>
 800b0a8:	2402      	movs	r4, #2
 800b0aa:	e7e6      	b.n	800b07a <__ieee754_pow+0xfa>
 800b0ac:	f1b8 0f00 	cmp.w	r8, #0
 800b0b0:	f04f 0000 	mov.w	r0, #0
 800b0b4:	f04f 0100 	mov.w	r1, #0
 800b0b8:	da80      	bge.n	800afbc <__ieee754_pow+0x3c>
 800b0ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b0be:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b0c2:	e77b      	b.n	800afbc <__ieee754_pow+0x3c>
 800b0c4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800b0c8:	d106      	bne.n	800b0d8 <__ieee754_pow+0x158>
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	465b      	mov	r3, fp
 800b0ce:	4650      	mov	r0, sl
 800b0d0:	4659      	mov	r1, fp
 800b0d2:	f7f5 fa01 	bl	80004d8 <__aeabi_dmul>
 800b0d6:	e771      	b.n	800afbc <__ieee754_pow+0x3c>
 800b0d8:	4a4a      	ldr	r2, [pc, #296]	@ (800b204 <__ieee754_pow+0x284>)
 800b0da:	4590      	cmp	r8, r2
 800b0dc:	d109      	bne.n	800b0f2 <__ieee754_pow+0x172>
 800b0de:	2d00      	cmp	r5, #0
 800b0e0:	db07      	blt.n	800b0f2 <__ieee754_pow+0x172>
 800b0e2:	4650      	mov	r0, sl
 800b0e4:	4659      	mov	r1, fp
 800b0e6:	b011      	add	sp, #68	@ 0x44
 800b0e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	f7ff be72 	b.w	800add4 <__ieee754_sqrt>
 800b0f0:	2400      	movs	r4, #0
 800b0f2:	4650      	mov	r0, sl
 800b0f4:	4659      	mov	r1, fp
 800b0f6:	9302      	str	r3, [sp, #8]
 800b0f8:	f000 fc6a 	bl	800b9d0 <fabs>
 800b0fc:	9b02      	ldr	r3, [sp, #8]
 800b0fe:	f1b9 0f00 	cmp.w	r9, #0
 800b102:	d127      	bne.n	800b154 <__ieee754_pow+0x1d4>
 800b104:	4a3d      	ldr	r2, [pc, #244]	@ (800b1fc <__ieee754_pow+0x27c>)
 800b106:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800b10a:	4594      	cmp	ip, r2
 800b10c:	d000      	beq.n	800b110 <__ieee754_pow+0x190>
 800b10e:	bb0e      	cbnz	r6, 800b154 <__ieee754_pow+0x1d4>
 800b110:	f1b8 0f00 	cmp.w	r8, #0
 800b114:	da05      	bge.n	800b122 <__ieee754_pow+0x1a2>
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	2000      	movs	r0, #0
 800b11c:	4937      	ldr	r1, [pc, #220]	@ (800b1fc <__ieee754_pow+0x27c>)
 800b11e:	f7f5 fb05 	bl	800072c <__aeabi_ddiv>
 800b122:	2d00      	cmp	r5, #0
 800b124:	f6bf af4a 	bge.w	800afbc <__ieee754_pow+0x3c>
 800b128:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b12c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b130:	4326      	orrs	r6, r4
 800b132:	d108      	bne.n	800b146 <__ieee754_pow+0x1c6>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	4610      	mov	r0, r2
 800b13a:	4619      	mov	r1, r3
 800b13c:	f7f5 f814 	bl	8000168 <__aeabi_dsub>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	e795      	b.n	800b072 <__ieee754_pow+0xf2>
 800b146:	2c01      	cmp	r4, #1
 800b148:	f47f af38 	bne.w	800afbc <__ieee754_pow+0x3c>
 800b14c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b150:	4619      	mov	r1, r3
 800b152:	e733      	b.n	800afbc <__ieee754_pow+0x3c>
 800b154:	0fea      	lsrs	r2, r5, #31
 800b156:	3a01      	subs	r2, #1
 800b158:	ea52 0c04 	orrs.w	ip, r2, r4
 800b15c:	d102      	bne.n	800b164 <__ieee754_pow+0x1e4>
 800b15e:	4652      	mov	r2, sl
 800b160:	465b      	mov	r3, fp
 800b162:	e7e9      	b.n	800b138 <__ieee754_pow+0x1b8>
 800b164:	f04f 0900 	mov.w	r9, #0
 800b168:	3c01      	subs	r4, #1
 800b16a:	4314      	orrs	r4, r2
 800b16c:	bf14      	ite	ne
 800b16e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800b1fc <__ieee754_pow+0x27c>
 800b172:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800b208 <__ieee754_pow+0x288>
 800b176:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800b17a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800b17e:	f240 8107 	bls.w	800b390 <__ieee754_pow+0x410>
 800b182:	4b22      	ldr	r3, [pc, #136]	@ (800b20c <__ieee754_pow+0x28c>)
 800b184:	429f      	cmp	r7, r3
 800b186:	4b1e      	ldr	r3, [pc, #120]	@ (800b200 <__ieee754_pow+0x280>)
 800b188:	d913      	bls.n	800b1b2 <__ieee754_pow+0x232>
 800b18a:	429e      	cmp	r6, r3
 800b18c:	d808      	bhi.n	800b1a0 <__ieee754_pow+0x220>
 800b18e:	f1b8 0f00 	cmp.w	r8, #0
 800b192:	da08      	bge.n	800b1a6 <__ieee754_pow+0x226>
 800b194:	2000      	movs	r0, #0
 800b196:	b011      	add	sp, #68	@ 0x44
 800b198:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	f000 bcb4 	b.w	800bb08 <__math_oflow>
 800b1a0:	f1b8 0f00 	cmp.w	r8, #0
 800b1a4:	dcf6      	bgt.n	800b194 <__ieee754_pow+0x214>
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	b011      	add	sp, #68	@ 0x44
 800b1aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ae:	f000 bca6 	b.w	800bafe <__math_uflow>
 800b1b2:	429e      	cmp	r6, r3
 800b1b4:	d20c      	bcs.n	800b1d0 <__ieee754_pow+0x250>
 800b1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f7f5 fbfd 	bl	80009bc <__aeabi_dcmplt>
 800b1c2:	3800      	subs	r0, #0
 800b1c4:	bf18      	it	ne
 800b1c6:	2001      	movne	r0, #1
 800b1c8:	f1b8 0f00 	cmp.w	r8, #0
 800b1cc:	daec      	bge.n	800b1a8 <__ieee754_pow+0x228>
 800b1ce:	e7e2      	b.n	800b196 <__ieee754_pow+0x216>
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b1fc <__ieee754_pow+0x27c>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	429e      	cmp	r6, r3
 800b1d6:	d91b      	bls.n	800b210 <__ieee754_pow+0x290>
 800b1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	f7f5 fbed 	bl	80009bc <__aeabi_dcmplt>
 800b1e2:	3800      	subs	r0, #0
 800b1e4:	bf18      	it	ne
 800b1e6:	2001      	movne	r0, #1
 800b1e8:	f1b8 0f00 	cmp.w	r8, #0
 800b1ec:	dcd3      	bgt.n	800b196 <__ieee754_pow+0x216>
 800b1ee:	e7db      	b.n	800b1a8 <__ieee754_pow+0x228>
 800b1f0:	fff00000 	.word	0xfff00000
 800b1f4:	7ff00000 	.word	0x7ff00000
 800b1f8:	433fffff 	.word	0x433fffff
 800b1fc:	3ff00000 	.word	0x3ff00000
 800b200:	3fefffff 	.word	0x3fefffff
 800b204:	3fe00000 	.word	0x3fe00000
 800b208:	bff00000 	.word	0xbff00000
 800b20c:	43f00000 	.word	0x43f00000
 800b210:	4b5b      	ldr	r3, [pc, #364]	@ (800b380 <__ieee754_pow+0x400>)
 800b212:	f7f4 ffa9 	bl	8000168 <__aeabi_dsub>
 800b216:	a352      	add	r3, pc, #328	@ (adr r3, 800b360 <__ieee754_pow+0x3e0>)
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	4604      	mov	r4, r0
 800b21e:	460d      	mov	r5, r1
 800b220:	f7f5 f95a 	bl	80004d8 <__aeabi_dmul>
 800b224:	a350      	add	r3, pc, #320	@ (adr r3, 800b368 <__ieee754_pow+0x3e8>)
 800b226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22a:	4606      	mov	r6, r0
 800b22c:	460f      	mov	r7, r1
 800b22e:	4620      	mov	r0, r4
 800b230:	4629      	mov	r1, r5
 800b232:	f7f5 f951 	bl	80004d8 <__aeabi_dmul>
 800b236:	2200      	movs	r2, #0
 800b238:	4682      	mov	sl, r0
 800b23a:	468b      	mov	fp, r1
 800b23c:	4620      	mov	r0, r4
 800b23e:	4629      	mov	r1, r5
 800b240:	4b50      	ldr	r3, [pc, #320]	@ (800b384 <__ieee754_pow+0x404>)
 800b242:	f7f5 f949 	bl	80004d8 <__aeabi_dmul>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	a149      	add	r1, pc, #292	@ (adr r1, 800b370 <__ieee754_pow+0x3f0>)
 800b24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b250:	f7f4 ff8a 	bl	8000168 <__aeabi_dsub>
 800b254:	4622      	mov	r2, r4
 800b256:	462b      	mov	r3, r5
 800b258:	f7f5 f93e 	bl	80004d8 <__aeabi_dmul>
 800b25c:	4602      	mov	r2, r0
 800b25e:	460b      	mov	r3, r1
 800b260:	2000      	movs	r0, #0
 800b262:	4949      	ldr	r1, [pc, #292]	@ (800b388 <__ieee754_pow+0x408>)
 800b264:	f7f4 ff80 	bl	8000168 <__aeabi_dsub>
 800b268:	4622      	mov	r2, r4
 800b26a:	4680      	mov	r8, r0
 800b26c:	4689      	mov	r9, r1
 800b26e:	462b      	mov	r3, r5
 800b270:	4620      	mov	r0, r4
 800b272:	4629      	mov	r1, r5
 800b274:	f7f5 f930 	bl	80004d8 <__aeabi_dmul>
 800b278:	4602      	mov	r2, r0
 800b27a:	460b      	mov	r3, r1
 800b27c:	4640      	mov	r0, r8
 800b27e:	4649      	mov	r1, r9
 800b280:	f7f5 f92a 	bl	80004d8 <__aeabi_dmul>
 800b284:	a33c      	add	r3, pc, #240	@ (adr r3, 800b378 <__ieee754_pow+0x3f8>)
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	f7f5 f925 	bl	80004d8 <__aeabi_dmul>
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4650      	mov	r0, sl
 800b294:	4659      	mov	r1, fp
 800b296:	f7f4 ff67 	bl	8000168 <__aeabi_dsub>
 800b29a:	2400      	movs	r4, #0
 800b29c:	4602      	mov	r2, r0
 800b29e:	460b      	mov	r3, r1
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	4689      	mov	r9, r1
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	f7f4 ff60 	bl	800016c <__adddf3>
 800b2ac:	4632      	mov	r2, r6
 800b2ae:	463b      	mov	r3, r7
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	f7f4 ff58 	bl	8000168 <__aeabi_dsub>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4649      	mov	r1, r9
 800b2c0:	f7f4 ff52 	bl	8000168 <__aeabi_dsub>
 800b2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b2d4:	4606      	mov	r6, r0
 800b2d6:	460f      	mov	r7, r1
 800b2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2dc:	4652      	mov	r2, sl
 800b2de:	465b      	mov	r3, fp
 800b2e0:	f7f4 ff42 	bl	8000168 <__aeabi_dsub>
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	462b      	mov	r3, r5
 800b2e8:	f7f5 f8f6 	bl	80004d8 <__aeabi_dmul>
 800b2ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2f0:	4680      	mov	r8, r0
 800b2f2:	4689      	mov	r9, r1
 800b2f4:	4630      	mov	r0, r6
 800b2f6:	4639      	mov	r1, r7
 800b2f8:	f7f5 f8ee 	bl	80004d8 <__aeabi_dmul>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4640      	mov	r0, r8
 800b302:	4649      	mov	r1, r9
 800b304:	f7f4 ff32 	bl	800016c <__adddf3>
 800b308:	4652      	mov	r2, sl
 800b30a:	465b      	mov	r3, fp
 800b30c:	4606      	mov	r6, r0
 800b30e:	460f      	mov	r7, r1
 800b310:	4620      	mov	r0, r4
 800b312:	4629      	mov	r1, r5
 800b314:	f7f5 f8e0 	bl	80004d8 <__aeabi_dmul>
 800b318:	460b      	mov	r3, r1
 800b31a:	4602      	mov	r2, r0
 800b31c:	4680      	mov	r8, r0
 800b31e:	4689      	mov	r9, r1
 800b320:	4630      	mov	r0, r6
 800b322:	4639      	mov	r1, r7
 800b324:	f7f4 ff22 	bl	800016c <__adddf3>
 800b328:	4b18      	ldr	r3, [pc, #96]	@ (800b38c <__ieee754_pow+0x40c>)
 800b32a:	4604      	mov	r4, r0
 800b32c:	4299      	cmp	r1, r3
 800b32e:	460d      	mov	r5, r1
 800b330:	468a      	mov	sl, r1
 800b332:	468b      	mov	fp, r1
 800b334:	f340 82e0 	ble.w	800b8f8 <__ieee754_pow+0x978>
 800b338:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b33c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b340:	4303      	orrs	r3, r0
 800b342:	f000 81df 	beq.w	800b704 <__ieee754_pow+0x784>
 800b346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b34a:	2200      	movs	r2, #0
 800b34c:	2300      	movs	r3, #0
 800b34e:	f7f5 fb35 	bl	80009bc <__aeabi_dcmplt>
 800b352:	3800      	subs	r0, #0
 800b354:	bf18      	it	ne
 800b356:	2001      	movne	r0, #1
 800b358:	e71d      	b.n	800b196 <__ieee754_pow+0x216>
 800b35a:	bf00      	nop
 800b35c:	f3af 8000 	nop.w
 800b360:	60000000 	.word	0x60000000
 800b364:	3ff71547 	.word	0x3ff71547
 800b368:	f85ddf44 	.word	0xf85ddf44
 800b36c:	3e54ae0b 	.word	0x3e54ae0b
 800b370:	55555555 	.word	0x55555555
 800b374:	3fd55555 	.word	0x3fd55555
 800b378:	652b82fe 	.word	0x652b82fe
 800b37c:	3ff71547 	.word	0x3ff71547
 800b380:	3ff00000 	.word	0x3ff00000
 800b384:	3fd00000 	.word	0x3fd00000
 800b388:	3fe00000 	.word	0x3fe00000
 800b38c:	408fffff 	.word	0x408fffff
 800b390:	4ad3      	ldr	r2, [pc, #844]	@ (800b6e0 <__ieee754_pow+0x760>)
 800b392:	402a      	ands	r2, r5
 800b394:	2a00      	cmp	r2, #0
 800b396:	f040 817a 	bne.w	800b68e <__ieee754_pow+0x70e>
 800b39a:	4bd2      	ldr	r3, [pc, #840]	@ (800b6e4 <__ieee754_pow+0x764>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	f7f5 f89b 	bl	80004d8 <__aeabi_dmul>
 800b3a2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	151a      	asrs	r2, r3, #20
 800b3aa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b3ae:	4422      	add	r2, r4
 800b3b0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3b2:	4acd      	ldr	r2, [pc, #820]	@ (800b6e8 <__ieee754_pow+0x768>)
 800b3b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3b8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b3c2:	dd08      	ble.n	800b3d6 <__ieee754_pow+0x456>
 800b3c4:	4ac9      	ldr	r2, [pc, #804]	@ (800b6ec <__ieee754_pow+0x76c>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	f340 8163 	ble.w	800b692 <__ieee754_pow+0x712>
 800b3cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ce:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3d6:	2600      	movs	r6, #0
 800b3d8:	00f3      	lsls	r3, r6, #3
 800b3da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b3dc:	4bc4      	ldr	r3, [pc, #784]	@ (800b6f0 <__ieee754_pow+0x770>)
 800b3de:	4629      	mov	r1, r5
 800b3e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b3ee:	4623      	mov	r3, r4
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	f7f4 feb9 	bl	8000168 <__aeabi_dsub>
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b3fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b402:	f7f4 feb3 	bl	800016c <__adddf3>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	2000      	movs	r0, #0
 800b40c:	49b9      	ldr	r1, [pc, #740]	@ (800b6f4 <__ieee754_pow+0x774>)
 800b40e:	f7f5 f98d 	bl	800072c <__aeabi_ddiv>
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b41a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b41e:	f7f5 f85b 	bl	80004d8 <__aeabi_dmul>
 800b422:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b426:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b42a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b42e:	2300      	movs	r3, #0
 800b430:	2200      	movs	r2, #0
 800b432:	46ab      	mov	fp, r5
 800b434:	106d      	asrs	r5, r5, #1
 800b436:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b43a:	9304      	str	r3, [sp, #16]
 800b43c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b440:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b444:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	4614      	mov	r4, r2
 800b44e:	461d      	mov	r5, r3
 800b450:	f7f5 f842 	bl	80004d8 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b45c:	f7f4 fe84 	bl	8000168 <__aeabi_dsub>
 800b460:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b464:	4606      	mov	r6, r0
 800b466:	460f      	mov	r7, r1
 800b468:	4620      	mov	r0, r4
 800b46a:	4629      	mov	r1, r5
 800b46c:	f7f4 fe7c 	bl	8000168 <__aeabi_dsub>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	4650      	mov	r0, sl
 800b476:	4659      	mov	r1, fp
 800b478:	f7f4 fe76 	bl	8000168 <__aeabi_dsub>
 800b47c:	4642      	mov	r2, r8
 800b47e:	464b      	mov	r3, r9
 800b480:	f7f5 f82a 	bl	80004d8 <__aeabi_dmul>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f4 fe6c 	bl	8000168 <__aeabi_dsub>
 800b490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b494:	f7f5 f820 	bl	80004d8 <__aeabi_dmul>
 800b498:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b49c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	f7f5 f818 	bl	80004d8 <__aeabi_dmul>
 800b4a8:	a37b      	add	r3, pc, #492	@ (adr r3, 800b698 <__ieee754_pow+0x718>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	4604      	mov	r4, r0
 800b4b0:	460d      	mov	r5, r1
 800b4b2:	f7f5 f811 	bl	80004d8 <__aeabi_dmul>
 800b4b6:	a37a      	add	r3, pc, #488	@ (adr r3, 800b6a0 <__ieee754_pow+0x720>)
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	f7f4 fe56 	bl	800016c <__adddf3>
 800b4c0:	4622      	mov	r2, r4
 800b4c2:	462b      	mov	r3, r5
 800b4c4:	f7f5 f808 	bl	80004d8 <__aeabi_dmul>
 800b4c8:	a377      	add	r3, pc, #476	@ (adr r3, 800b6a8 <__ieee754_pow+0x728>)
 800b4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ce:	f7f4 fe4d 	bl	800016c <__adddf3>
 800b4d2:	4622      	mov	r2, r4
 800b4d4:	462b      	mov	r3, r5
 800b4d6:	f7f4 ffff 	bl	80004d8 <__aeabi_dmul>
 800b4da:	a375      	add	r3, pc, #468	@ (adr r3, 800b6b0 <__ieee754_pow+0x730>)
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f7f4 fe44 	bl	800016c <__adddf3>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	f7f4 fff6 	bl	80004d8 <__aeabi_dmul>
 800b4ec:	a372      	add	r3, pc, #456	@ (adr r3, 800b6b8 <__ieee754_pow+0x738>)
 800b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f2:	f7f4 fe3b 	bl	800016c <__adddf3>
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	462b      	mov	r3, r5
 800b4fa:	f7f4 ffed 	bl	80004d8 <__aeabi_dmul>
 800b4fe:	a370      	add	r3, pc, #448	@ (adr r3, 800b6c0 <__ieee754_pow+0x740>)
 800b500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b504:	f7f4 fe32 	bl	800016c <__adddf3>
 800b508:	4622      	mov	r2, r4
 800b50a:	4606      	mov	r6, r0
 800b50c:	460f      	mov	r7, r1
 800b50e:	462b      	mov	r3, r5
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 ffe0 	bl	80004d8 <__aeabi_dmul>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4630      	mov	r0, r6
 800b51e:	4639      	mov	r1, r7
 800b520:	f7f4 ffda 	bl	80004d8 <__aeabi_dmul>
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b52c:	4642      	mov	r2, r8
 800b52e:	464b      	mov	r3, r9
 800b530:	f7f4 fe1c 	bl	800016c <__adddf3>
 800b534:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b538:	f7f4 ffce 	bl	80004d8 <__aeabi_dmul>
 800b53c:	4622      	mov	r2, r4
 800b53e:	462b      	mov	r3, r5
 800b540:	f7f4 fe14 	bl	800016c <__adddf3>
 800b544:	4642      	mov	r2, r8
 800b546:	4682      	mov	sl, r0
 800b548:	468b      	mov	fp, r1
 800b54a:	464b      	mov	r3, r9
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f4 ffc2 	bl	80004d8 <__aeabi_dmul>
 800b554:	2200      	movs	r2, #0
 800b556:	4b68      	ldr	r3, [pc, #416]	@ (800b6f8 <__ieee754_pow+0x778>)
 800b558:	4606      	mov	r6, r0
 800b55a:	460f      	mov	r7, r1
 800b55c:	f7f4 fe06 	bl	800016c <__adddf3>
 800b560:	4652      	mov	r2, sl
 800b562:	465b      	mov	r3, fp
 800b564:	f7f4 fe02 	bl	800016c <__adddf3>
 800b568:	2400      	movs	r4, #0
 800b56a:	460d      	mov	r5, r1
 800b56c:	4622      	mov	r2, r4
 800b56e:	460b      	mov	r3, r1
 800b570:	4640      	mov	r0, r8
 800b572:	4649      	mov	r1, r9
 800b574:	f7f4 ffb0 	bl	80004d8 <__aeabi_dmul>
 800b578:	2200      	movs	r2, #0
 800b57a:	4680      	mov	r8, r0
 800b57c:	4689      	mov	r9, r1
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	4b5d      	ldr	r3, [pc, #372]	@ (800b6f8 <__ieee754_pow+0x778>)
 800b584:	f7f4 fdf0 	bl	8000168 <__aeabi_dsub>
 800b588:	4632      	mov	r2, r6
 800b58a:	463b      	mov	r3, r7
 800b58c:	f7f4 fdec 	bl	8000168 <__aeabi_dsub>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4650      	mov	r0, sl
 800b596:	4659      	mov	r1, fp
 800b598:	f7f4 fde6 	bl	8000168 <__aeabi_dsub>
 800b59c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b5a0:	f7f4 ff9a 	bl	80004d8 <__aeabi_dmul>
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	4606      	mov	r6, r0
 800b5a8:	460f      	mov	r7, r1
 800b5aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b5ae:	462b      	mov	r3, r5
 800b5b0:	f7f4 ff92 	bl	80004d8 <__aeabi_dmul>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f4 fdd6 	bl	800016c <__adddf3>
 800b5c0:	2400      	movs	r4, #0
 800b5c2:	4606      	mov	r6, r0
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	4649      	mov	r1, r9
 800b5ce:	f7f4 fdcd 	bl	800016c <__adddf3>
 800b5d2:	a33d      	add	r3, pc, #244	@ (adr r3, 800b6c8 <__ieee754_pow+0x748>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	4620      	mov	r0, r4
 800b5da:	460d      	mov	r5, r1
 800b5dc:	f7f4 ff7c 	bl	80004d8 <__aeabi_dmul>
 800b5e0:	4642      	mov	r2, r8
 800b5e2:	464b      	mov	r3, r9
 800b5e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	f7f4 fdbc 	bl	8000168 <__aeabi_dsub>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	4639      	mov	r1, r7
 800b5f8:	f7f4 fdb6 	bl	8000168 <__aeabi_dsub>
 800b5fc:	a334      	add	r3, pc, #208	@ (adr r3, 800b6d0 <__ieee754_pow+0x750>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f7f4 ff69 	bl	80004d8 <__aeabi_dmul>
 800b606:	a334      	add	r3, pc, #208	@ (adr r3, 800b6d8 <__ieee754_pow+0x758>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	4606      	mov	r6, r0
 800b60e:	460f      	mov	r7, r1
 800b610:	4620      	mov	r0, r4
 800b612:	4629      	mov	r1, r5
 800b614:	f7f4 ff60 	bl	80004d8 <__aeabi_dmul>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7f4 fda4 	bl	800016c <__adddf3>
 800b624:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b626:	4b35      	ldr	r3, [pc, #212]	@ (800b6fc <__ieee754_pow+0x77c>)
 800b628:	2400      	movs	r4, #0
 800b62a:	4413      	add	r3, r2
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7f4 fd9c 	bl	800016c <__adddf3>
 800b634:	4682      	mov	sl, r0
 800b636:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b638:	468b      	mov	fp, r1
 800b63a:	f7f4 fee3 	bl	8000404 <__aeabi_i2d>
 800b63e:	4606      	mov	r6, r0
 800b640:	460f      	mov	r7, r1
 800b642:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b644:	4b2e      	ldr	r3, [pc, #184]	@ (800b700 <__ieee754_pow+0x780>)
 800b646:	4413      	add	r3, r2
 800b648:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b64c:	4652      	mov	r2, sl
 800b64e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b652:	465b      	mov	r3, fp
 800b654:	f7f4 fd8a 	bl	800016c <__adddf3>
 800b658:	4642      	mov	r2, r8
 800b65a:	464b      	mov	r3, r9
 800b65c:	f7f4 fd86 	bl	800016c <__adddf3>
 800b660:	4632      	mov	r2, r6
 800b662:	463b      	mov	r3, r7
 800b664:	f7f4 fd82 	bl	800016c <__adddf3>
 800b668:	4632      	mov	r2, r6
 800b66a:	463b      	mov	r3, r7
 800b66c:	4620      	mov	r0, r4
 800b66e:	460d      	mov	r5, r1
 800b670:	f7f4 fd7a 	bl	8000168 <__aeabi_dsub>
 800b674:	4642      	mov	r2, r8
 800b676:	464b      	mov	r3, r9
 800b678:	f7f4 fd76 	bl	8000168 <__aeabi_dsub>
 800b67c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b680:	f7f4 fd72 	bl	8000168 <__aeabi_dsub>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4650      	mov	r0, sl
 800b68a:	4659      	mov	r1, fp
 800b68c:	e618      	b.n	800b2c0 <__ieee754_pow+0x340>
 800b68e:	2400      	movs	r4, #0
 800b690:	e68a      	b.n	800b3a8 <__ieee754_pow+0x428>
 800b692:	2601      	movs	r6, #1
 800b694:	e6a0      	b.n	800b3d8 <__ieee754_pow+0x458>
 800b696:	bf00      	nop
 800b698:	4a454eef 	.word	0x4a454eef
 800b69c:	3fca7e28 	.word	0x3fca7e28
 800b6a0:	93c9db65 	.word	0x93c9db65
 800b6a4:	3fcd864a 	.word	0x3fcd864a
 800b6a8:	a91d4101 	.word	0xa91d4101
 800b6ac:	3fd17460 	.word	0x3fd17460
 800b6b0:	518f264d 	.word	0x518f264d
 800b6b4:	3fd55555 	.word	0x3fd55555
 800b6b8:	db6fabff 	.word	0xdb6fabff
 800b6bc:	3fdb6db6 	.word	0x3fdb6db6
 800b6c0:	33333303 	.word	0x33333303
 800b6c4:	3fe33333 	.word	0x3fe33333
 800b6c8:	e0000000 	.word	0xe0000000
 800b6cc:	3feec709 	.word	0x3feec709
 800b6d0:	dc3a03fd 	.word	0xdc3a03fd
 800b6d4:	3feec709 	.word	0x3feec709
 800b6d8:	145b01f5 	.word	0x145b01f5
 800b6dc:	be3e2fe0 	.word	0xbe3e2fe0
 800b6e0:	7ff00000 	.word	0x7ff00000
 800b6e4:	43400000 	.word	0x43400000
 800b6e8:	0003988e 	.word	0x0003988e
 800b6ec:	000bb679 	.word	0x000bb679
 800b6f0:	0800bfc0 	.word	0x0800bfc0
 800b6f4:	3ff00000 	.word	0x3ff00000
 800b6f8:	40080000 	.word	0x40080000
 800b6fc:	0800bfa0 	.word	0x0800bfa0
 800b700:	0800bfb0 	.word	0x0800bfb0
 800b704:	a39a      	add	r3, pc, #616	@ (adr r3, 800b970 <__ieee754_pow+0x9f0>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	4630      	mov	r0, r6
 800b70c:	4639      	mov	r1, r7
 800b70e:	f7f4 fd2d 	bl	800016c <__adddf3>
 800b712:	4642      	mov	r2, r8
 800b714:	e9cd 0100 	strd	r0, r1, [sp]
 800b718:	464b      	mov	r3, r9
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	f7f4 fd23 	bl	8000168 <__aeabi_dsub>
 800b722:	4602      	mov	r2, r0
 800b724:	460b      	mov	r3, r1
 800b726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b72a:	f7f5 f965 	bl	80009f8 <__aeabi_dcmpgt>
 800b72e:	2800      	cmp	r0, #0
 800b730:	f47f ae09 	bne.w	800b346 <__ieee754_pow+0x3c6>
 800b734:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b738:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b73c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b740:	fa43 fa0a 	asr.w	sl, r3, sl
 800b744:	44da      	add	sl, fp
 800b746:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b74a:	489b      	ldr	r0, [pc, #620]	@ (800b9b8 <__ieee754_pow+0xa38>)
 800b74c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b750:	4108      	asrs	r0, r1
 800b752:	ea00 030a 	and.w	r3, r0, sl
 800b756:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b75a:	f1c1 0114 	rsb	r1, r1, #20
 800b75e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b762:	4640      	mov	r0, r8
 800b764:	fa4a fa01 	asr.w	sl, sl, r1
 800b768:	f1bb 0f00 	cmp.w	fp, #0
 800b76c:	4649      	mov	r1, r9
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	bfb8      	it	lt
 800b774:	f1ca 0a00 	rsblt	sl, sl, #0
 800b778:	f7f4 fcf6 	bl	8000168 <__aeabi_dsub>
 800b77c:	4680      	mov	r8, r0
 800b77e:	4689      	mov	r9, r1
 800b780:	2400      	movs	r4, #0
 800b782:	4632      	mov	r2, r6
 800b784:	463b      	mov	r3, r7
 800b786:	4640      	mov	r0, r8
 800b788:	4649      	mov	r1, r9
 800b78a:	f7f4 fcef 	bl	800016c <__adddf3>
 800b78e:	a37a      	add	r3, pc, #488	@ (adr r3, 800b978 <__ieee754_pow+0x9f8>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	4620      	mov	r0, r4
 800b796:	460d      	mov	r5, r1
 800b798:	f7f4 fe9e 	bl	80004d8 <__aeabi_dmul>
 800b79c:	4642      	mov	r2, r8
 800b79e:	464b      	mov	r3, r9
 800b7a0:	e9cd 0100 	strd	r0, r1, [sp]
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f4 fcde 	bl	8000168 <__aeabi_dsub>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f4 fcd8 	bl	8000168 <__aeabi_dsub>
 800b7b8:	a371      	add	r3, pc, #452	@ (adr r3, 800b980 <__ieee754_pow+0xa00>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 fe8b 	bl	80004d8 <__aeabi_dmul>
 800b7c2:	a371      	add	r3, pc, #452	@ (adr r3, 800b988 <__ieee754_pow+0xa08>)
 800b7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	4689      	mov	r9, r1
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	f7f4 fe82 	bl	80004d8 <__aeabi_dmul>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4649      	mov	r1, r9
 800b7dc:	f7f4 fcc6 	bl	800016c <__adddf3>
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7ec:	f7f4 fcbe 	bl	800016c <__adddf3>
 800b7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	4689      	mov	r9, r1
 800b7f8:	f7f4 fcb6 	bl	8000168 <__aeabi_dsub>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fcb0 	bl	8000168 <__aeabi_dsub>
 800b808:	4642      	mov	r2, r8
 800b80a:	4606      	mov	r6, r0
 800b80c:	460f      	mov	r7, r1
 800b80e:	464b      	mov	r3, r9
 800b810:	4640      	mov	r0, r8
 800b812:	4649      	mov	r1, r9
 800b814:	f7f4 fe60 	bl	80004d8 <__aeabi_dmul>
 800b818:	a35d      	add	r3, pc, #372	@ (adr r3, 800b990 <__ieee754_pow+0xa10>)
 800b81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81e:	4604      	mov	r4, r0
 800b820:	460d      	mov	r5, r1
 800b822:	f7f4 fe59 	bl	80004d8 <__aeabi_dmul>
 800b826:	a35c      	add	r3, pc, #368	@ (adr r3, 800b998 <__ieee754_pow+0xa18>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fc9c 	bl	8000168 <__aeabi_dsub>
 800b830:	4622      	mov	r2, r4
 800b832:	462b      	mov	r3, r5
 800b834:	f7f4 fe50 	bl	80004d8 <__aeabi_dmul>
 800b838:	a359      	add	r3, pc, #356	@ (adr r3, 800b9a0 <__ieee754_pow+0xa20>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7f4 fc95 	bl	800016c <__adddf3>
 800b842:	4622      	mov	r2, r4
 800b844:	462b      	mov	r3, r5
 800b846:	f7f4 fe47 	bl	80004d8 <__aeabi_dmul>
 800b84a:	a357      	add	r3, pc, #348	@ (adr r3, 800b9a8 <__ieee754_pow+0xa28>)
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f7f4 fc8a 	bl	8000168 <__aeabi_dsub>
 800b854:	4622      	mov	r2, r4
 800b856:	462b      	mov	r3, r5
 800b858:	f7f4 fe3e 	bl	80004d8 <__aeabi_dmul>
 800b85c:	a354      	add	r3, pc, #336	@ (adr r3, 800b9b0 <__ieee754_pow+0xa30>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	f7f4 fc83 	bl	800016c <__adddf3>
 800b866:	4622      	mov	r2, r4
 800b868:	462b      	mov	r3, r5
 800b86a:	f7f4 fe35 	bl	80004d8 <__aeabi_dmul>
 800b86e:	4602      	mov	r2, r0
 800b870:	460b      	mov	r3, r1
 800b872:	4640      	mov	r0, r8
 800b874:	4649      	mov	r1, r9
 800b876:	f7f4 fc77 	bl	8000168 <__aeabi_dsub>
 800b87a:	4604      	mov	r4, r0
 800b87c:	460d      	mov	r5, r1
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4640      	mov	r0, r8
 800b884:	4649      	mov	r1, r9
 800b886:	f7f4 fe27 	bl	80004d8 <__aeabi_dmul>
 800b88a:	2200      	movs	r2, #0
 800b88c:	e9cd 0100 	strd	r0, r1, [sp]
 800b890:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b894:	4620      	mov	r0, r4
 800b896:	4629      	mov	r1, r5
 800b898:	f7f4 fc66 	bl	8000168 <__aeabi_dsub>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8a4:	f7f4 ff42 	bl	800072c <__aeabi_ddiv>
 800b8a8:	4632      	mov	r2, r6
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	460d      	mov	r5, r1
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f4 fe10 	bl	80004d8 <__aeabi_dmul>
 800b8b8:	4632      	mov	r2, r6
 800b8ba:	463b      	mov	r3, r7
 800b8bc:	f7f4 fc56 	bl	800016c <__adddf3>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	4629      	mov	r1, r5
 800b8c8:	f7f4 fc4e 	bl	8000168 <__aeabi_dsub>
 800b8cc:	4642      	mov	r2, r8
 800b8ce:	464b      	mov	r3, r9
 800b8d0:	f7f4 fc4a 	bl	8000168 <__aeabi_dsub>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	2000      	movs	r0, #0
 800b8da:	4938      	ldr	r1, [pc, #224]	@ (800b9bc <__ieee754_pow+0xa3c>)
 800b8dc:	f7f4 fc44 	bl	8000168 <__aeabi_dsub>
 800b8e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800b8e4:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800b8e8:	da2e      	bge.n	800b948 <__ieee754_pow+0x9c8>
 800b8ea:	4652      	mov	r2, sl
 800b8ec:	f000 f874 	bl	800b9d8 <scalbn>
 800b8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8f4:	f7ff bbed 	b.w	800b0d2 <__ieee754_pow+0x152>
 800b8f8:	4c31      	ldr	r4, [pc, #196]	@ (800b9c0 <__ieee754_pow+0xa40>)
 800b8fa:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b8fe:	42a3      	cmp	r3, r4
 800b900:	d91a      	bls.n	800b938 <__ieee754_pow+0x9b8>
 800b902:	4b30      	ldr	r3, [pc, #192]	@ (800b9c4 <__ieee754_pow+0xa44>)
 800b904:	440b      	add	r3, r1
 800b906:	4303      	orrs	r3, r0
 800b908:	d009      	beq.n	800b91e <__ieee754_pow+0x99e>
 800b90a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b90e:	2200      	movs	r2, #0
 800b910:	2300      	movs	r3, #0
 800b912:	f7f5 f853 	bl	80009bc <__aeabi_dcmplt>
 800b916:	3800      	subs	r0, #0
 800b918:	bf18      	it	ne
 800b91a:	2001      	movne	r0, #1
 800b91c:	e444      	b.n	800b1a8 <__ieee754_pow+0x228>
 800b91e:	4642      	mov	r2, r8
 800b920:	464b      	mov	r3, r9
 800b922:	f7f4 fc21 	bl	8000168 <__aeabi_dsub>
 800b926:	4632      	mov	r2, r6
 800b928:	463b      	mov	r3, r7
 800b92a:	f7f5 f85b 	bl	80009e4 <__aeabi_dcmpge>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1eb      	bne.n	800b90a <__ieee754_pow+0x98a>
 800b932:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800b9c8 <__ieee754_pow+0xa48>
 800b936:	e6fd      	b.n	800b734 <__ieee754_pow+0x7b4>
 800b938:	469a      	mov	sl, r3
 800b93a:	4b24      	ldr	r3, [pc, #144]	@ (800b9cc <__ieee754_pow+0xa4c>)
 800b93c:	459a      	cmp	sl, r3
 800b93e:	f63f aef9 	bhi.w	800b734 <__ieee754_pow+0x7b4>
 800b942:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b946:	e71b      	b.n	800b780 <__ieee754_pow+0x800>
 800b948:	4621      	mov	r1, r4
 800b94a:	e7d1      	b.n	800b8f0 <__ieee754_pow+0x970>
 800b94c:	2000      	movs	r0, #0
 800b94e:	491b      	ldr	r1, [pc, #108]	@ (800b9bc <__ieee754_pow+0xa3c>)
 800b950:	f7ff bb34 	b.w	800afbc <__ieee754_pow+0x3c>
 800b954:	2000      	movs	r0, #0
 800b956:	2100      	movs	r1, #0
 800b958:	f7ff bb30 	b.w	800afbc <__ieee754_pow+0x3c>
 800b95c:	4650      	mov	r0, sl
 800b95e:	4659      	mov	r1, fp
 800b960:	f7ff bb2c 	b.w	800afbc <__ieee754_pow+0x3c>
 800b964:	460c      	mov	r4, r1
 800b966:	f7ff bb79 	b.w	800b05c <__ieee754_pow+0xdc>
 800b96a:	2400      	movs	r4, #0
 800b96c:	f7ff bb64 	b.w	800b038 <__ieee754_pow+0xb8>
 800b970:	652b82fe 	.word	0x652b82fe
 800b974:	3c971547 	.word	0x3c971547
 800b978:	00000000 	.word	0x00000000
 800b97c:	3fe62e43 	.word	0x3fe62e43
 800b980:	fefa39ef 	.word	0xfefa39ef
 800b984:	3fe62e42 	.word	0x3fe62e42
 800b988:	0ca86c39 	.word	0x0ca86c39
 800b98c:	be205c61 	.word	0xbe205c61
 800b990:	72bea4d0 	.word	0x72bea4d0
 800b994:	3e663769 	.word	0x3e663769
 800b998:	c5d26bf1 	.word	0xc5d26bf1
 800b99c:	3ebbbd41 	.word	0x3ebbbd41
 800b9a0:	af25de2c 	.word	0xaf25de2c
 800b9a4:	3f11566a 	.word	0x3f11566a
 800b9a8:	16bebd93 	.word	0x16bebd93
 800b9ac:	3f66c16c 	.word	0x3f66c16c
 800b9b0:	5555553e 	.word	0x5555553e
 800b9b4:	3fc55555 	.word	0x3fc55555
 800b9b8:	fff00000 	.word	0xfff00000
 800b9bc:	3ff00000 	.word	0x3ff00000
 800b9c0:	4090cbff 	.word	0x4090cbff
 800b9c4:	3f6f3400 	.word	0x3f6f3400
 800b9c8:	4090cc00 	.word	0x4090cc00
 800b9cc:	3fe00000 	.word	0x3fe00000

0800b9d0 <fabs>:
 800b9d0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4770      	bx	lr

0800b9d8 <scalbn>:
 800b9d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800b9dc:	4616      	mov	r6, r2
 800b9de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b9e2:	4683      	mov	fp, r0
 800b9e4:	468c      	mov	ip, r1
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	b982      	cbnz	r2, 800ba0c <scalbn+0x34>
 800b9ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b9ee:	4303      	orrs	r3, r0
 800b9f0:	d039      	beq.n	800ba66 <scalbn+0x8e>
 800b9f2:	4b2f      	ldr	r3, [pc, #188]	@ (800bab0 <scalbn+0xd8>)
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f7f4 fd6f 	bl	80004d8 <__aeabi_dmul>
 800b9fa:	4b2e      	ldr	r3, [pc, #184]	@ (800bab4 <scalbn+0xdc>)
 800b9fc:	4683      	mov	fp, r0
 800b9fe:	429e      	cmp	r6, r3
 800ba00:	468c      	mov	ip, r1
 800ba02:	da0d      	bge.n	800ba20 <scalbn+0x48>
 800ba04:	a326      	add	r3, pc, #152	@ (adr r3, 800baa0 <scalbn+0xc8>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	e01b      	b.n	800ba44 <scalbn+0x6c>
 800ba0c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800ba10:	42ba      	cmp	r2, r7
 800ba12:	d109      	bne.n	800ba28 <scalbn+0x50>
 800ba14:	4602      	mov	r2, r0
 800ba16:	f7f4 fba9 	bl	800016c <__adddf3>
 800ba1a:	4683      	mov	fp, r0
 800ba1c:	468c      	mov	ip, r1
 800ba1e:	e022      	b.n	800ba66 <scalbn+0x8e>
 800ba20:	460b      	mov	r3, r1
 800ba22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba26:	3a36      	subs	r2, #54	@ 0x36
 800ba28:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ba2c:	428e      	cmp	r6, r1
 800ba2e:	dd0c      	ble.n	800ba4a <scalbn+0x72>
 800ba30:	a31d      	add	r3, pc, #116	@ (adr r3, 800baa8 <scalbn+0xd0>)
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	461c      	mov	r4, r3
 800ba38:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800ba3c:	f361 74df 	bfi	r4, r1, #31, #1
 800ba40:	4621      	mov	r1, r4
 800ba42:	481d      	ldr	r0, [pc, #116]	@ (800bab8 <scalbn+0xe0>)
 800ba44:	f7f4 fd48 	bl	80004d8 <__aeabi_dmul>
 800ba48:	e7e7      	b.n	800ba1a <scalbn+0x42>
 800ba4a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ba4e:	4432      	add	r2, r6
 800ba50:	428a      	cmp	r2, r1
 800ba52:	dced      	bgt.n	800ba30 <scalbn+0x58>
 800ba54:	2a00      	cmp	r2, #0
 800ba56:	dd0a      	ble.n	800ba6e <scalbn+0x96>
 800ba58:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ba5c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ba60:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba64:	46ac      	mov	ip, r5
 800ba66:	4658      	mov	r0, fp
 800ba68:	4661      	mov	r1, ip
 800ba6a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800ba6e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ba72:	da09      	bge.n	800ba88 <scalbn+0xb0>
 800ba74:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800ba78:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800ba7c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800ba80:	480e      	ldr	r0, [pc, #56]	@ (800babc <scalbn+0xe4>)
 800ba82:	f041 011f 	orr.w	r1, r1, #31
 800ba86:	e7bd      	b.n	800ba04 <scalbn+0x2c>
 800ba88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ba8c:	3236      	adds	r2, #54	@ 0x36
 800ba8e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ba92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba96:	4658      	mov	r0, fp
 800ba98:	4629      	mov	r1, r5
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4b08      	ldr	r3, [pc, #32]	@ (800bac0 <scalbn+0xe8>)
 800ba9e:	e7d1      	b.n	800ba44 <scalbn+0x6c>
 800baa0:	c2f8f359 	.word	0xc2f8f359
 800baa4:	01a56e1f 	.word	0x01a56e1f
 800baa8:	8800759c 	.word	0x8800759c
 800baac:	7e37e43c 	.word	0x7e37e43c
 800bab0:	43500000 	.word	0x43500000
 800bab4:	ffff3cb0 	.word	0xffff3cb0
 800bab8:	8800759c 	.word	0x8800759c
 800babc:	c2f8f359 	.word	0xc2f8f359
 800bac0:	3c900000 	.word	0x3c900000

0800bac4 <with_errno>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	4604      	mov	r4, r0
 800bac8:	460d      	mov	r5, r1
 800baca:	4616      	mov	r6, r2
 800bacc:	f7fb fd7a 	bl	80075c4 <__errno>
 800bad0:	4629      	mov	r1, r5
 800bad2:	6006      	str	r6, [r0, #0]
 800bad4:	4620      	mov	r0, r4
 800bad6:	bd70      	pop	{r4, r5, r6, pc}

0800bad8 <xflow>:
 800bad8:	b513      	push	{r0, r1, r4, lr}
 800bada:	4604      	mov	r4, r0
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	b10c      	cbz	r4, 800bae6 <xflow+0xe>
 800bae2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bae6:	e9cd 2300 	strd	r2, r3, [sp]
 800baea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800baee:	f7f4 fcf3 	bl	80004d8 <__aeabi_dmul>
 800baf2:	2222      	movs	r2, #34	@ 0x22
 800baf4:	b002      	add	sp, #8
 800baf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bafa:	f7ff bfe3 	b.w	800bac4 <with_errno>

0800bafe <__math_uflow>:
 800bafe:	2200      	movs	r2, #0
 800bb00:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800bb04:	f7ff bfe8 	b.w	800bad8 <xflow>

0800bb08 <__math_oflow>:
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800bb0e:	f7ff bfe3 	b.w	800bad8 <xflow>
	...

0800bb14 <_init>:
 800bb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb16:	bf00      	nop
 800bb18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb1a:	bc08      	pop	{r3}
 800bb1c:	469e      	mov	lr, r3
 800bb1e:	4770      	bx	lr

0800bb20 <_fini>:
 800bb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb22:	bf00      	nop
 800bb24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb26:	bc08      	pop	{r3}
 800bb28:	469e      	mov	lr, r3
 800bb2a:	4770      	bx	lr
